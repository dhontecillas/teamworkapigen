swagger: "2.0"
info:
  title: Teamwork.com Projects API
  version: "3.0"
consumes:
- application/json
produces:
- application/json
tags:
- name: Activity
- name: Allocations
- name: Apps
- name: AppsSettings
- name: BETA
- name: Budgets
- name: CalendarEvents
- name: Categories
- name: Comments
- name: Company
- name: CustomFields
- name: Dashboards
- name: FileComments
- name: Files
- name: Forms
- name: FormsAssignees
- name: FormsPublic
- name: FormsToken
- name: Importers
- name: Lockdowns
- name: Messages
- name: MilestoneComments
- name: Milestones
- name: NotebookComments
- name: Notebooks
- name: People
- name: PeopleStatus
- name: Person
- name: ProjectUpdates
- name: Projects
- name: ResourceScheduling
- name: Risks
- name: Summary
- name: Tags
- name: TaskLists
- name: Tasks
- name: TimeTracking
- name: Workload
paths:
  /projects/api/v3/allocations.json:
    get:
      description: |-
        Return all allocations that matches with the provided filters.


        On this endpoint you can filter by project custom fields. The syntax for the
        query parameter is the following:

            projectCustomField[id][op]=value

        Where:
          - [id] is the custom field ID
          - [op] is the operator to apply when filtering, different operators are
            allowed according to the custom field type
          - [value] is the value to apply when filtering

        For example, if I want to filter a dropdown custom field with ID 10 to only
        return entries that have the value "Option1" we would do the following:

            projectCustomField[10][eq]=Option1

        The allowed operators are:
          - like
          - not-like
          - eq
          - not
          - lt
          - gt
          - any
      operationId: GET_projects_api_v3_allocations.json
      parameters:
      - default: today
        description: filter by start date
        format: date
        in: query
        name: startDate
        type: string
      - description: filter by search term
        in: query
        name: searchTerm
        type: string
      - description: filter by project status
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
        in: query
        name: projectStatus
        type: string
      - default: asc
        description: order mode
        enum:
        - asc
        - desc
        in: query
        name: orderMode
        type: string
      - default: project
        description: order by
        enum:
        - startdate
        - enddate
        - project
        - assigneduser
        in: query
        name: orderBy
        type: string
      - default: 30 days from today
        description: filter by end date
        format: date
        in: query
        name: endDate
        type: string
      - description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
        in: query
        items: {}
        name: projectHealths
        type: integer
      - default: "50"
        description: number of items in a page
        in: query
        name: pageSize
        type: integer
      - default: "1"
        description: page number
        in: query
        name: page
        type: integer
      - description: filter by starred projects only
        in: query
        name: onlyStarredProjects
        type: boolean
      - default: "false"
        description: only show projects with explicit membership
        in: query
        name: onlyProjectsWithExplicitMembership
        type: boolean
      - description: match all project tags
        in: query
        name: matchAllProjectTags
        type: boolean
      - default: "false"
        description: hide projects where the logged-in user is just an observer
        in: query
        name: hideObservedProjects
        type: boolean
      - description: filter by project tag ids
        in: query
        items:
          type: integer
        name: projectTagIds
        type: array
      - description: filter by project owner ids
        in: query
        items:
          type: integer
        name: projectOwnerIds
        type: array
      - description: filter by project ids
        in: query
        items:
          type: integer
        name: projectIds
        type: array
      - description: filter by company ids
        in: query
        items:
          type: integer
        name: projectCompanyIds
        type: array
      - description: filter by project category ids
        in: query
        items:
          type: integer
        name: projectCategoryIds
        type: array
      - description: include
        enum:
        - projects
        - projects.companies
        - assignee
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
        in: query
        items:
          type: string
        name: fields[users]
        type: array
      - enum:
        - id
        - name
        in: query
        items:
          type: string
        name: fields[projects]
        type: array
      - enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
        in: query
        items:
          type: string
        name: fields[companies]
        type: array
      - enum:
        - id
        - installationId
        - projectId
        - title
        - description
        - startedAt
        - endedAt
        - duration
        - color
        - status
        - distributeType
        - createdAt
        - createdByUser
        - updatedAt
        - updatedByUser
        - deletedAt
        - deletedByUser
        - assignedUserID
        in: query
        items:
          type: string
        name: fields[allocations]
        type: array
      - description: filter by assigned user ids
        in: query
        items:
          type: integer
        name: assignedUserIds
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/allocation.AllocationsResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get all allocations.
      tags:
      - Allocations
      x-private: true
    post:
      consumes:
      - application/json
      description: |-
        Creates a new allocation for resource scheduling. If the allocation start/end
        date conflicts with another allocation on the same project an error will be
        returned. You can bypass this error with the "ignoreCollisions" field.
      operationId: POST_projects_api_v3_allocations.json
      parameters:
      - in: body
        name: allocation.Request
        required: true
        schema:
          $ref: '#/definitions/allocation.Request'
      produces:
      - application/json
      responses:
        "201":
          description: 201 Created
          schema:
            $ref: '#/definitions/allocation.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Create a new allocation.
      tags:
      - Allocations
      x-private: true
  /projects/api/v3/allocations/{allocationId}.json:
    get:
      description: Retrieve an allocation by the identifier.
      operationId: GET_projects_api_v3_allocations_{allocationId}.json
      parameters:
      - in: path
        name: allocationId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/allocation.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get a specific allocation.
      tags:
      - Allocations
      x-private: true
    put:
      consumes:
      - application/json
      description: |-
        Updates an existing allocation for resource scheduling. If the allocation
        start/end date conflicts with another allocation on the same project an error
        will be returned. You can bypass this error with the "ignoreCollisions"
        field.
      operationId: PUT_projects_api_v3_allocations_{allocationId}.json
      parameters:
      - in: path
        name: allocationId
        required: true
        type: integer
      - in: body
        name: allocation.Request
        required: true
        schema:
          $ref: '#/definitions/allocation.Request'
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/allocation.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
        "409":
          description: 409 Conflict
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update an existing allocation.
      tags:
      - Allocations
      x-private: true
    patch:
      consumes:
      - application/json
      description: |-
        Updates an existing allocation for resource scheduling. If the allocation
        start/end date conflicts with another allocation on the same project an error
        will be returned. You can bypass this error with the "ignoreCollisions"
        field.
      operationId: PATCH_projects_api_v3_allocations_{allocationId}.json
      parameters:
      - in: path
        name: allocationId
        required: true
        type: integer
      - in: body
        name: allocation.Request
        required: true
        schema:
          $ref: '#/definitions/allocation.Request'
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/allocation.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
        "409":
          description: 409 Conflict
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update an existing allocation.
      tags:
      - Allocations
      x-private: true
    delete:
      consumes:
      - application/json
      description: |-
        Removes an allocation. It's still possible to recover the allocation. To
        remove a allocation definitely provide the "hardDelete" flag.
      operationId: DELETE_projects_api_v3_allocations_{allocationId}.json
      parameters:
      - in: path
        name: allocationId
        required: true
        type: integer
      - in: body
        name: allocation.DeleteRequest
        required: true
        schema:
          $ref: '#/definitions/allocation.DeleteRequest'
      produces:
      - application/json
      responses:
        "204":
          description: 204 No Content (no data)
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Delete an existing allocation.
      tags:
      - Allocations
      x-private: true
  /projects/api/v3/allocations/{allocationId}/restore.json:
    put:
      description: Restore an allocation by the identifier.
      operationId: PUT_projects_api_v3_allocations_{allocationId}_restore.json
      parameters:
      - in: path
        name: allocationId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/allocation.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Restore a soft deleted allocation.
      tags:
      - Allocations
      x-private: true
  /projects/api/v3/allocations/{allocationId}/split.json:
    put:
      consumes:
      - application/json
      description: Split an allocation by the identifier.
      operationId: PUT_projects_api_v3_allocations_{allocationId}_split.json
      parameters:
      - in: path
        name: allocationId
        required: true
        type: integer
      - in: body
        name: allocation.SplitRequest
        required: true
        schema:
          $ref: '#/definitions/allocation.SplitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/allocation.AllocationsResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Split an allocation in two
      tags:
      - Allocations
      x-private: true
  /projects/api/v3/allocations/{allocationId}/time.json:
    get:
      operationId: GET_projects_api_v3_allocations_{allocationId}_time.json
      tags:
      - TimeTracking
      summary: Get time entries for a specific allocation
      description: |-
        Return logged time entries for a specific allocation. Only the time entries that
        the logged-in user can access will be returned.
      produces:
      - application/json
      parameters:
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: startDate
        in: query
        description: filter by a starting date
        type: string
        format: date
      - name: selectedColumns
        in: query
        description: customise the report by selecting columns
        type: string
        items: {}
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: projectStatuses
        in: query
        description: filter by project statuses
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: sort order
        type: string
        enum:
        - company
        - date
        - dateupdated
        - project
        - task
        - tasklist
        - user
        default: date
      - name: invoicedType
        in: query
        description: filter by invoiced type
        type: string
        enum:
        - all
        - invoiced
        - not-invoiced
        default: all
      - name: endDate
        in: query
        description: filter by an ending date
        type: string
        format: date
      - name: billableType
        in: query
        description: filter by billable type
        type: string
        enum:
        - all
        - billable
        - non-billable
        default: all
      - name: ticketId
        in: query
        description: filter by ticket id
        type: integer
      - name: tasklistId
        in: query
        description: filter by tasklist id
        type: integer
      - name: projectId
        in: query
        description: filter by project id
        type: integer
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: allocationId
        in: path
        type: integer
        required: true
      - name: allocationId
        in: query
        description: filter by allocation id
        type: integer
      - name: showDeleted
        in: query
        description: include deleted items
        type: boolean
        default: "false"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllTags
        in: query
        description: match all tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: taskTagIds
        in: query
        description: filter by task tag ids
        type: array
        items:
          type: integer
      - name: tagIds
        in: query
        description: filter by tag ids
        type: array
        items:
          type: integer
      - name: projectsFromCompanyId
        in: query
        description: filter by project company ids
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - tags
        - tasks
        - tasks.parentTasks
        - tasks.tasklists
        - users
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[timelogs]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - dateCreated
        - minutes
        - description
        - timeLogged
        - billable
        - deleted
        - dateDeleted
        - hasStartTime
        - dateEdited
        - deskTicketId
        - invoiceNumber
        - userId
        - taskId
        - projectId
        - loggedByUserId
        - deletedByUserId
        - editedByUserId
        - taskIdPreMove
        - projectBillingInvoiceId
      - name: fields[tasks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
      - name: fields[tasklists]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - projectId
        - milestoneId
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: companyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: assignedToUserIds
        in: query
        description: filter by assigned user ids
        type: array
        items:
          type: integer
      - name: assignedToTeamIds
        in: query
        description: filter by assigned team ids
        type: array
        items:
          type: integer
      - name: assignedToCompanyIds
        in: query
        description: filter by assigned company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/timelog.TimelogsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/allocations/bulk/delete.json:
    post:
      consumes:
      - application/json
      description: |-
        Remove multiple allocations at once. It's still possible to recover those
        allocations. To remove all allocations definitely provide the "hardDelete"
        flag.
      operationId: POST_projects_api_v3_allocations_bulk_delete.json
      parameters:
      - in: body
        name: allocation.BulkDeleteRequest
        required: true
        schema:
          $ref: '#/definitions/allocation.BulkDeleteRequest'
      produces:
      - application/json
      responses:
        "204":
          description: 204 No Content (no data)
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Delete many allocations at once.
      tags:
      - Allocations
      x-private: true
  /projects/api/v3/apps.json:
    get:
      operationId: GET_projects_api_v3_apps.json
      parameters:
      - default: projects
        description: request apps for a given product
        enum:
        - projects
        - spaces
        - crm
        - desk
        - chat
        in: query
        name: product
        type: string
      - default: "50"
        description: number of items in a page
        in: query
        name: pageSize
        type: integer
      - default: "1"
        description: page number
        in: query
        name: page
        type: integer
      - description: include
        enum:
        - appsettings
        in: query
        items:
          type: string
        name: include
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/app.AppsResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get all apps.
      tags:
      - Apps
      x-private: true
  /projects/api/v3/apps/{appId}.json:
    get:
      operationId: GET_projects_api_v3_apps_{appId}.json
      parameters:
      - in: path
        name: appId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/app.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get a specific app.
      tags:
      - Apps
      x-private: true
  /projects/api/v3/apps/{appId}/install.json:
    post:
      operationId: POST_projects_api_v3_apps_{appId}_install.json
      parameters:
      - in: path
        name: appId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: 201 Created
          schema:
            $ref: '#/definitions/app.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Install an app onto an installation
      tags:
      - Apps
      x-private: true
  /projects/api/v3/apps/{appId}/settings/{settingId}.json:
    put:
      consumes:
      - application/json
      operationId: PUT_projects_api_v3_apps_{appId}_settings_{settingId}.json
      parameters:
      - in: body
        name: setting.Request
        required: true
        schema:
          $ref: '#/definitions/setting.Request'
      - in: path
        name: settingId
        required: true
        type: integer
      - in: path
        name: appId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/setting.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Update an existing setting.
      tags:
      - AppsSettings
      x-private: true
  /projects/api/v3/apps/{appId}/uninstall.json:
    post:
      operationId: POST_projects_api_v3_apps_{appId}_uninstall.json
      parameters:
      - in: path
        name: appId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: 204 No Content (no data)
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Uninstall an app from an installation
      tags:
      - Apps
      x-private: true
  /projects/api/v3/budget/notifications/{notificationId}.json:
    patch:
      operationId: PATCH_projects_api_v3_budget_notifications_{notificationId}.json
      tags:
      - Budgets
      summary: Update an existing notification.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: notification.Request
        in: body
        required: true
        schema:
          $ref: '#/definitions/notification.Request'
      - name: notificationId
        in: path
        type: integer
        required: true
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/notification.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
        409:
          description: 409 Conflict
          schema:
            $ref: '#/definitions/view.ErrorResponse'
    delete:
      operationId: DELETE_projects_api_v3_budget_notifications_{notificationId}.json
      tags:
      - Budgets
      summary: Delete an existing notification.
      produces:
      - application/json
      parameters:
      - name: notificationId
        in: path
        type: integer
        required: true
      responses:
        204:
          description: 204 No Content (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/budgets.json:
    get:
      operationId: GET_projects_api_v3_budgets.json
      tags:
      - Budgets
      summary: Get all budgets.
      description: Get a list of budgets information.
      produces:
      - application/json
      parameters:
      - name: updatedAfterDate
        in: query
        description: filter by updated after date (deprecated, use updatedAfter)
        type: string
        format: date-time
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: type
        in: query
        description: filter by budget type
        type: string
        enum:
        - all
        - financial
        - time
      - name: status
        in: query
        description: filter by budget status
        type: string
        enum:
        - all
        - active
        - archived
        - deleted
      - name: projectStatuses
        in: query
        description: project status
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - dateCreated
        default: dateCreated
      - name: projectHealths
        in: query
        description: |-
          project healths
          []
          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: showDeleted
        in: query
        description: include deleted items
        type: boolean
        default: "false"
      - name: showArchived
        in: query
        description: include archived items. usually in conjunction with one provided projectId for a project's budget history.
        type: boolean
        default: "false"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyArchived
        in: query
        description: only archived items
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - notifications
        - notifications.users
        - notifications.companies
        - notifications.teams
        - createdBy
        - updatedBy
        - deletedBy
      - name: ids
        in: query
        description: filter by budget ids
        type: array
        items:
          type: integer
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[teams]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - teamLogo
        - teamLogoIcon
        - teamLogoColor
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[projectBudgetNotifications]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - userIds
        - teamIds
        - companyIds
        - notificationMedium
        - capacityThreshold
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/budget.ProjectBudgetsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
    post:
      operationId: POST_projects_api_v3_budgets.json
      tags:
      - Budgets
      summary: Create a new budget.
      description: Creates a new budget.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: budget.Request
        in: body
        required: true
        schema:
          $ref: '#/definitions/budget.Request'
      responses:
        201:
          description: 201 Created
          schema:
            $ref: '#/definitions/budget.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        409:
          description: 409 Conflict
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/budgets/{id}.json:
    get:
      operationId: GET_projects_api_v3_budgets_{id}.json
      tags:
      - Budgets
      summary: Get a specific budget.
      description: Gets the budget information for the provided budget id.
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: integer
        required: true
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/budget.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
    patch:
      operationId: PATCH_projects_api_v3_budgets_{id}.json
      tags:
      - Budgets
      summary: Update an existing budget.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: integer
        required: true
      - name: budget.Request
        in: body
        required: true
        schema:
          $ref: '#/definitions/budget.Request'
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/budget.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
        409:
          description: 409 Conflict
          schema:
            $ref: '#/definitions/view.ErrorResponse'
    delete:
      operationId: DELETE_projects_api_v3_budgets_{id}.json
      tags:
      - Budgets
      summary: Delete an existing budget.
      description: Delete the budget with the provided budget id.
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: integer
        required: true
      responses:
        204:
          description: 204 No Content (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/budgets/{id}/usages.json:
    get:
      operationId: GET_projects_api_v3_budgets_{id}_usages.json
      tags:
      - Budgets
      summary: Get daily budget capacity used.
      description: |-
        Gets the budget used capacity for the provided budget id,
        with the daily timeline of capacity usage.
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        type: integer
        required: true
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/budget.ProjectBudgetUsageResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/budgets/bulk/delete.json:
    post:
      operationId: POST_projects_api_v3_budgets_bulk_delete.json
      tags:
      - Budgets
      summary: Delete many budgets at once.
      description: Delete several budgets in a bulk.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: budget.BulkDeleteRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/budget.BulkDeleteRequest'
      responses:
        204:
          description: 204 No Content (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/calendar/events.csv:
    get:
      operationId: GET_projects_api_v3_calendar_events.csv
      tags:
      - CalendarEvents
      summary: Generate agenda report in CSV format
      description: |-
        Generates an agenda report in CSV format containing all the events for the
        provided filters.
      produces:
      - application/json
      - text/csv
      parameters:
      - name: startDate
        in: query
        description: events that happen after this date
        type: string
        format: date
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: endDate
        in: query
        description: events that happen before this date
        type: string
        format: date
      - name: withTasks
        in: query
        description: include tasks
        type: boolean
        default: "false"
      - name: withMilestones
        in: query
        description: include milestones
        type: boolean
        default: "false"
      - name: withEvents
        in: query
        description: include events
        type: boolean
        default: "true"
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeTags
        in: query
        description: should include tags
        type: boolean
        default: "false"
      - name: attendingOnly
        in: query
        description: when filtering events with targetUserIDs, display only when attending the event
        type: boolean
        default: "false"
      - name: typeIDs
        in: query
        description: filter calendar events to show only the ones in typeIDs
        type: array
        items:
          type: integer
      - name: targetUserIDs
        in: query
        description: filter to show only events for the provided user
        type: array
        items:
          type: integer
      - name: targetProjectIDs
        in: query
        description: filter to show only events for the provided projects
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/calendar/events.html:
    get:
      operationId: GET_projects_api_v3_calendar_events.html
      tags:
      - CalendarEvents
      summary: Generate agenda report in HTML format
      description: |-
        Generates an agenda report in HTML format containing all the events for the
        provided filters.
      produces:
      - application/json
      - text/html
      parameters:
      - name: startDate
        in: query
        description: events that happen after this date
        type: string
        format: date
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: endDate
        in: query
        description: events that happen before this date
        type: string
        format: date
      - name: withTasks
        in: query
        description: include tasks
        type: boolean
        default: "false"
      - name: withMilestones
        in: query
        description: include milestones
        type: boolean
        default: "false"
      - name: withEvents
        in: query
        description: include events
        type: boolean
        default: "true"
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeTags
        in: query
        description: should include tags
        type: boolean
        default: "false"
      - name: attendingOnly
        in: query
        description: when filtering events with targetUserIDs, display only when attending the event
        type: boolean
        default: "false"
      - name: typeIDs
        in: query
        description: filter calendar events to show only the ones in typeIDs
        type: array
        items:
          type: integer
      - name: targetUserIDs
        in: query
        description: filter to show only events for the provided user
        type: array
        items:
          type: integer
      - name: targetProjectIDs
        in: query
        description: filter to show only events for the provided projects
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/calendar/events.json:
    get:
      operationId: GET_projects_api_v3_calendar_events.json
      tags:
      - CalendarEvents
      summary: Retrieve the calendar events
      description: |-
        This call will return all calendar events that the current user can see in
        the provided date range.
      produces:
      - application/json
      parameters:
      - name: startDate
        in: query
        description: events that happen after this date
        type: string
        format: date
      - name: projectStatuses
        in: query
        description: filter by project statuses
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - date
        default: date
      - name: endDate
        in: query
        description: events that happen before this date
        type: string
        format: date
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: fields[calendarEvents]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - title
        - startDate
        - endDate
        - typeId
        - privacyType
        - allDay
        - location
        - description
        - showAsBusy
        - attendeesCanEdit
        - projectUsersCanEdit
        - monthlyRepeatType
        - dateLastUpdated
        - createdDateTime
        - deleted
        - dateDeleted
        - additionalProperties
        - currentUserAssociationType
        - sequenceId
        - projectId
        - ownerUserId
        - deletedByUserId
        - createdByUserId
        - updatedByUserId
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/calendar.EventsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/calendar/events.pdf:
    get:
      operationId: GET_projects_api_v3_calendar_events.pdf
      tags:
      - CalendarEvents
      summary: Generate agenda report in PDF format
      description: |-
        Generates an agenda report in PDF format containing all the events for the
        provided filters.
      produces:
      - application/json
      - application/pdf
      parameters:
      - name: startDate
        in: query
        description: events that happen after this date
        type: string
        format: date
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: endDate
        in: query
        description: events that happen before this date
        type: string
        format: date
      - name: withTasks
        in: query
        description: include tasks
        type: boolean
        default: "false"
      - name: withMilestones
        in: query
        description: include milestones
        type: boolean
        default: "false"
      - name: withEvents
        in: query
        description: include events
        type: boolean
        default: "true"
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeTags
        in: query
        description: should include tags
        type: boolean
        default: "false"
      - name: attendingOnly
        in: query
        description: when filtering events with targetUserIDs, display only when attending the event
        type: boolean
        default: "false"
      - name: typeIDs
        in: query
        description: filter calendar events to show only the ones in typeIDs
        type: array
        items:
          type: integer
      - name: targetUserIDs
        in: query
        description: filter to show only events for the provided user
        type: array
        items:
          type: integer
      - name: targetProjectIDs
        in: query
        description: filter to show only events for the provided projects
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/calendar/events.xlsx:
    get:
      operationId: GET_projects_api_v3_calendar_events.xlsx
      tags:
      - CalendarEvents
      summary: Generate agenda report in XLSX format
      description: |-
        Generates an agenda report in XLSX format containing all the events for the
        provided filters.
      produces:
      - application/json
      - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
      parameters:
      - name: startDate
        in: query
        description: events that happen after this date
        type: string
        format: date
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: endDate
        in: query
        description: events that happen before this date
        type: string
        format: date
      - name: withTasks
        in: query
        description: include tasks
        type: boolean
        default: "false"
      - name: withMilestones
        in: query
        description: include milestones
        type: boolean
        default: "false"
      - name: withEvents
        in: query
        description: include events
        type: boolean
        default: "true"
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeTags
        in: query
        description: should include tags
        type: boolean
        default: "false"
      - name: attendingOnly
        in: query
        description: when filtering events with targetUserIDs, display only when attending the event
        type: boolean
        default: "false"
      - name: typeIDs
        in: query
        description: filter calendar events to show only the ones in typeIDs
        type: array
        items:
          type: integer
      - name: targetUserIDs
        in: query
        description: filter to show only events for the provided user
        type: array
        items:
          type: integer
      - name: targetProjectIDs
        in: query
        description: filter to show only events for the provided projects
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/columns/{columnId}.json:
    get:
      description: Long description explaining the endpoint.
      operationId: GET_projects_api_v3_columns_{columnId}.json
      parameters:
      - in: path
        name: columnId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/column.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get a specific column.
      tags:
      - BETA
      x-private: true
  /projects/api/v3/comments.json:
    get:
      operationId: GET_projects_api_v3_comments.json
      parameters:
      - description: filter by risks updated after specified date (deprecated, use updatedAfter)
        format: date-time
        in: query
        name: updatedAfterDate
        type: string
      - description: filter by risks updated after specified date
        format: date-time
        in: query
        name: updatedAfter
        type: string
      - description: filter by comment content (like v1 filterText param)
        in: query
        name: searchTerm
        type: string
      - description: filter by published after date
        format: date
        in: query
        name: publishedStartDate
        type: string
      - description: filter by published before date
        format: date
        in: query
        name: publishedEndDate
        type: string
      - description: filter by project statuses
        in: query
        name: projectStatuses
        type: string
      - default: asc
        description: order mode
        enum:
        - asc
        - desc
        in: query
        name: orderMode
        type: string
      - default: data
        description: order by
        enum:
        - all
        - date
        - project
        - user
        - type
        in: query
        name: orderBy
        type: string
      - description: filter by object types
        enum:
        - task
        - file
        - notebook
        - milestone
        - link
        - event
        - status
        - projectupdate
        in: query
        items: {}
        name: objectTypes
        type: string
      - description: object type where the comment is attached to (deprecated, use objectTypes)
        enum:
        - task
        - file
        - notebook
        - milestone
        - link
        - event
        - status
        - projectupdate
        in: query
        items: {}
        name: objectType
        type: string
      - description: filter by commment status
        enum:
        - all
        - read
        - unread
        in: query
        name: commentStatus
        type: string
      - description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
        in: query
        items: {}
        name: projectHealths
        type: integer
      - default: "50"
        description: number of items in a page
        in: query
        name: pageSize
        type: integer
      - default: "1"
        description: page number
        in: query
        name: page
        type: integer
      - default: "false"
        description: use strict html filtering for content
        in: query
        name: strictHTML
        type: boolean
      - description: filter by starred projects only
        in: query
        name: onlyStarredProjects
        type: boolean
      - description: match all project tags
        in: query
        name: matchAllProjectTags
        type: boolean
      - description: include archived projects
        in: query
        name: includeArchivedProjects
        type: boolean
      - description: filter by user ids
        in: query
        items:
          type: integer
        name: userIds
        type: array
      - description: filter by project tag ids
        in: query
        items:
          type: integer
        name: projectTagIds
        type: array
      - description: filter by project owner ids
        in: query
        items:
          type: integer
        name: projectOwnerIds
        type: array
      - description: filter by project ids
        in: query
        items:
          type: integer
        name: projectIds
        type: array
      - description: filter by company ids
        in: query
        items:
          type: integer
        name: projectCompanyIds
        type: array
      - description: filter by project category ids
        in: query
        items:
          type: integer
        name: projectCategoryIds
        type: array
      - description: filter by object IDs
        in: query
        items:
          type: integer
        name: objectIds
        type: array
      - description: filter by users who got notified for the comments
        in: query
        items:
          type: integer
        name: notifiedUserIds
        type: array
      - description: include
        enum:
        - reactions
        - users
        - projects
        - projects.companies
        - files
        - tasks
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
        in: query
        items:
          type: string
        name: fields[users]
        type: array
      - enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
        in: query
        items:
          type: string
        name: fields[tasks]
        type: array
      - enum:
        - id
        - name
        in: query
        items:
          type: string
        name: fields[projects]
        type: array
      - enum:
        - id
        - name
        - description
        - contents
        - type
        - isPrivate
        - locked
        - lockdownId
        - secureContent
        - projectId
        - createdByUserID
        - updatedByUserID
        - deletedByUserID
        - dateUpdated
        - dateCreated
        - dateDeleted
        - deleted
        - categoryId
        - notebookVersionID
        - notebookVersionCreatedDateTime
        - notebookVersionUpdatedDateTime
        - latestVersionNo
        - commentsCount
        - readCommentsCount
        - contentHTML
        - privacy
        - commentFollowers
        - changeFollowers
        - projectNotifyCommentIncludeCreator
        - tagIds
        in: query
        items:
          type: string
        name: fields[notebooks]
        type: array
      - enum:
        - id
        - name
        - description
        - deadline
        - completed
        - projectId
        - createdOn
        - lastChangedOn
        - creatorUserId
        - reminder
        - private
        - lockdownId
        - status
        - completedOn
        - completerId
        - percentageComplete
        in: query
        items:
          type: string
        name: fields[milestones]
        type: array
      - enum:
        - id
        - title
        - description
        - code
        - width
        - height
        - isPrivate
        - provider
        - projectId
        - createdAt
        - forceNewWindow
        - deleted
        - deletedAt
        - updatedAt
        - categoryId
        - createdBy
        - deletedBy
        - updatedBy
        in: query
        items:
          type: string
        name: fields[links]
        type: array
      - enum:
        - fileVersionId
        - fileId
        - versionNo
        - name
        - originalName
        - size
        - uploadedBy
        - description
        - status
        - projectId
        - reactions
        - commentsCount
        - commentsCountRead
        - displayName
        in: query
        items:
          type: string
        name: fields[fileversions]
        type: array
      - enum:
        - isPrivate
        - latestFileVersionNo
        - versionId
        - status
        - description
        - lockdownId
        - tagIds
        - changeFollowers
        - commentFollowers
        - originalName
        - displayName
        - isLocked
        - lockedByUserId
        - lockedDate
        - size
        - uploadedDate
        - uploadedByUserID
        - updatedAt
        - deletedAt
        - deletedBy
        - fileSource
        - projectId
        - numLikes
        - reactions
        - versions
        - downloadURL
        - previewURL
        - thumbURL
        - relatedItems
        - commentsCount
        - commentsCountRead
        - categoryId
        in: query
        items:
          type: string
        name: fields[files]
        type: array
      - enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
        in: query
        items:
          type: string
        name: fields[companies]
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/comment.CommentsResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get a list of comments
      tags:
      - Comments
      x-private: true
  /projects/api/v3/companies/{companyId}.json:
    get:
      description: Retrieves a company by id.
      operationId: GET_projects_api_v3_companies_{companyId}.json
      parameters:
      - in: path
        name: companyId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/company.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get a specific company.
      tags:
      - Company
      x-private: true
  /projects/api/v3/costs/users/{userId}.json:
    get:
      description: Gets a usercost for a specific user.
      operationId: GET_projects_api_v3_costs_users_{userId}.json
      parameters:
      - in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/usercost.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get a specific usercost.
      tags:
      - BETA
      x-private: true
    put:
      consumes:
      - application/json
      description: sets an hourly cost for a specifc user.
      operationId: PUT_projects_api_v3_costs_users_{userId}.json
      parameters:
      - in: body
        name: usercost.Request
        required: true
        schema:
          $ref: '#/definitions/usercost.Request'
      - in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/usercost.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: set a usercost.
      tags:
      - BETA
      x-private: true
  /projects/api/v3/customfields.json:
    get:
      description: Return all custom fields for the provided filters.
      operationId: GET_projects_api_v3_customfields.json
      parameters:
      - description: filter by project statuses
        in: query
        name: projectStatuses
        type: string
      - default: asc
        description: order mode
        enum:
        - asc
        - desc
        in: query
        name: orderMode
        type: string
      - default: name
        description: order by
        enum:
        - name
        - project
        - dateCreated
        - dateUpdated
        in: query
        name: orderBy
        type: string
      - description: filter by entities
        in: query
        items: {}
        name: entities
        type: string
      - description: filter by project id
        in: query
        name: projectId
        type: integer
      - description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
        in: query
        items: {}
        name: projectHealths
        type: integer
      - default: "50"
        description: number of items in a page
        in: query
        name: pageSize
        type: integer
      - default: "1"
        description: page number
        in: query
        name: page
        type: integer
      - default: "false"
        description: include deleted items
        in: query
        name: showDeleted
        type: boolean
      - description: filter by starred projects only
        in: query
        name: onlyStarredProjects
        type: boolean
      - default: "false"
        description: only return site-level custom fields
        in: query
        name: onlySiteLevel
        type: boolean
      - description: match all project tags
        in: query
        name: matchAllProjectTags
        type: boolean
      - default: "true"
        description: include custom fields for site-level in the response
        in: query
        name: includeSiteLevel
        type: boolean
      - description: filter by project tag ids
        in: query
        items:
          type: integer
        name: projectTagIds
        type: array
      - description: filter by project owner ids
        in: query
        items:
          type: integer
        name: projectOwnerIds
        type: array
      - description: filter by project ids
        in: query
        items:
          type: integer
        name: projectIds
        type: array
      - description: filter by company ids
        in: query
        items:
          type: integer
        name: projectCompanyIds
        type: array
      - description: filter by project category ids
        in: query
        items:
          type: integer
        name: projectCategoryIds
        type: array
      - description: include
        enum:
        - projects
        - createdBy
        - updatedBy
        - deletedBy
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
        in: query
        items:
          type: string
        name: fields[users]
        type: array
      - enum:
        - id
        - name
        in: query
        items:
          type: string
        name: fields[projects]
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/customfield.CustomFieldsResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get all custom fields
      tags:
      - CustomFields
      x-private: false
    post:
      consumes:
      - application/json
      description: |-
        Creates a new custom field. The custom field could have a scope at an
        installation-level or at a project-level.
      operationId: POST_projects_api_v3_customfields.json
      parameters:
      - in: body
        name: customfield.Request
        required: true
        schema:
          $ref: '#/definitions/customfield.Request'
      produces:
      - application/json
      responses:
        "201":
          description: 201 Created
          schema:
            $ref: '#/definitions/customfield.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Create a new custom field
      tags:
      - CustomFields
      x-private: false
  /projects/api/v3/customfields/{customFieldId}.json:
    get:
      description: This returns all details about an individual custom field.
      operationId: GET_projects_api_v3_customfields_{customFieldId}.json
      parameters:
      - description: filter by project statuses
        in: query
        name: projectStatuses
        type: string
      - default: asc
        description: order mode
        enum:
        - asc
        - desc
        in: query
        name: orderMode
        type: string
      - default: name
        description: order by
        enum:
        - name
        - project
        - dateCreated
        - dateUpdated
        in: query
        name: orderBy
        type: string
      - description: filter by entities
        in: query
        items: {}
        name: entities
        type: string
      - description: filter by project id
        in: query
        name: projectId
        type: integer
      - description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
        in: query
        items: {}
        name: projectHealths
        type: integer
      - default: "50"
        description: number of items in a page
        in: query
        name: pageSize
        type: integer
      - default: "1"
        description: page number
        in: query
        name: page
        type: integer
      - in: path
        name: customFieldId
        required: true
        type: integer
      - default: "false"
        description: include deleted items
        in: query
        name: showDeleted
        type: boolean
      - description: filter by starred projects only
        in: query
        name: onlyStarredProjects
        type: boolean
      - default: "false"
        description: only return site-level custom fields
        in: query
        name: onlySiteLevel
        type: boolean
      - description: match all project tags
        in: query
        name: matchAllProjectTags
        type: boolean
      - default: "true"
        description: include custom fields for site-level in the response
        in: query
        name: includeSiteLevel
        type: boolean
      - description: filter by project tag ids
        in: query
        items:
          type: integer
        name: projectTagIds
        type: array
      - description: filter by project owner ids
        in: query
        items:
          type: integer
        name: projectOwnerIds
        type: array
      - description: filter by project ids
        in: query
        items:
          type: integer
        name: projectIds
        type: array
      - description: filter by company ids
        in: query
        items:
          type: integer
        name: projectCompanyIds
        type: array
      - description: filter by project category ids
        in: query
        items:
          type: integer
        name: projectCategoryIds
        type: array
      - description: include
        enum:
        - projects
        - createdBy
        - updatedBy
        - deletedBy
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
        in: query
        items:
          type: string
        name: fields[users]
        type: array
      - enum:
        - id
        - name
        in: query
        items:
          type: string
        name: fields[projects]
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/customfield.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get a custom field by id.
      tags:
      - CustomFields
      x-private: false
    put:
      consumes:
      - application/json
      description: Updates an existing custom field.
      operationId: PUT_projects_api_v3_customfields_{customFieldId}.json
      parameters:
      - in: path
        name: customFieldId
        required: true
        type: integer
      - in: body
        name: customfield.Request
        required: true
        schema:
          $ref: '#/definitions/customfield.Request'
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/customfield.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
        "409":
          description: 409 Conflict
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update an existing custom field.
      tags:
      - CustomFields
      x-private: false
    patch:
      consumes:
      - application/json
      description: Updates an existing custom field.
      operationId: PATCH_projects_api_v3_customfields_{customFieldId}.json
      parameters:
      - in: path
        name: customFieldId
        required: true
        type: integer
      - in: body
        name: customfield.Request
        required: true
        schema:
          $ref: '#/definitions/customfield.Request'
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/customfield.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
        "409":
          description: 409 Conflict
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update an existing custom field.
      tags:
      - CustomFields
      x-private: false
    delete:
      description: Removes a custom field.
      operationId: DELETE_projects_api_v3_customfields_{customFieldId}.json
      parameters:
      - in: path
        name: customFieldId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: 204 No Content (no data)
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Delete an existing custom field
      tags:
      - CustomFields
      x-private: false
  /projects/api/v3/customfields/bulk/delete.json:
    post:
      consumes:
      - application/json
      description: Remove multiple custom fields at once.
      operationId: POST_projects_api_v3_customfields_bulk_delete.json
      parameters:
      - in: body
        name: customfield.BulkDeleteRequest
        required: true
        schema:
          $ref: '#/definitions/customfield.BulkDeleteRequest'
      produces:
      - application/json
      responses:
        "204":
          description: 204 No Content (no data)
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Delete many custom fields at once
      tags:
      - CustomFields
      x-private: false
  /projects/api/v3/dashboards.json:
    get:
      operationId: GET_projects_api_v3_dashboards.json
      tags:
      - Dashboards
      summary: Get all dashboards
      description: |-
        Return all dashboards that the logged-in user can access. Dashboards contains
        panels that are used to summarize many activities from the installation.
      produces:
      - application/json
      parameters:
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - isDefault
        - displayOrder
        default: isDefault
      - name: userId
        in: query
        description: filter by user id
        type: integer
      - name: projectId
        in: query
        description: filter by project id
        type: integer
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: showDeleted
        in: query
        description: include deleted items
        type: boolean
        default: "false"
      - name: emoji
        in: query
        description: parse emoji alias to unicode
        type: boolean
        default: "true"
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - users
        - dashboardSettings
        - dashboardPanels
        - dashboardPanels.settings
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[dashboards]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - title
        - color
        - description
        - isDefault
        - userId
        - projectId
        - displayOrder
        - deleted
        - dateCreated
        - dateUpdated
        - dateDeleted
        - dashboardPanelIds
        - dashboardSettingIds
      - name: fields[dashboardSettings]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - dashboardId
        - name
        - value
      - name: fields[dashboardPanels]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - dashboardId
        - name
        - type
        - displayOrder
        - dashboardPanelSettingIds
      - name: fields[dashboardPanelSettings]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - installationId
        - dashboardId
        - dashboardPanelId
        - name
        - value
      - name: dashboardIds
        in: query
        description: filter by user dashboard ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/dashboard.UserDashboardsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/files.json:
    get:
      description: Return all files for the provided filters.
      operationId: GET_projects_api_v3_files.json
      parameters:
      - description: filter by uploaded start date
        format: date
        in: query
        name: uploadedStartDate
        type: string
      - description: filter by uploaded end date
        format: date
        in: query
        name: uploadedEndDate
        type: string
      - description: filter by updated after date (deprecated, use updatedAfter)
        format: date-time
        in: query
        name: updatedAfterDate
        type: string
      - description: filter by updated after date
        format: date-time
        in: query
        name: updatedAfter
        type: string
      - description: filter by 'all', 'active', 'inactive'
        in: query
        name: status
        type: string
      - description: filter by file name
        in: query
        name: searchTerm
        type: string
      - default: normal
        description: filter by project type. Leave empty to retrieve all types eg. &projectType=
        enum:
        - normal
        - tasklists-template
        - projects-template
        in: query
        name: projectType
        type: string
      - default: asc
        description: order mode
        enum:
        - asc
        - desc
        in: query
        name: orderMode
        type: string
      - default: name
        description: order by
        enum:
        - name
        - projectname
        - dateuploaded
        - size
        in: query
        name: orderBy
        type: string
      - description: filter by version id, returns the latest file
        in: query
        name: versionId
        type: integer
      - description: select the version of the file to include when filtering by id.
        in: query
        name: version
        type: integer
      - description: filter by task ids.
        in: query
        name: taskId
        type: integer
      - description: filter by project id
        in: query
        name: projectId
        type: integer
      - default: "50"
        description: number of items in a page
        in: query
        name: pageSize
        type: integer
      - default: "1"
        description: page number
        in: query
        name: page
        type: integer
      - description: filter by project file id
        in: query
        name: id
        type: integer
      - description: filter by category id
        in: query
        name: categoryId
        type: integer
      - description: filter by omitting internal files
        in: query
        name: skipInternalFiles
        type: boolean
      - description: filter by omitting external files
        in: query
        name: skipExternalFiles
        type: boolean
      - description: include deleted files.
        in: query
        name: showDeleted
        type: boolean
      - description: |-
          filter by display name, file extension, file category, original file name and
          the name of the latest uploader.
        in: query
        name: searchAllFields
        type: boolean
      - description: filter by matching all tag ids
        in: query
        name: matchAllTags
        type: boolean
      - description: filter by files that are locked
        in: query
        name: lockedOnly
        type: boolean
      - description: include the file versions of the file
        in: query
        name: getVersions
        type: boolean
      - description: include the reactions of each file version
        in: query
        name: getVersionReactions
        type: boolean
      - description: get related tasks, messages, comments for a file. default true when filtering by id.
        in: query
        name: getRelatedItems
        type: boolean
      - description: include reactions of the file
        in: query
        name: getReactions
        type: boolean
      - description: include the number of likes
        in: query
        name: getLikes
        type: boolean
      - description: include the number of comments and comments read. default true when filtering by id
        in: query
        name: getComments
        type: boolean
      - description: document editor files
        in: query
        name: fromDocumentEditor
        type: boolean
      - description: filter by version ids, returns the latest files
        in: query
        items:
          type: integer
        name: versionIds
        type: array
      - description: filter by user ids
        in: query
        items:
          type: integer
        name: userIds
        type: array
      - description: filter by files tag ids.
        in: query
        items:
          type: integer
        name: tagIds
        type: array
      - description: include
        enum:
        - projects
        - users
        - tags
        - fileCategories
        - messages
        - comments
        - tasks
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
        in: query
        items:
          type: string
        name: fields[users]
        type: array
      - enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
        in: query
        items:
          type: string
        name: fields[tasks]
        type: array
      - enum:
        - id
        - name
        - color
        - count
        in: query
        items:
          type: string
        name: fields[tags]
        type: array
      - enum:
        - id
        - name
        in: query
        items:
          type: string
        name: fields[projects]
        type: array
      - enum:
        - id
        - postId
        - title
        in: query
        items:
          type: string
        name: fields[messages]
        type: array
      - enum:
        - id
        - name
        - color
        - parentId
        - projectId
        in: query
        items:
          type: string
        name: fields[fileCategories]
        type: array
      - enum:
        - id
        - objectType
        - objectId
        - title
        in: query
        items:
          type: string
        name: fields[comments]
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/file.ProjectFilesResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get a list of files.
      tags:
      - Files
      x-private: true
  /projects/api/v3/files/{fileId}.json:
    get:
      description: Get a single file by project file id.
      operationId: GET_projects_api_v3_files_{fileId}.json
      parameters:
      - description: filter by uploaded start date
        format: date
        in: query
        name: uploadedStartDate
        type: string
      - description: filter by uploaded end date
        format: date
        in: query
        name: uploadedEndDate
        type: string
      - description: filter by updated after date (deprecated, use updatedAfter)
        format: date-time
        in: query
        name: updatedAfterDate
        type: string
      - description: filter by updated after date
        format: date-time
        in: query
        name: updatedAfter
        type: string
      - description: filter by 'all', 'active', 'inactive'
        in: query
        name: status
        type: string
      - description: filter by file name
        in: query
        name: searchTerm
        type: string
      - default: normal
        description: filter by project type. Leave empty to retrieve all types eg. &projectType=
        enum:
        - normal
        - tasklists-template
        - projects-template
        in: query
        name: projectType
        type: string
      - default: asc
        description: order mode
        enum:
        - asc
        - desc
        in: query
        name: orderMode
        type: string
      - default: name
        description: order by
        enum:
        - name
        - projectname
        - dateuploaded
        - size
        in: query
        name: orderBy
        type: string
      - description: filter by version id, returns the latest file
        in: query
        name: versionId
        type: integer
      - description: select the version of the file to include when filtering by id.
        in: query
        name: version
        type: integer
      - description: filter by task ids.
        in: query
        name: taskId
        type: integer
      - description: filter by project id
        in: query
        name: projectId
        type: integer
      - default: "50"
        description: number of items in a page
        in: query
        name: pageSize
        type: integer
      - default: "1"
        description: page number
        in: query
        name: page
        type: integer
      - description: filter by project file id
        in: query
        name: id
        type: integer
      - in: path
        name: fileId
        required: true
        type: integer
      - description: filter by category id
        in: query
        name: categoryId
        type: integer
      - description: filter by omitting internal files
        in: query
        name: skipInternalFiles
        type: boolean
      - description: filter by omitting external files
        in: query
        name: skipExternalFiles
        type: boolean
      - description: include deleted files.
        in: query
        name: showDeleted
        type: boolean
      - description: |-
          filter by display name, file extension, file category, original file name and
          the name of the latest uploader.
        in: query
        name: searchAllFields
        type: boolean
      - description: filter by matching all tag ids
        in: query
        name: matchAllTags
        type: boolean
      - description: filter by files that are locked
        in: query
        name: lockedOnly
        type: boolean
      - description: include the file versions of the file
        in: query
        name: getVersions
        type: boolean
      - description: include the reactions of each file version
        in: query
        name: getVersionReactions
        type: boolean
      - description: get related tasks, messages, comments for a file. default true when filtering by id.
        in: query
        name: getRelatedItems
        type: boolean
      - description: include reactions of the file
        in: query
        name: getReactions
        type: boolean
      - description: include the number of likes
        in: query
        name: getLikes
        type: boolean
      - description: include the number of comments and comments read. default true when filtering by id
        in: query
        name: getComments
        type: boolean
      - description: document editor files
        in: query
        name: fromDocumentEditor
        type: boolean
      - description: filter by version ids, returns the latest files
        in: query
        items:
          type: integer
        name: versionIds
        type: array
      - description: filter by user ids
        in: query
        items:
          type: integer
        name: userIds
        type: array
      - description: filter by files tag ids.
        in: query
        items:
          type: integer
        name: tagIds
        type: array
      - description: include
        enum:
        - projects
        - users
        - tags
        - fileCategories
        - messages
        - comments
        - tasks
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
        in: query
        items:
          type: string
        name: fields[users]
        type: array
      - enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
        in: query
        items:
          type: string
        name: fields[tasks]
        type: array
      - enum:
        - id
        - name
        - color
        - count
        in: query
        items:
          type: string
        name: fields[tags]
        type: array
      - enum:
        - id
        - name
        in: query
        items:
          type: string
        name: fields[projects]
        type: array
      - enum:
        - id
        - postId
        - title
        in: query
        items:
          type: string
        name: fields[messages]
        type: array
      - enum:
        - id
        - name
        - color
        - parentId
        - projectId
        in: query
        items:
          type: string
        name: fields[fileCategories]
        type: array
      - enum:
        - id
        - objectType
        - objectId
        - title
        in: query
        items:
          type: string
        name: fields[comments]
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/file.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get a specific file.
      tags:
      - Files
      x-private: true
    patch:
      consumes:
      - application/json
      description: Updates an existing file.
      operationId: PATCH_projects_api_v3_files_{fileId}.json
      parameters:
      - in: path
        name: fileId
        required: true
        type: integer
      - in: body
        name: file.Request
        required: true
        schema:
          $ref: '#/definitions/file.Request'
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/file.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
        "409":
          description: 409 Conflict
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update an existing file
      tags:
      - Files
      x-private: true
    delete:
      description: Delete an existing file including all the file versions.
      operationId: DELETE_projects_api_v3_files_{fileId}.json
      parameters:
      - in: path
        name: fileId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: 204 No Content (no data)
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Delete an existing file and it's versions.
      tags:
      - Files
      x-private: true
  /projects/api/v3/files/{fileId}/comments.json:
    get:
      operationId: GET_projects_api_v3_files_{fileId}_comments.json
      tags:
      - FileComments
      summary: Get a list of comments for a file
      produces:
      - application/json
      parameters:
      - name: fileId
        in: path
        type: integer
        required: true
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/comment.CommentsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/files/{projectFileId}.json:
    post:
      consumes:
      - application/json
      description: Creates a new fileversion for the project file id specified.
      operationId: POST_projects_api_v3_files_{projectFileId}.json
      parameters:
      - in: path
        name: projectFileId
        required: true
        type: integer
      - in: body
        name: fileversion.Request
        required: true
        schema:
          $ref: '#/definitions/fileversion.Request'
      produces:
      - application/json
      responses:
        "201":
          description: 201 Created
          schema:
            $ref: '#/definitions/fileversion.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Create a new fileversion for the project file id.
      tags:
      - Files
      x-private: true
  /projects/api/v3/files/archive.json:
    post:
      consumes:
      - application/json
      description: Returns an URL to download multiple files at once.
      operationId: POST_projects_api_v3_files_archive.json
      parameters:
      - in: body
        name: file.ArchiveRequest
        required: true
        schema:
          $ref: '#/definitions/file.ArchiveRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/file.ArchiveResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Returns an URL for multiple files
      tags:
      - Files
      x-private: true
  /projects/api/v3/files/available.json:
    get:
      description: Retrieves the available space after calculating all stored file sizes.
      operationId: GET_projects_api_v3_files_available.json
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/file.AvailableResponse'
      summary: Retrieves available space on account
      tags:
      - Files
      x-private: true
  /projects/api/v3/files/changes.json:
    get:
      description: Retrieves all recently changed files sorted by lastUpdateDateTime Descending
      operationId: GET_projects_api_v3_files_changes.json
      parameters:
      - description: filter by risks updated after specified date (deprecated, use updatedAfter)
        format: date-time
        in: query
        name: updatedAfterDateTime
        type: string
      - description: filter by risks updated after specified date
        format: date-time
        in: query
        name: updatedAfter
        type: string
      - default: "1000"
        description: max number of items to retrieve
        in: query
        name: pageSize
        type: integer
      - default: "false"
        description: return parent ID
        in: query
        name: includeParentId
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/change.ChangesResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get all recently changed files.
      tags:
      - Files
      x-private: true
  /projects/api/v3/files/usage.json:
    get:
      description: Retrieves all file space used on account.
      operationId: GET_projects_api_v3_files_usage.json
      parameters:
      - description: filter by a specific project
        in: query
        name: projectId
        type: integer
      - description: include
        enum:
        - projects
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - name
        in: query
        items:
          type: string
        name: fields[projects]
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/file.UsageResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Retrieve file usage on account
      tags:
      - Files
      x-private: true
  /projects/api/v3/fileversion/{id}.json:
    get:
      description: Retrieve a fileversion by id.
      operationId: GET_projects_api_v3_fileversion_{id}.json
      parameters:
      - description: filter by project file id
        in: query
        name: id
        type: integer
      - in: path
        name: id
        required: true
        type: integer
      - description: include reactions of the file version
        in: query
        name: getReactions
        type: boolean
      - description: include
        enum:
        - projects
        - users
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
        in: query
        items:
          type: string
        name: fields[users]
        type: array
      - enum:
        - id
        - name
        in: query
        items:
          type: string
        name: fields[projects]
        type: array
      - enum:
        - isPrivate
        - latestFileVersionNo
        - versionId
        - status
        - description
        - lockdownId
        - tagIds
        - changeFollowers
        - commentFollowers
        - originalName
        - displayName
        - isLocked
        - lockedByUserId
        - lockedDate
        - size
        - uploadedDate
        - uploadedByUserID
        - updatedAt
        - deletedAt
        - deletedBy
        - fileSource
        - projectId
        - numLikes
        - reactions
        - versions
        - downloadURL
        - previewURL
        - thumbURL
        - relatedItems
        - commentsCount
        - commentsCountRead
        - categoryId
        in: query
        items:
          type: string
        name: fields[files]
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/fileversion.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get a specific fileversion.
      tags:
      - Files
      x-private: true
  /projects/api/v3/form/{formId}/assignees.json:
    put:
      consumes:
      - application/json
      description: |-
        Replace the current assignees. An empty list deletes.

        If some of the assignees are found to error, the correct
        ones will be created, and the incorrect assignees will be
        reported back in the response, under `.errors.[]`

        If every assignee is found to not exist, the response will be
        a 404.

        If every assignee is found to be invalid, or a mix of invalid
        and doesn't exist, the response will be a 400.
      operationId: PUT_projects_api_v3_form_{formId}_assignees.json
      parameters:
      - in: path
        name: formId
        required: true
        type: integer
      - in: body
        name: assignee.Request
        required: true
        schema:
          $ref: '#/definitions/assignee.Request'
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/assignee.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Update the existing assignees.
      tags:
      - FormsAssignees
      x-private: true
  /projects/api/v3/forms.json:
    get:
      description: Return a list of all forms.
      operationId: GET_projects_api_v3_forms.json
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/form.FormsResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get all forms.
      tags:
      - Forms
      x-private: true
    post:
      consumes:
      - application/json
      operationId: POST_projects_api_v3_forms.json
      parameters:
      - in: body
        name: form.Request
        required: true
        schema:
          $ref: '#/definitions/form.Request'
      produces:
      - application/json
      responses:
        "201":
          description: 201 Created
          schema:
            $ref: '#/definitions/form.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "409":
          description: 409 Conflict
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Create a new form.
      tags:
      - Forms
      x-private: true
  /projects/api/v3/forms/{formId}.json:
    get:
      operationId: GET_projects_api_v3_forms_{formId}.json
      parameters:
      - in: path
        name: formId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/form.Response'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/form.Response'
        "404":
          description: 404 Not Found (no data)
      summary: Get a specific form.
      tags:
      - Forms
      x-private: true
    patch:
      consumes:
      - application/json
      operationId: PATCH_projects_api_v3_forms_{formId}.json
      parameters:
      - in: path
        name: formId
        required: true
        type: integer
      - in: body
        name: form.Request
        required: true
        schema:
          $ref: '#/definitions/form.Request'
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/form.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
        "409":
          description: 409 Conflict
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update an existing form.
      tags:
      - Forms
      x-private: true
    delete:
      operationId: DELETE_projects_api_v3_forms_{formId}.json
      parameters:
      - in: path
        name: formId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: 204 No Content (no data)
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Delete an existing form.
      tags:
      - Forms
      x-private: true
  /projects/api/v3/forms/{formId}/assignees.json:
    get:
      description: Get all assignees for a given form.
      operationId: GET_projects_api_v3_forms_{formId}_assignees.json
      parameters:
      - default: asc
        description: order mode
        enum:
        - asc
        - desc
        in: query
        name: orderMode
        type: string
      - description: filter by user id
        in: query
        name: userId
        type: integer
      - default: "50"
        description: number of items in a page
        in: query
        name: pageSize
        type: integer
      - default: "1"
        description: page number
        in: query
        name: page
        type: integer
      - in: path
        name: formId
        required: true
        type: integer
      - description: include
        enum:
        - companies
        - teams
        - users
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
        in: query
        items:
          type: string
        name: fields[users]
        type: array
      - enum:
        - id
        - name
        - teamLogo
        - teamLogoIcon
        - teamLogoColor
        in: query
        items:
          type: string
        name: fields[teams]
        type: array
      - enum:
        - id
        - type
        in: query
        items:
          type: string
        name: fields[formAssignees]
        type: array
      - enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
        in: query
        items:
          type: string
        name: fields[companies]
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/assignee.FormAssigneesResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get all assignees for a given form.
      tags:
      - FormsAssignees
      x-private: true
  /projects/api/v3/forms/{formId}/draft.json:
    get:
      operationId: GET_projects_api_v3_forms_{formId}_draft.json
      parameters:
      - in: path
        name: formId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/form.Response'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/form.Response'
        "404":
          description: 404 Not Found (no data)
      summary: Get the draft version of a specific form.
      tags:
      - Forms
      x-private: true
  /projects/api/v3/forms/{formId}/token.json:
    patch:
      consumes:
      - application/json
      description: Update a form token
      operationId: PATCH_projects_api_v3_forms_{formId}_token.json
      parameters:
      - in: body
        name: token.Request
        required: true
        schema:
          $ref: '#/definitions/token.Request'
      - in: path
        name: formId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/token.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Update an existing token.
      tags:
      - FormsToken
      x-private: true
  /projects/api/v3/forms/{formId}/token/refresh.json:
    put:
      consumes:
      - application/json
      description: |-
        Used for invalidating current form URLs and generating
        a new one.
      operationId: PUT_projects_api_v3_forms_{formId}_token_refresh.json
      parameters:
      - in: body
        name: token.Request
        required: true
        schema:
          $ref: '#/definitions/token.Request'
      - in: path
        name: formId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/token.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Refresh the value of a token
      tags:
      - FormsToken
      x-private: true
  /projects/api/v3/forms/public/{token}.json:
    get:
      description: This endpoint does not require authentication.
      operationId: GET_projects_api_v3_forms_public_{token}.json
      parameters:
      - default: asc
        description: order mode
        enum:
        - asc
        - desc
        in: query
        name: orderMode
        type: string
      - description: query by hostObject type
        enum:
        - projects
        in: query
        name: hostObject.type
        type: string
      - description: query by form state
        enum:
        - active
        - deleted
        - draft
        - latest
        in: query
        name: content.state
        type: string
      - description: filter by user id
        in: query
        name: userId
        type: integer
      - in: path
        name: token
        required: true
        type: integer
      - default: "50"
        description: number of items in a page
        in: query
        name: pageSize
        type: integer
      - default: "1"
        description: page number
        in: query
        name: page
        type: integer
      - description: filter by host id
        in: query
        name: hostObject.id
        type: integer
      - description: filter by project ids
        in: query
        items:
          type: integer
        name: projectIds
        type: array
      - description: include
        enum:
        - projects
        - users
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
        in: query
        items:
          type: string
        name: fields[users]
        type: array
      - enum:
        - id
        - name
        in: query
        items:
          type: string
        name: fields[projects]
        type: array
      - enum:
        - id
        - confirmationMessage
        - promptAdditionalSubmissions
        - isShared
        - state
        - taskTitleFieldId
        - token
        - content
        - hostObject
        - installation
        in: query
        items:
          type: string
        name: fields[forms]
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/form.PublicResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get a forms via its token.
      tags:
      - FormsPublic
      x-private: true
  /projects/api/v3/forms/public/{token}/submit.json:
    post:
      consumes:
      - application/json
      description: This endpoint does not require authentication.
      operationId: POST_projects_api_v3_forms_public_{token}_submit.json
      parameters:
      - in: path
        name: token
        required: true
        type: integer
      - in: body
        name: form.SubmissionRequest
        required: true
        schema:
          $ref: '#/definitions/form.SubmissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/form.FormsResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Submit a form response
      tags:
      - FormsPublic
      x-private: true
  /projects/api/v3/importer/stats.json:
    get:
      operationId: GET_projects_api_v3_importer_stats.json
      tags:
      - Importers
      summary: Get stats about Importers
      description: |-
        This endpoint returns info about a set of importers. This includes whether
        they are individually running or not, what's their status and a flag to
        represent if any importer is running. The endpoint looks up redis for this
        information. Using the parameter resetImporters this information can be
        deleted in redis to reset it.
      produces:
      - application/json
      parameters:
      - name: resetImporters
        in: query
        description: reset importers
        type: boolean
        default: "false"
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/importer.ImportersResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/latestactivity.json:
    get:
      operationId: GET_projects_api_v3_latestactivity.json
      tags:
      - Activity
      summary: Latest activity (all projects)
      description: |-
        Lists the latest activity across all projects ordered chronologically. When
        you log into Teamwork you will see all the recent activity. This corresponds
        to that view in Teamwork. There are parameters you can send in to filter your
        results.
      produces:
      - application/json
      parameters:
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: startDate
        in: query
        description: filter by start datetime
        type: string
        format: date-time
      - name: sort
        in: query
        description: sort by
        type: string
      - name: projectStatuses
        in: query
        description: list of project status
        type: string
        items: {}
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
      - name: endDate
        in: query
        description: filter by end datetime
        type: string
        format: date-time
      - name: activityTypes
        in: query
        description: filter by activity types
        type: string
        items: {}
        enum:
        - task
        - tasklist
        - project
        - message
        - notebook
        - milestone
        - like
        - file
        - link
        - billinginvoice
        - task_comment
        - milestone_comment
        - file_comment
        - link_comment
        - comment
      - name: projectId
        in: query
        description: filter by project id
        type: integer
      - name: projectHealths
        in: query
        description: list of project health
        type: integer
        items: {}
      - name: pageSize
        in: query
        description: |-
          number of items in a page
          default: 50
        type: integer
      - name: page
        in: query
        description: |-
          page number
          default: 1
        type: integer
      - name: maxId
        in: query
        description: activity id offset
        type: integer
      - name: catchupFromId
        in: query
        description: limit results from previous id
        type: integer
      - name: showDeleted
        in: query
        description: |-
          include deleted items
          default: false
        type: boolean
      - name: onlyStarredProjects
        in: query
        description: |-
          filter by starred projects only
          default: false
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: enforce all tag ids must be matched
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
      - name: groupCommentActivityType
        in: query
        description: group all activities on comments
        type: boolean
      - name: userIds
        in: query
        description: filter by user ids
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - users
        - companies
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      - name: fields[activities]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - dateTime
        - activityType
        - latestActivityType
        - itemId
        - itemLink
        - itemType
        - itemDescription
        - itemExtraDescription
        - itemExtraLink
        - itemPublicInfo
        - forUserId
        - forUserName
        - dueDate
        - isPrivate
        - lockdownId
        - projectId
        - companyId
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/activity.ActivitiesResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/lockdowns/{lockdownId}.json:
    get:
      description: Retrieve a lockdown information.
      operationId: GET_projects_api_v3_lockdowns_{lockdownId}.json
      parameters:
      - in: path
        name: lockdownId
        required: true
        type: integer
      - description: filter by lockdown ID
        in: query
        name: id
        type: integer
      - description: include items
        in: query
        name: includeItems
        type: boolean
      - description: include
        enum:
        - users
        - companies
        - companies.users
        - teams
        - teams.users
        - tasklists
        - tasks
        - files
        - notebooks
        - milestones
        - links
        - messages
        - comments
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
        in: query
        items:
          type: string
        name: fields[users]
        type: array
      - enum:
        - id
        - name
        - teamLogo
        - teamLogoIcon
        - teamLogoColor
        in: query
        items:
          type: string
        name: fields[teams]
        type: array
      - enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
        in: query
        items:
          type: string
        name: fields[tasks]
        type: array
      - enum:
        - id
        - name
        - projectId
        - milestoneId
        in: query
        items:
          type: string
        name: fields[tasklists]
        type: array
      - enum:
        - id
        - name
        - description
        - contents
        - type
        - isPrivate
        - locked
        - lockdownId
        - secureContent
        - projectId
        - createdByUserID
        - updatedByUserID
        - deletedByUserID
        - dateUpdated
        - dateCreated
        - dateDeleted
        - deleted
        - categoryId
        - notebookVersionID
        - notebookVersionCreatedDateTime
        - notebookVersionUpdatedDateTime
        - latestVersionNo
        - commentsCount
        - readCommentsCount
        - contentHTML
        - privacy
        - commentFollowers
        - changeFollowers
        - projectNotifyCommentIncludeCreator
        - tagIds
        in: query
        items:
          type: string
        name: fields[notebooks]
        type: array
      - enum:
        - id
        - name
        - description
        - deadline
        - completed
        - projectId
        - createdOn
        - lastChangedOn
        - creatorUserId
        - reminder
        - private
        - lockdownId
        - status
        - completedOn
        - completerId
        - percentageComplete
        in: query
        items:
          type: string
        name: fields[milestones]
        type: array
      - enum:
        - id
        - postId
        - title
        in: query
        items:
          type: string
        name: fields[messages]
        type: array
      - enum:
        - id
        - userID
        - updatedAt
        - itemType
        - itemID
        - grantAccessTo
        in: query
        items:
          type: string
        name: fields[lockdowns]
        type: array
      - enum:
        - id
        - title
        - description
        - code
        - width
        - height
        - isPrivate
        - provider
        - projectId
        - createdAt
        - forceNewWindow
        - deleted
        - deletedAt
        - updatedAt
        - categoryId
        - createdBy
        - deletedBy
        - updatedBy
        in: query
        items:
          type: string
        name: fields[links]
        type: array
      - enum:
        - isPrivate
        - latestFileVersionNo
        - versionId
        - status
        - description
        - lockdownId
        - tagIds
        - changeFollowers
        - commentFollowers
        - originalName
        - displayName
        - isLocked
        - lockedByUserId
        - lockedDate
        - size
        - uploadedDate
        - uploadedByUserID
        - updatedAt
        - deletedAt
        - deletedBy
        - fileSource
        - projectId
        - numLikes
        - reactions
        - versions
        - downloadURL
        - previewURL
        - thumbURL
        - relatedItems
        - commentsCount
        - commentsCountRead
        - categoryId
        in: query
        items:
          type: string
        name: fields[files]
        type: array
      - enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
        in: query
        items:
          type: string
        name: fields[companies]
        type: array
      - enum:
        - id
        - objectType
        - objectId
        - title
        in: query
        items:
          type: string
        name: fields[comments]
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/lockdown.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get a specific lockdown.
      tags:
      - Lockdowns
      x-private: true
  /projects/api/v3/me/timers.json:
    get:
      operationId: GET_projects_api_v3_me_timers.json
      tags:
      - TimeTracking
      summary: Get all your running timers
      description: Will get all your running timers or the person you are logged in as.
      produces:
      - application/json
      parameters:
      - name: updatedAfterDate
        in: query
        description: filter by updated after date (deprecated, use updatedAfter)
        type: string
        format: date-time
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: userId
        in: query
        description: filter by user id
        type: integer
      - name: taskId
        in: query
        description: filter by task id
        type: integer
      - name: projectId
        in: query
        description: filter by project id
        type: integer
      - name: pageSize
        in: query
        description: |-
          number of items in a page
          default: 50
        type: integer
      - name: page
        in: query
        description: |-
          page number
          default: 1
        type: integer
      - name: showDeleted
        in: query
        description: |-
          include deleted items
          default: false
        type: boolean
      - name: runningTimersOnly
        in: query
        description: |-
          enforce running timers only
          default: false
        type: boolean
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - tasks
        - tasks.parentTasks
        - tasks.tasklists
        - users
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[timers]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - userId
        - taskId
        - projectId
        - description
        - running
        - billable
        - deleted
        - dateCreated
        - dateDeleted
        - duration
        - lastStartedAt
        - serverTime
        - intervals
      - name: fields[tasks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
      - name: fields[tasklists]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - projectId
        - milestoneId
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/timer.TimersResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
    post:
      operationId: POST_projects_api_v3_me_timers.json
      tags:
      - TimeTracking
      summary: Create a new timer
      description: |-
        Creates a new timer. If there's already a timer running, it will stop this timer
        at default.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: timer.Request
        in: body
        required: true
        schema:
          $ref: '#/definitions/timer.Request'
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/timer.Response'
        201:
          description: 201 Created
          schema:
            $ref: '#/definitions/timer.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/me/timers/{timerId}.json:
    put:
      operationId: PUT_projects_api_v3_me_timers_{timerId}.json
      tags:
      - TimeTracking
      summary: Edits a timer
      description: Edits the fields of a timer.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: timer.Request
        in: body
        required: true
        schema:
          $ref: '#/definitions/timer.Request'
      - name: timerId
        in: path
        type: integer
        required: true
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/timer.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
    delete:
      operationId: DELETE_projects_api_v3_me_timers_{timerId}.json
      tags:
      - TimeTracking
      summary: Delete a timer by ID
      description: Delete an existing timer.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: timer.DeleteRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/timer.DeleteRequest'
      - name: timerId
        in: path
        type: integer
        required: true
      responses:
        204:
          description: 204 No Content (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/me/timers/{timerId}/complete.json:
    put:
      operationId: PUT_projects_api_v3_me_timers_{timerId}_complete.json
      tags:
      - TimeTracking
      summary: Complete a timer by ID
      description: |-
        Complete an existing timer. If the timer is currently running, it is paused to create
        the timelog entry. When the timelog is created, the timer is deleted.
      produces:
      - application/json
      parameters:
      - name: timerId
        in: path
        type: integer
        required: true
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/timer.Response'
        201:
          description: 201 Created
          schema:
            $ref: '#/definitions/timer.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/me/timers/{timerId}/pause.json:
    put:
      operationId: PUT_projects_api_v3_me_timers_{timerId}_pause.json
      tags:
      - TimeTracking
      summary: Pause a timer by ID
      description: Pause an existing timer.
      produces:
      - application/json
      parameters:
      - name: timerId
        in: path
        type: integer
        required: true
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/timer.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/me/timers/{timerId}/resume.json:
    put:
      operationId: PUT_projects_api_v3_me_timers_{timerId}_resume.json
      tags:
      - TimeTracking
      summary: Resume a timer by ID
      description: Resume an existing timer. If other timers are currently running, those timers are paused before resuming.
      produces:
      - application/json
      parameters:
      - name: timerId
        in: path
        type: integer
        required: true
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/timer.Response'
        201:
          description: 201 Created
          schema:
            $ref: '#/definitions/timer.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/me/timers/{timerId}/undelete.json:
    put:
      operationId: PUT_projects_api_v3_me_timers_{timerId}_undelete.json
      tags:
      - TimeTracking
      summary: Undelete a timer by ID
      description: Undelete an existing timer.
      produces:
      - application/json
      parameters:
      - name: timerId
        in: path
        type: integer
        required: true
      responses:
        204:
          description: 204 No Content (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/messages/{messageId}.json:
    patch:
      consumes:
      - application/json
      description: |-
        Update specific fields on a message. If the property `read` is sent with the
        value `true` all posts from this message will be marked as read.
      operationId: PATCH_projects_api_v3_messages_{messageId}.json
      parameters:
      - in: body
        name: message.Request
        required: true
        schema:
          $ref: '#/definitions/message.Request'
      - in: path
        name: messageId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: 204 No Content (no data)
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Edit a message.
      tags:
      - Messages
      x-private: true
  /projects/api/v3/milestones.csv:
    get:
      operationId: GET_projects_api_v3_milestones.csv
      tags:
      - Milestones
      summary: Generate milestone report in CSV format
      description: |-
        Generates a milestone report in CSV format containing all milestones for the
        provided filters. Only the milestones that the logged-in user can access will
        be returned.
      produces:
      - application/json
      - text/csv
      parameters:
      - name: updatedAfterDate
        in: query
        description: filter by updated after date (deprecated, use updatedAfter)
        type: string
        format: date-time
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: status
        in: query
        description: filter by list of milestone status
        type: string
        items: {}
        enum:
        - all
        - new
        - reopened
        - completed
        - deleted
        - pending
        - incomplete
        - late
        - today
        - upcoming
      - name: searchTerm
        in: query
        description: filter by milestone name and description
        type: string
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: projectStatuses
        in: query
        description: filter by list of project status
        type: string
        items: {}
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - date
        - dateonly
        - name
        - project
        - user
        - dateCreated
        - dateUpdated
        default: date
      - name: dueBeforeDate
        in: query
        description: filter by due before date (deprecated, use dueBefore)
        type: string
        format: date
      - name: dueBefore
        in: query
        description: filter by due before date
        type: string
        format: date
      - name: dueAfterDate
        in: query
        description: filter by due after date (deprecated, use dueAfter)
        type: string
        format: date
      - name: dueAfter
        in: query
        description: filter by due after date
        type: string
        format: date
      - name: projectHealths
        in: query
        description: filter by list of project health
        type: integer
        items: {}
      - name: projectHealth
        in: query
        description: filter by list of project health (deprecated, use projectHealths)
        type: integer
        items: {}
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: showPrivate
        in: query
        description: show private milestones
        type: boolean
        default: "true"
      - name: showPercentageCompleted
        in: query
        description: show percentages completed
        type: boolean
      - name: showDeleted
        in: query
        description: include deleted items
        type: boolean
        default: "false"
      - name: showAttachedTasklists
        in: query
        description: show attached tasklists
        type: boolean
      - name: searchCompaniesTeams
        in: query
        description: include companies and teams in the search term
        type: boolean
      - name: searchAssignees
        in: query
        description: include assignees in the search
        type: boolean
      - name: progress
        in: query
        description: include progress of each milestone
        type: boolean
        default: "false"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyMyProjects
        in: query
        description: filter by projects that the logged-in user is related
        type: boolean
        default: "false"
      - name: onlyAdminProjects
        in: query
        description: |-
          only include milestones from projects where the user is strictly a project admin.
          site admins have visibility to all projects.
        type: boolean
      - name: matchAllTags
        in: query
        description: match all milestone tags
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeUpdate
        in: query
        description: include milestones latest update action
        type: boolean
      - name: includeToday
        in: query
        description: include today when milestone status is upcoming
        type: boolean
        default: "true"
      - name: includeTeamUserIds
        in: query
        description: include team users to the responsible party ids
        type: boolean
        default: "true"
      - name: includeTags
        in: query
        description: include tags in the reports
        type: boolean
        default: "true"
      - name: includeProgress
        in: query
        description: include percentage of tasks completed for all linked tasklists
        type: boolean
      - name: includeCompleted
        in: query
        description: optional to include completed milestones
        type: boolean
      - name: includeCompanyUserIds
        in: query
        description: include company users to the responsible party ids
        type: boolean
        default: "true"
      - name: includeAssigneeTeams
        in: query
        description: include teams related to the responsible user ids
        type: boolean
      - name: includeAssigneeCompanies
        in: query
        description: include companies related to the responsible user ids
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: emoji
        in: query
        description: convert emoji alias to unicode
        type: boolean
        default: "true"
      - name: countUnreadComments
        in: query
        description: count unread comments
        type: boolean
        default: "false"
      - name: calendar
        in: query
        description: enables the calendar style layout
        type: boolean
        default: "false"
      - name: tagIds
        in: query
        description: filter by milestone tag ids
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - projects.companies
        - users
        - completedBy
        - createdBy
        - deletedBy
        - updatedBy
        - commentFollowers
        - changeFollowers
        - tags
        - tasklists
        - tasklists.tasks
      - name: ids
        in: query
        description: filter by ids
        type: array
        items:
          type: integer
      - name: followerIds
        in: query
        description: filter by followers' ids
        type: array
        items:
          type: integer
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[tasks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
      - name: fields[tasklists]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - projectId
        - milestoneId
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[milestones]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - description
        - deadline
        - completed
        - projectId
        - createdOn
        - lastChangedOn
        - creatorUserId
        - reminder
        - private
        - lockdownId
        - status
        - completedOn
        - completerId
        - percentageComplete
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      - name: creatorIds
        in: query
        description: filter by creators' ids
        type: array
        items:
          type: integer
      - name: assignedToUserIds
        in: query
        description: filter by assigned user ids
        type: array
        items:
          type: integer
      - name: assignedToTeamIds
        in: query
        description: filter by assigned team ids
        type: array
        items:
          type: integer
      - name: assignedToCompanyIds
        in: query
        description: filter by assigned company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/milestones.html:
    get:
      operationId: GET_projects_api_v3_milestones.html
      tags:
      - Milestones
      summary: Generate milestone report in HTML format
      description: |-
        Generates a milestone report in HTML format containing all milestones for the
        provided filters. Only the milestones that the logged-in user can access will
        be returned.
      produces:
      - application/json
      - text/html
      parameters:
      - name: updatedAfterDate
        in: query
        description: filter by updated after date (deprecated, use updatedAfter)
        type: string
        format: date-time
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: status
        in: query
        description: filter by list of milestone status
        type: string
        items: {}
        enum:
        - all
        - new
        - reopened
        - completed
        - deleted
        - pending
        - incomplete
        - late
        - today
        - upcoming
      - name: searchTerm
        in: query
        description: filter by milestone name and description
        type: string
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: projectStatuses
        in: query
        description: filter by list of project status
        type: string
        items: {}
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - date
        - dateonly
        - name
        - project
        - user
        - dateCreated
        - dateUpdated
        default: date
      - name: dueBeforeDate
        in: query
        description: filter by due before date (deprecated, use dueBefore)
        type: string
        format: date
      - name: dueBefore
        in: query
        description: filter by due before date
        type: string
        format: date
      - name: dueAfterDate
        in: query
        description: filter by due after date (deprecated, use dueAfter)
        type: string
        format: date
      - name: dueAfter
        in: query
        description: filter by due after date
        type: string
        format: date
      - name: projectHealths
        in: query
        description: filter by list of project health
        type: integer
        items: {}
      - name: projectHealth
        in: query
        description: filter by list of project health (deprecated, use projectHealths)
        type: integer
        items: {}
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: showPrivate
        in: query
        description: show private milestones
        type: boolean
        default: "true"
      - name: showPercentageCompleted
        in: query
        description: show percentages completed
        type: boolean
      - name: showDeleted
        in: query
        description: include deleted items
        type: boolean
        default: "false"
      - name: showAttachedTasklists
        in: query
        description: show attached tasklists
        type: boolean
      - name: searchCompaniesTeams
        in: query
        description: include companies and teams in the search term
        type: boolean
      - name: searchAssignees
        in: query
        description: include assignees in the search
        type: boolean
      - name: progress
        in: query
        description: include progress of each milestone
        type: boolean
        default: "false"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyMyProjects
        in: query
        description: filter by projects that the logged-in user is related
        type: boolean
        default: "false"
      - name: onlyAdminProjects
        in: query
        description: |-
          only include milestones from projects where the user is strictly a project admin.
          site admins have visibility to all projects.
        type: boolean
      - name: matchAllTags
        in: query
        description: match all milestone tags
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeUpdate
        in: query
        description: include milestones latest update action
        type: boolean
      - name: includeToday
        in: query
        description: include today when milestone status is upcoming
        type: boolean
        default: "true"
      - name: includeTeamUserIds
        in: query
        description: include team users to the responsible party ids
        type: boolean
        default: "true"
      - name: includeTags
        in: query
        description: include tags in the reports
        type: boolean
        default: "true"
      - name: includeProgress
        in: query
        description: include percentage of tasks completed for all linked tasklists
        type: boolean
      - name: includeCompleted
        in: query
        description: optional to include completed milestones
        type: boolean
      - name: includeCompanyUserIds
        in: query
        description: include company users to the responsible party ids
        type: boolean
        default: "true"
      - name: includeAssigneeTeams
        in: query
        description: include teams related to the responsible user ids
        type: boolean
      - name: includeAssigneeCompanies
        in: query
        description: include companies related to the responsible user ids
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: emoji
        in: query
        description: convert emoji alias to unicode
        type: boolean
        default: "true"
      - name: countUnreadComments
        in: query
        description: count unread comments
        type: boolean
        default: "false"
      - name: calendar
        in: query
        description: enables the calendar style layout
        type: boolean
        default: "false"
      - name: tagIds
        in: query
        description: filter by milestone tag ids
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - projects.companies
        - users
        - completedBy
        - createdBy
        - deletedBy
        - updatedBy
        - commentFollowers
        - changeFollowers
        - tags
        - tasklists
        - tasklists.tasks
      - name: ids
        in: query
        description: filter by ids
        type: array
        items:
          type: integer
      - name: followerIds
        in: query
        description: filter by followers' ids
        type: array
        items:
          type: integer
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[tasks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
      - name: fields[tasklists]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - projectId
        - milestoneId
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[milestones]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - description
        - deadline
        - completed
        - projectId
        - createdOn
        - lastChangedOn
        - creatorUserId
        - reminder
        - private
        - lockdownId
        - status
        - completedOn
        - completerId
        - percentageComplete
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      - name: creatorIds
        in: query
        description: filter by creators' ids
        type: array
        items:
          type: integer
      - name: assignedToUserIds
        in: query
        description: filter by assigned user ids
        type: array
        items:
          type: integer
      - name: assignedToTeamIds
        in: query
        description: filter by assigned team ids
        type: array
        items:
          type: integer
      - name: assignedToCompanyIds
        in: query
        description: filter by assigned company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/milestones.json:
    get:
      operationId: GET_projects_api_v3_milestones.json
      tags:
      - Milestones
      summary: Get all milestones
      description: |-
        All milestones are returned on projects that the authenticated user is
        associated with. You can use the provided filters to return only those
        milestones that are incomplete, completed, upcoming or late. All milestones
        are returning in this call. This call uses pagination, returning 100
        milestones per page by default.
      produces:
      - application/json
      parameters:
      - name: updatedAfterDate
        in: query
        description: filter by updated after date (deprecated, use updatedAfter)
        type: string
        format: date-time
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: status
        in: query
        description: filter by list of milestone status
        type: string
        items: {}
        enum:
        - all
        - new
        - reopened
        - completed
        - deleted
        - pending
        - incomplete
        - late
        - today
        - upcoming
      - name: searchTerm
        in: query
        description: filter by milestone name and description
        type: string
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: projectStatuses
        in: query
        description: filter by list of project status
        type: string
        items: {}
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - date
        - dateonly
        - name
        - project
        - user
        - dateCreated
        - dateUpdated
        default: date
      - name: dueBeforeDate
        in: query
        description: filter by due before date (deprecated, use dueBefore)
        type: string
        format: date
      - name: dueBefore
        in: query
        description: filter by due before date
        type: string
        format: date
      - name: dueAfterDate
        in: query
        description: filter by due after date (deprecated, use dueAfter)
        type: string
        format: date
      - name: dueAfter
        in: query
        description: filter by due after date
        type: string
        format: date
      - name: projectHealths
        in: query
        description: filter by list of project health
        type: integer
        items: {}
      - name: projectHealth
        in: query
        description: filter by list of project health (deprecated, use projectHealths)
        type: integer
        items: {}
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: showPrivate
        in: query
        description: show private milestones
        type: boolean
        default: "true"
      - name: showPercentageCompleted
        in: query
        description: show percentages completed
        type: boolean
      - name: showDeleted
        in: query
        description: include deleted items
        type: boolean
        default: "false"
      - name: showAttachedTasklists
        in: query
        description: show attached tasklists
        type: boolean
      - name: searchCompaniesTeams
        in: query
        description: include companies and teams in the search term
        type: boolean
      - name: searchAssignees
        in: query
        description: include assignees in the search
        type: boolean
      - name: progress
        in: query
        description: include progress of each milestone
        type: boolean
        default: "false"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyMyProjects
        in: query
        description: filter by projects that the logged-in user is related
        type: boolean
        default: "false"
      - name: onlyAdminProjects
        in: query
        description: |-
          only include milestones from projects where the user is strictly a project admin.
          site admins have visibility to all projects.
        type: boolean
      - name: matchAllTags
        in: query
        description: match all milestone tags
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeUpdate
        in: query
        description: include milestones latest update action
        type: boolean
      - name: includeToday
        in: query
        description: include today when milestone status is upcoming
        type: boolean
        default: "true"
      - name: includeTeamUserIds
        in: query
        description: include team users to the responsible party ids
        type: boolean
        default: "true"
      - name: includeTags
        in: query
        description: include tags in the reports
        type: boolean
        default: "true"
      - name: includeProgress
        in: query
        description: include percentage of tasks completed for all linked tasklists
        type: boolean
      - name: includeCompleted
        in: query
        description: optional to include completed milestones
        type: boolean
      - name: includeCompanyUserIds
        in: query
        description: include company users to the responsible party ids
        type: boolean
        default: "true"
      - name: includeAssigneeTeams
        in: query
        description: include teams related to the responsible user ids
        type: boolean
      - name: includeAssigneeCompanies
        in: query
        description: include companies related to the responsible user ids
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: emoji
        in: query
        description: convert emoji alias to unicode
        type: boolean
        default: "true"
      - name: countUnreadComments
        in: query
        description: count unread comments
        type: boolean
        default: "false"
      - name: calendar
        in: query
        description: enables the calendar style layout
        type: boolean
        default: "false"
      - name: tagIds
        in: query
        description: filter by milestone tag ids
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - projects.companies
        - users
        - completedBy
        - createdBy
        - deletedBy
        - updatedBy
        - commentFollowers
        - changeFollowers
        - tags
        - tasklists
        - tasklists.tasks
      - name: ids
        in: query
        description: filter by ids
        type: array
        items:
          type: integer
      - name: followerIds
        in: query
        description: filter by followers' ids
        type: array
        items:
          type: integer
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[tasks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
      - name: fields[tasklists]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - projectId
        - milestoneId
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[milestones]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - description
        - deadline
        - completed
        - projectId
        - createdOn
        - lastChangedOn
        - creatorUserId
        - reminder
        - private
        - lockdownId
        - status
        - completedOn
        - completerId
        - percentageComplete
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      - name: creatorIds
        in: query
        description: filter by creators' ids
        type: array
        items:
          type: integer
      - name: assignedToUserIds
        in: query
        description: filter by assigned user ids
        type: array
        items:
          type: integer
      - name: assignedToTeamIds
        in: query
        description: filter by assigned team ids
        type: array
        items:
          type: integer
      - name: assignedToCompanyIds
        in: query
        description: filter by assigned company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/milestone.MilestonesResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/milestones.pdf:
    get:
      operationId: GET_projects_api_v3_milestones.pdf
      tags:
      - Milestones
      summary: Generate milestone report in PDF format
      description: |-
        Generates a milestone report in PDF format containing all milestones for the
        provided filters. Only the milestones that the logged-in user can access will
        be returned.
      produces:
      - application/json
      - application/pdf
      parameters:
      - name: updatedAfterDate
        in: query
        description: filter by updated after date (deprecated, use updatedAfter)
        type: string
        format: date-time
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: status
        in: query
        description: filter by list of milestone status
        type: string
        items: {}
        enum:
        - all
        - new
        - reopened
        - completed
        - deleted
        - pending
        - incomplete
        - late
        - today
        - upcoming
      - name: searchTerm
        in: query
        description: filter by milestone name and description
        type: string
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: projectStatuses
        in: query
        description: filter by list of project status
        type: string
        items: {}
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - date
        - dateonly
        - name
        - project
        - user
        - dateCreated
        - dateUpdated
        default: date
      - name: dueBeforeDate
        in: query
        description: filter by due before date (deprecated, use dueBefore)
        type: string
        format: date
      - name: dueBefore
        in: query
        description: filter by due before date
        type: string
        format: date
      - name: dueAfterDate
        in: query
        description: filter by due after date (deprecated, use dueAfter)
        type: string
        format: date
      - name: dueAfter
        in: query
        description: filter by due after date
        type: string
        format: date
      - name: projectHealths
        in: query
        description: filter by list of project health
        type: integer
        items: {}
      - name: projectHealth
        in: query
        description: filter by list of project health (deprecated, use projectHealths)
        type: integer
        items: {}
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: showPrivate
        in: query
        description: show private milestones
        type: boolean
        default: "true"
      - name: showPercentageCompleted
        in: query
        description: show percentages completed
        type: boolean
      - name: showDeleted
        in: query
        description: include deleted items
        type: boolean
        default: "false"
      - name: showAttachedTasklists
        in: query
        description: show attached tasklists
        type: boolean
      - name: searchCompaniesTeams
        in: query
        description: include companies and teams in the search term
        type: boolean
      - name: searchAssignees
        in: query
        description: include assignees in the search
        type: boolean
      - name: progress
        in: query
        description: include progress of each milestone
        type: boolean
        default: "false"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyMyProjects
        in: query
        description: filter by projects that the logged-in user is related
        type: boolean
        default: "false"
      - name: onlyAdminProjects
        in: query
        description: |-
          only include milestones from projects where the user is strictly a project admin.
          site admins have visibility to all projects.
        type: boolean
      - name: matchAllTags
        in: query
        description: match all milestone tags
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeUpdate
        in: query
        description: include milestones latest update action
        type: boolean
      - name: includeToday
        in: query
        description: include today when milestone status is upcoming
        type: boolean
        default: "true"
      - name: includeTeamUserIds
        in: query
        description: include team users to the responsible party ids
        type: boolean
        default: "true"
      - name: includeTags
        in: query
        description: include tags in the reports
        type: boolean
        default: "true"
      - name: includeProgress
        in: query
        description: include percentage of tasks completed for all linked tasklists
        type: boolean
      - name: includeCompleted
        in: query
        description: optional to include completed milestones
        type: boolean
      - name: includeCompanyUserIds
        in: query
        description: include company users to the responsible party ids
        type: boolean
        default: "true"
      - name: includeAssigneeTeams
        in: query
        description: include teams related to the responsible user ids
        type: boolean
      - name: includeAssigneeCompanies
        in: query
        description: include companies related to the responsible user ids
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: emoji
        in: query
        description: convert emoji alias to unicode
        type: boolean
        default: "true"
      - name: countUnreadComments
        in: query
        description: count unread comments
        type: boolean
        default: "false"
      - name: calendar
        in: query
        description: enables the calendar style layout
        type: boolean
        default: "false"
      - name: tagIds
        in: query
        description: filter by milestone tag ids
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - projects.companies
        - users
        - completedBy
        - createdBy
        - deletedBy
        - updatedBy
        - commentFollowers
        - changeFollowers
        - tags
        - tasklists
        - tasklists.tasks
      - name: ids
        in: query
        description: filter by ids
        type: array
        items:
          type: integer
      - name: followerIds
        in: query
        description: filter by followers' ids
        type: array
        items:
          type: integer
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[tasks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
      - name: fields[tasklists]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - projectId
        - milestoneId
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[milestones]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - description
        - deadline
        - completed
        - projectId
        - createdOn
        - lastChangedOn
        - creatorUserId
        - reminder
        - private
        - lockdownId
        - status
        - completedOn
        - completerId
        - percentageComplete
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      - name: creatorIds
        in: query
        description: filter by creators' ids
        type: array
        items:
          type: integer
      - name: assignedToUserIds
        in: query
        description: filter by assigned user ids
        type: array
        items:
          type: integer
      - name: assignedToTeamIds
        in: query
        description: filter by assigned team ids
        type: array
        items:
          type: integer
      - name: assignedToCompanyIds
        in: query
        description: filter by assigned company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/milestones.xlsx:
    get:
      operationId: GET_projects_api_v3_milestones.xlsx
      tags:
      - Milestones
      summary: Generate milestone report in XLSX format
      description: |-
        Generates a milestone report in XLSX format containing all milestones for the
        provided filters. Only the milestones that the logged-in user can access will
        be returned.
      produces:
      - application/json
      - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
      parameters:
      - name: updatedAfterDate
        in: query
        description: filter by updated after date (deprecated, use updatedAfter)
        type: string
        format: date-time
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: status
        in: query
        description: filter by list of milestone status
        type: string
        items: {}
        enum:
        - all
        - new
        - reopened
        - completed
        - deleted
        - pending
        - incomplete
        - late
        - today
        - upcoming
      - name: searchTerm
        in: query
        description: filter by milestone name and description
        type: string
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: projectStatuses
        in: query
        description: filter by list of project status
        type: string
        items: {}
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - date
        - dateonly
        - name
        - project
        - user
        - dateCreated
        - dateUpdated
        default: date
      - name: dueBeforeDate
        in: query
        description: filter by due before date (deprecated, use dueBefore)
        type: string
        format: date
      - name: dueBefore
        in: query
        description: filter by due before date
        type: string
        format: date
      - name: dueAfterDate
        in: query
        description: filter by due after date (deprecated, use dueAfter)
        type: string
        format: date
      - name: dueAfter
        in: query
        description: filter by due after date
        type: string
        format: date
      - name: projectHealths
        in: query
        description: filter by list of project health
        type: integer
        items: {}
      - name: projectHealth
        in: query
        description: filter by list of project health (deprecated, use projectHealths)
        type: integer
        items: {}
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: showPrivate
        in: query
        description: show private milestones
        type: boolean
        default: "true"
      - name: showPercentageCompleted
        in: query
        description: show percentages completed
        type: boolean
      - name: showDeleted
        in: query
        description: include deleted items
        type: boolean
        default: "false"
      - name: showAttachedTasklists
        in: query
        description: show attached tasklists
        type: boolean
      - name: searchCompaniesTeams
        in: query
        description: include companies and teams in the search term
        type: boolean
      - name: searchAssignees
        in: query
        description: include assignees in the search
        type: boolean
      - name: progress
        in: query
        description: include progress of each milestone
        type: boolean
        default: "false"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyMyProjects
        in: query
        description: filter by projects that the logged-in user is related
        type: boolean
        default: "false"
      - name: onlyAdminProjects
        in: query
        description: |-
          only include milestones from projects where the user is strictly a project admin.
          site admins have visibility to all projects.
        type: boolean
      - name: matchAllTags
        in: query
        description: match all milestone tags
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeUpdate
        in: query
        description: include milestones latest update action
        type: boolean
      - name: includeToday
        in: query
        description: include today when milestone status is upcoming
        type: boolean
        default: "true"
      - name: includeTeamUserIds
        in: query
        description: include team users to the responsible party ids
        type: boolean
        default: "true"
      - name: includeTags
        in: query
        description: include tags in the reports
        type: boolean
        default: "true"
      - name: includeProgress
        in: query
        description: include percentage of tasks completed for all linked tasklists
        type: boolean
      - name: includeCompleted
        in: query
        description: optional to include completed milestones
        type: boolean
      - name: includeCompanyUserIds
        in: query
        description: include company users to the responsible party ids
        type: boolean
        default: "true"
      - name: includeAssigneeTeams
        in: query
        description: include teams related to the responsible user ids
        type: boolean
      - name: includeAssigneeCompanies
        in: query
        description: include companies related to the responsible user ids
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: emoji
        in: query
        description: convert emoji alias to unicode
        type: boolean
        default: "true"
      - name: countUnreadComments
        in: query
        description: count unread comments
        type: boolean
        default: "false"
      - name: calendar
        in: query
        description: enables the calendar style layout
        type: boolean
        default: "false"
      - name: tagIds
        in: query
        description: filter by milestone tag ids
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - projects.companies
        - users
        - completedBy
        - createdBy
        - deletedBy
        - updatedBy
        - commentFollowers
        - changeFollowers
        - tags
        - tasklists
        - tasklists.tasks
      - name: ids
        in: query
        description: filter by ids
        type: array
        items:
          type: integer
      - name: followerIds
        in: query
        description: filter by followers' ids
        type: array
        items:
          type: integer
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[tasks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
      - name: fields[tasklists]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - projectId
        - milestoneId
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[milestones]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - description
        - deadline
        - completed
        - projectId
        - createdOn
        - lastChangedOn
        - creatorUserId
        - reminder
        - private
        - lockdownId
        - status
        - completedOn
        - completerId
        - percentageComplete
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      - name: creatorIds
        in: query
        description: filter by creators' ids
        type: array
        items:
          type: integer
      - name: assignedToUserIds
        in: query
        description: filter by assigned user ids
        type: array
        items:
          type: integer
      - name: assignedToTeamIds
        in: query
        description: filter by assigned team ids
        type: array
        items:
          type: integer
      - name: assignedToCompanyIds
        in: query
        description: filter by assigned company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/milestones/{milestonId}.json:
    get:
      operationId: GET_projects_api_v3_milestones_{milestonId}.json
      tags:
      - Milestones
      summary: Get a milestone by id.
      description: This returns all details about an individual milestone.
      produces:
      - application/json
      parameters:
      - name: updatedAfterDate
        in: query
        description: filter by updated after date (deprecated, use updatedAfter)
        type: string
        format: date-time
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: status
        in: query
        description: filter by list of milestone status
        type: string
        items: {}
        enum:
        - all
        - new
        - reopened
        - completed
        - deleted
        - pending
        - incomplete
        - late
        - today
        - upcoming
      - name: searchTerm
        in: query
        description: filter by milestone name and description
        type: string
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: projectStatuses
        in: query
        description: filter by list of project status
        type: string
        items: {}
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - date
        - dateonly
        - name
        - project
        - user
        - dateCreated
        - dateUpdated
        default: date
      - name: dueBeforeDate
        in: query
        description: filter by due before date (deprecated, use dueBefore)
        type: string
        format: date
      - name: dueBefore
        in: query
        description: filter by due before date
        type: string
        format: date
      - name: dueAfterDate
        in: query
        description: filter by due after date (deprecated, use dueAfter)
        type: string
        format: date
      - name: dueAfter
        in: query
        description: filter by due after date
        type: string
        format: date
      - name: projectHealths
        in: query
        description: filter by list of project health
        type: integer
        items: {}
      - name: projectHealth
        in: query
        description: filter by list of project health (deprecated, use projectHealths)
        type: integer
        items: {}
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: milestonId
        in: path
        type: integer
        required: true
      - name: showPrivate
        in: query
        description: show private milestones
        type: boolean
        default: "true"
      - name: showPercentageCompleted
        in: query
        description: show percentages completed
        type: boolean
      - name: showDeleted
        in: query
        description: include deleted items
        type: boolean
        default: "false"
      - name: showAttachedTasklists
        in: query
        description: show attached tasklists
        type: boolean
      - name: searchCompaniesTeams
        in: query
        description: include companies and teams in the search term
        type: boolean
      - name: searchAssignees
        in: query
        description: include assignees in the search
        type: boolean
      - name: progress
        in: query
        description: include progress of each milestone
        type: boolean
        default: "false"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyMyProjects
        in: query
        description: filter by projects that the logged-in user is related
        type: boolean
        default: "false"
      - name: onlyAdminProjects
        in: query
        description: |-
          only include milestones from projects where the user is strictly a project admin.
          site admins have visibility to all projects.
        type: boolean
      - name: matchAllTags
        in: query
        description: match all milestone tags
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeUpdate
        in: query
        description: include milestones latest update action
        type: boolean
      - name: includeToday
        in: query
        description: include today when milestone status is upcoming
        type: boolean
        default: "true"
      - name: includeTeamUserIds
        in: query
        description: include team users to the responsible party ids
        type: boolean
        default: "true"
      - name: includeTags
        in: query
        description: include tags in the reports
        type: boolean
        default: "true"
      - name: includeProgress
        in: query
        description: include percentage of tasks completed for all linked tasklists
        type: boolean
      - name: includeCompleted
        in: query
        description: optional to include completed milestones
        type: boolean
      - name: includeCompanyUserIds
        in: query
        description: include company users to the responsible party ids
        type: boolean
        default: "true"
      - name: includeAssigneeTeams
        in: query
        description: include teams related to the responsible user ids
        type: boolean
      - name: includeAssigneeCompanies
        in: query
        description: include companies related to the responsible user ids
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: emoji
        in: query
        description: convert emoji alias to unicode
        type: boolean
        default: "true"
      - name: countUnreadComments
        in: query
        description: count unread comments
        type: boolean
        default: "false"
      - name: calendar
        in: query
        description: enables the calendar style layout
        type: boolean
        default: "false"
      - name: tagIds
        in: query
        description: filter by milestone tag ids
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - projects.companies
        - users
        - completedBy
        - createdBy
        - deletedBy
        - updatedBy
        - commentFollowers
        - changeFollowers
        - tags
        - tasklists
        - tasklists.tasks
      - name: ids
        in: query
        description: filter by ids
        type: array
        items:
          type: integer
      - name: followerIds
        in: query
        description: filter by followers' ids
        type: array
        items:
          type: integer
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[tasks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
      - name: fields[tasklists]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - projectId
        - milestoneId
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[milestones]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - description
        - deadline
        - completed
        - projectId
        - createdOn
        - lastChangedOn
        - creatorUserId
        - reminder
        - private
        - lockdownId
        - status
        - completedOn
        - completerId
        - percentageComplete
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      - name: creatorIds
        in: query
        description: filter by creators' ids
        type: array
        items:
          type: integer
      - name: assignedToUserIds
        in: query
        description: filter by assigned user ids
        type: array
        items:
          type: integer
      - name: assignedToTeamIds
        in: query
        description: filter by assigned team ids
        type: array
        items:
          type: integer
      - name: assignedToCompanyIds
        in: query
        description: filter by assigned company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/milestone.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/milestones/{milestoneId}/comments.json:
    get:
      operationId: GET_projects_api_v3_milestones_{milestoneId}_comments.json
      tags:
      - MilestoneComments
      summary: Get a list of comments for a milestone
      produces:
      - application/json
      parameters:
      - name: milestoneId
        in: path
        type: integer
        required: true
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/comment.CommentsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/milestones/metrics/deadlines.json:
    get:
      operationId: GET_projects_api_v3_milestones_metrics_deadlines.json
      tags:
      - Milestones
      summary: Get milestones by due date in a time range
      description: |-
        Count the number of milestones on each deadline date. Only the milestones
        that the logged-in user can access will be included in the counting.
      produces:
      - application/json
      parameters:
      - name: startDate
        in: query
        type: string
        format: date
      - name: endDate
        in: query
        type: string
        format: date
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/deadline.MilestoneMetricDeadlinesResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/notebooks.json:
    get:
      operationId: GET_projects_api_v3_notebooks.json
      tags:
      - Notebooks
      summary: Get a list of notebooks.
      produces:
      - application/json
      parameters:
      - name: updatedAfterDate
        in: query
        description: filter by updated after date (deprecated, use updatedAfter)
        type: string
        format: date-time
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: searchTerm
        in: query
        description: filter by notebook name and description
        type: string
      - name: projectStatuses
        in: query
        description: filter by project statuses
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - name
        - project
        - dateCreated
        - dateUpdated
        - category
        default: dateUpdated
      - name: createdAfterDate
        in: query
        description: filter by created after date (deprecated, use createdAfter)
        type: string
        format: date
      - name: createdAfter
        in: query
        description: filter by created after date
        type: string
        format: date
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: showDeleted
        in: query
        description: include deleted items
        type: boolean
        default: "false"
      - name: secureOnly
        in: query
        description: filter by showing only secure notebooks
        type: boolean
        default: "false"
      - name: matchAllTags
        in: query
        description: match all notebook tags
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: lockedOnly
        in: query
        description: filter by showing only locked notebooks
        type: boolean
        default: "false"
      - name: getEmoji
        in: query
        description: parse Emoji's
        type: boolean
      - name: tagIds
        in: query
        description: filter by notebook tag ids
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - tags
        - users
        - notebookCategories
        - companies
        - teams
      - name: ids
        in: query
        description: filter by ids
        type: array
        items:
          type: integer
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[teams]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - teamLogo
        - teamLogoIcon
        - teamLogoColor
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[notebooks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - description
        - contents
        - type
        - isPrivate
        - locked
        - lockdownId
        - secureContent
        - projectId
        - createdByUserID
        - updatedByUserID
        - deletedByUserID
        - dateUpdated
        - dateCreated
        - dateDeleted
        - deleted
        - categoryId
        - notebookVersionID
        - notebookVersionCreatedDateTime
        - notebookVersionUpdatedDateTime
        - latestVersionNo
        - commentsCount
        - readCommentsCount
        - contentHTML
        - privacy
        - commentFollowers
        - changeFollowers
        - projectNotifyCommentIncludeCreator
        - tagIds
      - name: fields[notebookCategories]
        in: query
        type: array
        items:
          type: string
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      - name: creatorIds
        in: query
        description: filter by creators' ids
        type: array
        items:
          type: integer
      - name: categoryIds
        in: query
        description: filter by notebook category ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/notebook.NotebooksResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/notebooks/{notebookId}.json:
    get:
      operationId: GET_projects_api_v3_notebooks_{notebookId}.json
      tags:
      - Notebooks
      summary: Get a specific notebook.
      produces:
      - application/json
      parameters:
      - name: updatedAfterDate
        in: query
        description: filter by updated after date (deprecated, use updatedAfter)
        type: string
        format: date-time
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: notebookId
        in: path
        type: integer
        required: true
      - name: showDeleted
        in: query
        description: show deleted notebooks
        type: boolean
      - name: getEmoji
        in: query
        description: parse Emoji's
        type: boolean
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - tags
        - users
        - notebookCategories
        - companies
        - teams
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[teams]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - teamLogo
        - teamLogoIcon
        - teamLogoColor
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[notebooks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - description
        - contents
        - type
        - isPrivate
        - locked
        - lockdownId
        - secureContent
        - projectId
        - createdByUserID
        - updatedByUserID
        - deletedByUserID
        - dateUpdated
        - dateCreated
        - dateDeleted
        - deleted
        - categoryId
        - notebookVersionID
        - notebookVersionCreatedDateTime
        - notebookVersionUpdatedDateTime
        - latestVersionNo
        - commentsCount
        - readCommentsCount
        - contentHTML
        - privacy
        - commentFollowers
        - changeFollowers
        - projectNotifyCommentIncludeCreator
        - tagIds
      - name: fields[notebookCategories]
        in: query
        type: array
        items:
          type: string
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/notebook.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
    patch:
      operationId: PATCH_projects_api_v3_notebooks_{notebookId}.json
      tags:
      - Notebooks
      summary: Edits a notebook
      description: Edits the fields of an existing notebook
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: notebook.Request
        in: body
        required: true
        schema:
          $ref: '#/definitions/notebook.Request'
      - name: notebookId
        in: path
        type: integer
        required: true
      - name: getEmoji
        in: query
        description: parse Emoji's
        type: boolean
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - tags
        - users
        - notebookCategories
        - companies
        - teams
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[teams]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - teamLogo
        - teamLogoIcon
        - teamLogoColor
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[notebooks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - description
        - contents
        - type
        - isPrivate
        - locked
        - lockdownId
        - secureContent
        - projectId
        - createdByUserID
        - updatedByUserID
        - deletedByUserID
        - dateUpdated
        - dateCreated
        - dateDeleted
        - deleted
        - categoryId
        - notebookVersionID
        - notebookVersionCreatedDateTime
        - notebookVersionUpdatedDateTime
        - latestVersionNo
        - commentsCount
        - readCommentsCount
        - contentHTML
        - privacy
        - commentFollowers
        - changeFollowers
        - projectNotifyCommentIncludeCreator
        - tagIds
      - name: fields[notebookCategories]
        in: query
        type: array
        items:
          type: string
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/notebook.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
    delete:
      operationId: DELETE_projects_api_v3_notebooks_{notebookId}.json
      tags:
      - Notebooks
      summary: Delete an existing notebook.
      produces:
      - application/json
      parameters:
      - name: notebookId
        in: path
        type: integer
        required: true
      responses:
        204:
          description: 204 No Content (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/notebooks/{notebookId}/comments.json:
    get:
      operationId: GET_projects_api_v3_notebooks_{notebookId}_comments.json
      tags:
      - NotebookComments
      summary: Get a list of comments for a notebook
      produces:
      - application/json
      parameters:
      - name: notebookId
        in: path
        type: integer
        required: true
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/comment.CommentsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/notebooks/{notebookId}/compare.json:
    get:
      operationId: GET_projects_api_v3_notebooks_{notebookId}_compare.json
      tags:
      - Notebooks
      summary: Compare 2 notebook versions
      description: Gets the contents diff between the contents of 2 notebook versions
      produces:
      - application/json
      parameters:
      - name: notebookId
        in: path
        type: integer
        required: true
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - users
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/notebook.VersionResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/notebooks/{notebookId}/lock.json:
    put:
      operationId: PUT_projects_api_v3_notebooks_{notebookId}_lock.json
      tags:
      - Notebooks
      summary: Lock a notebook
      description: Locks a specific notebook.
      produces:
      - application/json
      parameters:
      - name: notebookId
        in: path
        type: integer
        required: true
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/notebooks/{notebookId}/unlock.json:
    put:
      operationId: PUT_projects_api_v3_notebooks_{notebookId}_unlock.json
      tags:
      - Notebooks
      summary: Unlock a notebook
      description: Unlocks a specific notebook.
      produces:
      - application/json
      parameters:
      - name: notebookId
        in: path
        type: integer
        required: true
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/notebooks/{notebookId}/versions.json:
    get:
      operationId: GET_projects_api_v3_notebooks_{notebookId}_versions.json
      tags:
      - Notebooks
      summary: Get notebook versions
      description: Get a list of a notebooks versions.
      produces:
      - application/json
      parameters:
      - name: notebookId
        in: path
        type: integer
        required: true
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - users
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/notebook.VersionsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
    delete:
      operationId: DELETE_projects_api_v3_notebooks_{notebookId}_versions.json
      tags:
      - Notebooks
      summary: Delete notebook versions.
      description: Deletes some existing versions of a notebook by version ID
      produces:
      - application/json
      parameters:
      - name: notebookId
        in: path
        type: integer
        required: true
      responses:
        204:
          description: 204 No Content (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/notebooks/{notebookId}/versions/{versionId}.json:
    get:
      operationId: GET_projects_api_v3_notebooks_{notebookId}_versions_{versionId}.json
      tags:
      - Notebooks
      summary: Get a notebook version
      description: Get a specific notebook version.
      produces:
      - application/json
      parameters:
      - name: versionId
        in: path
        type: integer
        required: true
      - name: notebookId
        in: path
        type: integer
        required: true
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - users
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/notebook.VersionResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/people.json:
    get:
      operationId: GET_projects_api_v3_people.json
      tags:
      - People
      summary: Returns a list of people
      description: Retrieve all people for the provided filters.
      produces:
      - application/json
      parameters:
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - name
        - namecaseinsensitive
        - company
        default: name
      - name: pageSize
        in: query
        description: number of items in a page (not used when generating reports)
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number (not used when generating reports)
        type: integer
        default: "1"
      - name: include
        in: query
        description: include (not used when generating reports)
        type: array
        items:
          type: string
        enum:
        - companies
      - name: ids
        in: query
        description: filter by user ids
        type: array
        items:
          type: integer
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/people.MultiResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/people/{personId}.json:
    get:
      operationId: GET_projects_api_v3_people_{personId}.json
      tags:
      - Person
      summary: Returns a person
      description: Retrieve a person record.
      produces:
      - application/json
      parameters:
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - name
        - namecaseinsensitive
        - company
        default: name
      - name: personId
        in: path
        type: integer
        required: true
      - name: pageSize
        in: query
        description: number of items in a page (not used when generating reports)
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number (not used when generating reports)
        type: integer
        default: "1"
      - name: include
        in: query
        description: include (not used when generating reports)
        type: array
        items:
          type: string
        enum:
        - companies
      - name: ids
        in: query
        description: filter by user ids
        type: array
        items:
          type: integer
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/people.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/people/{userId}/availability.json:
    get:
      description: |-
        Verify the user working hours and events marked as unavailable to calculate
        the availability in the provided range.
      operationId: GET_projects_api_v3_people_{userId}_availability.json
      parameters:
      - description: filter by start date
        format: date
        in: query
        name: startDate
        type: string
      - description: filter by end date
        format: date
        in: query
        name: endDate
        type: string
      - description: filter by user
        in: query
        name: userId
        type: integer
      - in: path
        name: userId
        required: true
        type: integer
      - description: include
        enum:
        - projects
        - users
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
        in: query
        items:
          type: string
        name: fields[users]
        type: array
      - enum:
        - id
        - name
        in: query
        items:
          type: string
        name: fields[projects]
        type: array
      - enum:
        - userId
        - dates
        in: query
        items:
          type: string
        name: fields[availability]
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/availability.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Return the user availability.
      tags:
      - People
      x-private: true
  /projects/api/v3/people/metrics/performance.json:
    get:
      operationId: GET_projects_api_v3_people_metrics_performance.json
      tags:
      - People
      summary: Performance of users completing the most tasks
      description: |-
        Count the number of completed tasks by user for the provided period. By
        default the user with the most completed tasks is shown first.
      produces:
      - application/json
      parameters:
      - name: startDate
        in: query
        type: string
        format: date
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: desc
      - name: endDate
        in: query
        type: string
        format: date
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/performance.PeopleMetricPerformancesResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/people/utilization.json:
    get:
      operationId: GET_projects_api_v3_people_utilization.json
      tags:
      - People
      summary: Return the user utilization.
      description: Verify the user utilization.
      produces:
      - application/json
      parameters:
      - name: startDate
        in: query
        description: filter by start date
        type: string
        format: date
      - name: sortOrder
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: sort
        in: query
        description: sort by
        type: string
        enum:
        - name
        - percentutilization
        - percentestimatedutilization
        - availableminutes
        - unavailableminutes
        - loggedminutes
        - billableminutes
        - unbillableminutes
        default: name
      - name: searchTerm
        in: query
        description: filter by user first or last name
        type: string
      - name: groupBy
        in: query
        description: group by
        type: string
        enum:
        - weekly
        - monthly
      - name: endDate
        in: query
        description: filter by end date
        type: string
        format: date
      - name: pageSize
        in: query
        description: |-
          number of items in a page
          default: 50
        type: integer
      - name: page
        in: query
        description: |-
          page number
          default: 1
        type: integer
      - name: includeCollaborators
        in: query
        description: include collaborators
        type: boolean
        default: "true"
      - name: includeClients
        in: query
        description: include client users
        type: boolean
        default: "true"
      - name: userIds
        in: query
        description: filter by userIds
        type: array
        items:
          type: integer
      - name: teamIds
        in: query
        description: filter by team ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - users
      - name: fields[utilizations]
        in: query
        type: array
        items:
          type: string
        enum:
        - userId
        - unavailableMinutes
        - availableMinutes
        - billableMinutes
        - unbillableMinutes
        - loggedMinutes
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: companyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/utilization.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/projects.csv:
    get:
      operationId: GET_projects_api_v3_projects.csv
      tags:
      - Projects
      summary: Generate project report in CSV format
      description: |-
        Generates a project report in CSV format containing all projects for the
        provided filters. Only the projects that the logged-in user can access will
        be returned.


        On this endpoint you can filter by project custom fields. The syntax for the
        query parameter is the following:

            projectCustomField[id][op]=value

        Where:
          - [id] is the custom field ID
          - [op] is the operator to apply when filtering, different operators are
            allowed according to the custom field type
          - [value] is the value to apply when filtering

        For example, if I want to filter a dropdown custom field with ID 10 to only
        return entries that have the value "Option1" we would do the following:

            projectCustomField[10][eq]=Option1

        The allowed operators are:
          - like
          - not-like
          - eq
          - not
          - lt
          - gt
          - any
      produces:
      - application/json
      - text/csv
      parameters:
      - name: updatedAfter
        in: query
        description: updated after
        type: string
        format: date-time
      - name: searchTerm
        in: query
        description: filter by project name
        type: string
      - name: reportType
        in: query
        description: define the format of the report
        type: string
        enum:
        - project
        - health
        default: project
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
        enum:
        - csv
        - html
        - pdf
        - xls
        default: pdf
      - name: projectType
        in: query
        description: filter by project type
        type: string
      - name: projectStatuses
        in: query
        description: filter by project status
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - companyname
        - datecreated
        - duedate
        - lastactivity
        - name
        - namecaseinsensitive
        - ownercompany
        - starred
        default: name
      - name: minLastActivityDate
        in: query
        description: filter by min last activity date
        type: string
        format: date
      - name: maxLastActivityDate
        in: query
        description: filter by max last activity date
        type: string
        format: date
      - name: userId
        in: query
        description: filter by user id
        type: integer
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: pageSize
        in: query
        description: number of items in a page (not used when generating reports)
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number (not used when generating reports)
        type: integer
        default: "1"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyProjectsWithExplicitMembership
        in: query
        description: only show projects with explicit membership
        type: boolean
        default: "false"
      - name: onlyArchivedProjects
        in: query
        description: return only archived projects
        type: boolean
        default: "false"
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
        default: "false"
      - name: includeProjectUserInfo
        in: query
        description: fetch user-specific data such as isStarred
        type: boolean
        default: "false"
      - name: includeCustomFields
        in: query
        description: include custom fields
        type: boolean
        default: "false"
      - name: includeCompletedStatus
        in: query
        description: optional to include completed projects when filtering by project statuses "current,late".
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: hideObservedProjects
        in: query
        description: hide projects where the logged-in user is just an observer
        type: boolean
        default: "false"
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include (not used when generating reports)
        type: array
        items:
          type: string
        enum:
        - projectOwners
        - projectUpdates
        - companies
        - projectCategories
        - portfolioCards
        - portfolioBoards
        - portfolioColumns
        - tags
        - customfields
        - customfieldProjects
        - projectBudgets
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[projectcategories]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[projectUpdates]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - text
        - isActive
        - health
        - color
        - dateCreated
        - deleted
        - deletedDate
        - numLikes
        - reactions
      - name: fields[projectBudgets]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - type
        - status
        - capacityUsed
        - capacity
        - |-
          originatorBudgetId
          isRepeating
        - repeatPeriod
        - repeatUnit
        - repeatsRemaining
        - sequenceNumber
        - |-
          startDateTime
          endDateTime
        - currencyCode
        - timelogType
        - expenseType
        - defaultRate
        - |-
          notificationIds
          createdByUserId
        - dateCreated
        - updatedUserId
        - dateUpdated
        - |-
          completedByUserId
          dateCompleted
        - deletedByUserId
        - dateDeleted
      - name: fields[portfolioColumns]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[portfolioCards]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - columnId
        - projectId
      - name: fields[portfolioBoards]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[customfields]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - entity
        - name
        - description
        - type
        - options
        - visibilities
        - isPrivate
        - required
        - createdAt
        - createdByUserId
        - updatedAt
        - updatedByUserId
        - deleted
        - deletedAt
        - deletedByUserId
      - name: fields[customfieldProjects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - customfieldId
        - value
        - createdAt
        - createdBy
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects.html:
    get:
      operationId: GET_projects_api_v3_projects.html
      tags:
      - Projects
      summary: Generate project report in HTML format
      description: |-
        Generates a project report in HTML format containing all projects for the
        provided filters. Only the projects that the logged-in user can access will
        be returned.


        On this endpoint you can filter by project custom fields. The syntax for the
        query parameter is the following:

            projectCustomField[id][op]=value

        Where:
          - [id] is the custom field ID
          - [op] is the operator to apply when filtering, different operators are
            allowed according to the custom field type
          - [value] is the value to apply when filtering

        For example, if I want to filter a dropdown custom field with ID 10 to only
        return entries that have the value "Option1" we would do the following:

            projectCustomField[10][eq]=Option1

        The allowed operators are:
          - like
          - not-like
          - eq
          - not
          - lt
          - gt
          - any
      produces:
      - application/json
      - text/html
      parameters:
      - name: updatedAfter
        in: query
        description: updated after
        type: string
        format: date-time
      - name: searchTerm
        in: query
        description: filter by project name
        type: string
      - name: reportType
        in: query
        description: define the format of the report
        type: string
        enum:
        - project
        - health
        default: project
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
        enum:
        - csv
        - html
        - pdf
        - xls
        default: pdf
      - name: projectType
        in: query
        description: filter by project type
        type: string
      - name: projectStatuses
        in: query
        description: filter by project status
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - companyname
        - datecreated
        - duedate
        - lastactivity
        - name
        - namecaseinsensitive
        - ownercompany
        - starred
        default: name
      - name: minLastActivityDate
        in: query
        description: filter by min last activity date
        type: string
        format: date
      - name: maxLastActivityDate
        in: query
        description: filter by max last activity date
        type: string
        format: date
      - name: userId
        in: query
        description: filter by user id
        type: integer
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: pageSize
        in: query
        description: number of items in a page (not used when generating reports)
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number (not used when generating reports)
        type: integer
        default: "1"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyProjectsWithExplicitMembership
        in: query
        description: only show projects with explicit membership
        type: boolean
        default: "false"
      - name: onlyArchivedProjects
        in: query
        description: return only archived projects
        type: boolean
        default: "false"
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
        default: "false"
      - name: includeProjectUserInfo
        in: query
        description: fetch user-specific data such as isStarred
        type: boolean
        default: "false"
      - name: includeCustomFields
        in: query
        description: include custom fields
        type: boolean
        default: "false"
      - name: includeCompletedStatus
        in: query
        description: optional to include completed projects when filtering by project statuses "current,late".
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: hideObservedProjects
        in: query
        description: hide projects where the logged-in user is just an observer
        type: boolean
        default: "false"
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include (not used when generating reports)
        type: array
        items:
          type: string
        enum:
        - projectOwners
        - projectUpdates
        - companies
        - projectCategories
        - portfolioCards
        - portfolioBoards
        - portfolioColumns
        - tags
        - customfields
        - customfieldProjects
        - projectBudgets
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[projectcategories]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[projectUpdates]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - text
        - isActive
        - health
        - color
        - dateCreated
        - deleted
        - deletedDate
        - numLikes
        - reactions
      - name: fields[projectBudgets]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - type
        - status
        - capacityUsed
        - capacity
        - |-
          originatorBudgetId
          isRepeating
        - repeatPeriod
        - repeatUnit
        - repeatsRemaining
        - sequenceNumber
        - |-
          startDateTime
          endDateTime
        - currencyCode
        - timelogType
        - expenseType
        - defaultRate
        - |-
          notificationIds
          createdByUserId
        - dateCreated
        - updatedUserId
        - dateUpdated
        - |-
          completedByUserId
          dateCompleted
        - deletedByUserId
        - dateDeleted
      - name: fields[portfolioColumns]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[portfolioCards]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - columnId
        - projectId
      - name: fields[portfolioBoards]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[customfields]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - entity
        - name
        - description
        - type
        - options
        - visibilities
        - isPrivate
        - required
        - createdAt
        - createdByUserId
        - updatedAt
        - updatedByUserId
        - deleted
        - deletedAt
        - deletedByUserId
      - name: fields[customfieldProjects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - customfieldId
        - value
        - createdAt
        - createdBy
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects.json:
    get:
      operationId: GET_projects_api_v3_projects.json
      tags:
      - Projects
      summary: Returns a list of projects
      description: |-
        Retrieve all projects for the provided filters. Only the projects that the
        logged-in user can access will be returned.


        On this endpoint you can filter by project custom fields. The syntax for the
        query parameter is the following:

            projectCustomField[id][op]=value

        Where:
          - [id] is the custom field ID
          - [op] is the operator to apply when filtering, different operators are
            allowed according to the custom field type
          - [value] is the value to apply when filtering

        For example, if I want to filter a dropdown custom field with ID 10 to only
        return entries that have the value "Option1" we would do the following:

            projectCustomField[10][eq]=Option1

        The allowed operators are:
          - like
          - not-like
          - eq
          - not
          - lt
          - gt
          - any
      produces:
      - application/json
      parameters:
      - name: updatedAfter
        in: query
        description: updated after
        type: string
        format: date-time
      - name: searchTerm
        in: query
        description: filter by project name
        type: string
      - name: reportType
        in: query
        description: define the format of the report
        type: string
        enum:
        - project
        - health
        default: project
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
        enum:
        - csv
        - html
        - pdf
        - xls
        default: pdf
      - name: projectType
        in: query
        description: filter by project type
        type: string
      - name: projectStatuses
        in: query
        description: filter by project status
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - companyname
        - datecreated
        - duedate
        - lastactivity
        - name
        - namecaseinsensitive
        - ownercompany
        - starred
        default: name
      - name: minLastActivityDate
        in: query
        description: filter by min last activity date
        type: string
        format: date
      - name: maxLastActivityDate
        in: query
        description: filter by max last activity date
        type: string
        format: date
      - name: userId
        in: query
        description: filter by user id
        type: integer
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: pageSize
        in: query
        description: number of items in a page (not used when generating reports)
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number (not used when generating reports)
        type: integer
        default: "1"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyProjectsWithExplicitMembership
        in: query
        description: only show projects with explicit membership
        type: boolean
        default: "false"
      - name: onlyArchivedProjects
        in: query
        description: return only archived projects
        type: boolean
        default: "false"
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
        default: "false"
      - name: includeProjectUserInfo
        in: query
        description: fetch user-specific data such as isStarred
        type: boolean
        default: "false"
      - name: includeCustomFields
        in: query
        description: include custom fields
        type: boolean
        default: "false"
      - name: includeCompletedStatus
        in: query
        description: optional to include completed projects when filtering by project statuses "current,late".
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: hideObservedProjects
        in: query
        description: hide projects where the logged-in user is just an observer
        type: boolean
        default: "false"
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include (not used when generating reports)
        type: array
        items:
          type: string
        enum:
        - projectOwners
        - projectUpdates
        - companies
        - projectCategories
        - portfolioCards
        - portfolioBoards
        - portfolioColumns
        - tags
        - customfields
        - customfieldProjects
        - projectBudgets
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[projectcategories]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[projectUpdates]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - text
        - isActive
        - health
        - color
        - dateCreated
        - deleted
        - deletedDate
        - numLikes
        - reactions
      - name: fields[projectBudgets]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - type
        - status
        - capacityUsed
        - capacity
        - |-
          originatorBudgetId
          isRepeating
        - repeatPeriod
        - repeatUnit
        - repeatsRemaining
        - sequenceNumber
        - |-
          startDateTime
          endDateTime
        - currencyCode
        - timelogType
        - expenseType
        - defaultRate
        - |-
          notificationIds
          createdByUserId
        - dateCreated
        - updatedUserId
        - dateUpdated
        - |-
          completedByUserId
          dateCompleted
        - deletedByUserId
        - dateDeleted
      - name: fields[portfolioColumns]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[portfolioCards]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - columnId
        - projectId
      - name: fields[portfolioBoards]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[customfields]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - entity
        - name
        - description
        - type
        - options
        - visibilities
        - isPrivate
        - required
        - createdAt
        - createdByUserId
        - updatedAt
        - updatedByUserId
        - deleted
        - deletedAt
        - deletedByUserId
      - name: fields[customfieldProjects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - customfieldId
        - value
        - createdAt
        - createdBy
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/project.ProjectsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects.pdf:
    get:
      operationId: GET_projects_api_v3_projects.pdf
      tags:
      - Projects
      summary: Generate project report in PDF format
      description: |-
        Generates a project report in PDF format containing all projects for the
        provided filters. Only the projects that the logged-in user can access will
        be returned.


        On this endpoint you can filter by project custom fields. The syntax for the
        query parameter is the following:

            projectCustomField[id][op]=value

        Where:
          - [id] is the custom field ID
          - [op] is the operator to apply when filtering, different operators are
            allowed according to the custom field type
          - [value] is the value to apply when filtering

        For example, if I want to filter a dropdown custom field with ID 10 to only
        return entries that have the value "Option1" we would do the following:

            projectCustomField[10][eq]=Option1

        The allowed operators are:
          - like
          - not-like
          - eq
          - not
          - lt
          - gt
          - any
      produces:
      - application/json
      - application/pdf
      parameters:
      - name: updatedAfter
        in: query
        description: updated after
        type: string
        format: date-time
      - name: searchTerm
        in: query
        description: filter by project name
        type: string
      - name: reportType
        in: query
        description: define the format of the report
        type: string
        enum:
        - project
        - health
        default: project
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
        enum:
        - csv
        - html
        - pdf
        - xls
        default: pdf
      - name: projectType
        in: query
        description: filter by project type
        type: string
      - name: projectStatuses
        in: query
        description: filter by project status
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - companyname
        - datecreated
        - duedate
        - lastactivity
        - name
        - namecaseinsensitive
        - ownercompany
        - starred
        default: name
      - name: minLastActivityDate
        in: query
        description: filter by min last activity date
        type: string
        format: date
      - name: maxLastActivityDate
        in: query
        description: filter by max last activity date
        type: string
        format: date
      - name: userId
        in: query
        description: filter by user id
        type: integer
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: pageSize
        in: query
        description: number of items in a page (not used when generating reports)
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number (not used when generating reports)
        type: integer
        default: "1"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyProjectsWithExplicitMembership
        in: query
        description: only show projects with explicit membership
        type: boolean
        default: "false"
      - name: onlyArchivedProjects
        in: query
        description: return only archived projects
        type: boolean
        default: "false"
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
        default: "false"
      - name: includeProjectUserInfo
        in: query
        description: fetch user-specific data such as isStarred
        type: boolean
        default: "false"
      - name: includeCustomFields
        in: query
        description: include custom fields
        type: boolean
        default: "false"
      - name: includeCompletedStatus
        in: query
        description: optional to include completed projects when filtering by project statuses "current,late".
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: hideObservedProjects
        in: query
        description: hide projects where the logged-in user is just an observer
        type: boolean
        default: "false"
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include (not used when generating reports)
        type: array
        items:
          type: string
        enum:
        - projectOwners
        - projectUpdates
        - companies
        - projectCategories
        - portfolioCards
        - portfolioBoards
        - portfolioColumns
        - tags
        - customfields
        - customfieldProjects
        - projectBudgets
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[projectcategories]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[projectUpdates]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - text
        - isActive
        - health
        - color
        - dateCreated
        - deleted
        - deletedDate
        - numLikes
        - reactions
      - name: fields[projectBudgets]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - type
        - status
        - capacityUsed
        - capacity
        - |-
          originatorBudgetId
          isRepeating
        - repeatPeriod
        - repeatUnit
        - repeatsRemaining
        - sequenceNumber
        - |-
          startDateTime
          endDateTime
        - currencyCode
        - timelogType
        - expenseType
        - defaultRate
        - |-
          notificationIds
          createdByUserId
        - dateCreated
        - updatedUserId
        - dateUpdated
        - |-
          completedByUserId
          dateCompleted
        - deletedByUserId
        - dateDeleted
      - name: fields[portfolioColumns]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[portfolioCards]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - columnId
        - projectId
      - name: fields[portfolioBoards]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[customfields]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - entity
        - name
        - description
        - type
        - options
        - visibilities
        - isPrivate
        - required
        - createdAt
        - createdByUserId
        - updatedAt
        - updatedByUserId
        - deleted
        - deletedAt
        - deletedByUserId
      - name: fields[customfieldProjects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - customfieldId
        - value
        - createdAt
        - createdBy
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects.xlsx:
    get:
      operationId: GET_projects_api_v3_projects.xlsx
      tags:
      - Projects
      summary: Generate project report in XLSX format
      description: |-
        Generates a project report in XLSX format containing all projects for the
        provided filters. Only the projects that the logged-in user can access will
        be returned.


        On this endpoint you can filter by project custom fields. The syntax for the
        query parameter is the following:

            projectCustomField[id][op]=value

        Where:
          - [id] is the custom field ID
          - [op] is the operator to apply when filtering, different operators are
            allowed according to the custom field type
          - [value] is the value to apply when filtering

        For example, if I want to filter a dropdown custom field with ID 10 to only
        return entries that have the value "Option1" we would do the following:

            projectCustomField[10][eq]=Option1

        The allowed operators are:
          - like
          - not-like
          - eq
          - not
          - lt
          - gt
          - any
      produces:
      - application/json
      - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
      parameters:
      - name: updatedAfter
        in: query
        description: updated after
        type: string
        format: date-time
      - name: searchTerm
        in: query
        description: filter by project name
        type: string
      - name: reportType
        in: query
        description: define the format of the report
        type: string
        enum:
        - project
        - health
        default: project
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
        enum:
        - csv
        - html
        - pdf
        - xls
        default: pdf
      - name: projectType
        in: query
        description: filter by project type
        type: string
      - name: projectStatuses
        in: query
        description: filter by project status
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - companyname
        - datecreated
        - duedate
        - lastactivity
        - name
        - namecaseinsensitive
        - ownercompany
        - starred
        default: name
      - name: minLastActivityDate
        in: query
        description: filter by min last activity date
        type: string
        format: date
      - name: maxLastActivityDate
        in: query
        description: filter by max last activity date
        type: string
        format: date
      - name: userId
        in: query
        description: filter by user id
        type: integer
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: pageSize
        in: query
        description: number of items in a page (not used when generating reports)
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number (not used when generating reports)
        type: integer
        default: "1"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyProjectsWithExplicitMembership
        in: query
        description: only show projects with explicit membership
        type: boolean
        default: "false"
      - name: onlyArchivedProjects
        in: query
        description: return only archived projects
        type: boolean
        default: "false"
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
        default: "false"
      - name: includeProjectUserInfo
        in: query
        description: fetch user-specific data such as isStarred
        type: boolean
        default: "false"
      - name: includeCustomFields
        in: query
        description: include custom fields
        type: boolean
        default: "false"
      - name: includeCompletedStatus
        in: query
        description: optional to include completed projects when filtering by project statuses "current,late".
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: hideObservedProjects
        in: query
        description: hide projects where the logged-in user is just an observer
        type: boolean
        default: "false"
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include (not used when generating reports)
        type: array
        items:
          type: string
        enum:
        - projectOwners
        - projectUpdates
        - companies
        - projectCategories
        - portfolioCards
        - portfolioBoards
        - portfolioColumns
        - tags
        - customfields
        - customfieldProjects
        - projectBudgets
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[projectcategories]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[projectUpdates]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - text
        - isActive
        - health
        - color
        - dateCreated
        - deleted
        - deletedDate
        - numLikes
        - reactions
      - name: fields[projectBudgets]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - type
        - status
        - capacityUsed
        - capacity
        - |-
          originatorBudgetId
          isRepeating
        - repeatPeriod
        - repeatUnit
        - repeatsRemaining
        - sequenceNumber
        - |-
          startDateTime
          endDateTime
        - currencyCode
        - timelogType
        - expenseType
        - defaultRate
        - |-
          notificationIds
          createdByUserId
        - dateCreated
        - updatedUserId
        - dateUpdated
        - |-
          completedByUserId
          dateCompleted
        - deletedByUserId
        - dateDeleted
      - name: fields[portfolioColumns]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[portfolioCards]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - columnId
        - projectId
      - name: fields[portfolioBoards]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[customfields]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - entity
        - name
        - description
        - type
        - options
        - visibilities
        - isPrivate
        - required
        - createdAt
        - createdByUserId
        - updatedAt
        - updatedByUserId
        - deleted
        - deletedAt
        - deletedByUserId
      - name: fields[customfieldProjects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - customfieldId
        - value
        - createdAt
        - createdBy
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/{projectId}.json:
    get:
      operationId: GET_projects_api_v3_projects_{projectId}.json
      tags:
      - Projects
      summary: Returns a project
      description: |-
        On this endpoint you can filter by project custom fields. The syntax for the
        query parameter is the following:

            projectCustomField[id][op]=value

        Where:
          - [id] is the custom field ID
          - [op] is the operator to apply when filtering, different operators are
            allowed according to the custom field type
          - [value] is the value to apply when filtering

        For example, if I want to filter a dropdown custom field with ID 10 to only
        return entries that have the value "Option1" we would do the following:

            projectCustomField[10][eq]=Option1

        The allowed operators are:
          - like
          - not-like
          - eq
          - not
          - lt
          - gt
          - any
      produces:
      - application/json
      parameters:
      - name: updatedAfter
        in: query
        description: updated after
        type: string
        format: date-time
      - name: searchTerm
        in: query
        description: filter by project name
        type: string
      - name: reportType
        in: query
        description: define the format of the report
        type: string
        enum:
        - project
        - health
        default: project
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
        enum:
        - csv
        - html
        - pdf
        - xls
        default: pdf
      - name: projectType
        in: query
        description: filter by project type
        type: string
      - name: projectStatuses
        in: query
        description: filter by project status
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - companyname
        - datecreated
        - duedate
        - lastactivity
        - name
        - namecaseinsensitive
        - ownercompany
        - starred
        default: name
      - name: minLastActivityDate
        in: query
        description: filter by min last activity date
        type: string
        format: date
      - name: maxLastActivityDate
        in: query
        description: filter by max last activity date
        type: string
        format: date
      - name: userId
        in: query
        description: filter by user id
        type: integer
      - name: projectId
        in: path
        type: integer
        required: true
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: pageSize
        in: query
        description: number of items in a page (not used when generating reports)
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number (not used when generating reports)
        type: integer
        default: "1"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyProjectsWithExplicitMembership
        in: query
        description: only show projects with explicit membership
        type: boolean
        default: "false"
      - name: onlyArchivedProjects
        in: query
        description: return only archived projects
        type: boolean
        default: "false"
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
        default: "false"
      - name: includeProjectUserInfo
        in: query
        description: fetch user-specific data such as isStarred
        type: boolean
        default: "false"
      - name: includeCustomFields
        in: query
        description: include custom fields
        type: boolean
        default: "false"
      - name: includeCompletedStatus
        in: query
        description: optional to include completed projects when filtering by project statuses "current,late".
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: hideObservedProjects
        in: query
        description: hide projects where the logged-in user is just an observer
        type: boolean
        default: "false"
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include (not used when generating reports)
        type: array
        items:
          type: string
        enum:
        - projectOwners
        - projectUpdates
        - companies
        - projectCategories
        - portfolioCards
        - portfolioBoards
        - portfolioColumns
        - tags
        - customfields
        - customfieldProjects
        - projectBudgets
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[projectcategories]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[projectUpdates]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - text
        - isActive
        - health
        - color
        - dateCreated
        - deleted
        - deletedDate
        - numLikes
        - reactions
      - name: fields[projectBudgets]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - type
        - status
        - capacityUsed
        - capacity
        - |-
          originatorBudgetId
          isRepeating
        - repeatPeriod
        - repeatUnit
        - repeatsRemaining
        - sequenceNumber
        - |-
          startDateTime
          endDateTime
        - currencyCode
        - timelogType
        - expenseType
        - defaultRate
        - |-
          notificationIds
          createdByUserId
        - dateCreated
        - updatedUserId
        - dateUpdated
        - |-
          completedByUserId
          dateCompleted
        - deletedByUserId
        - dateDeleted
      - name: fields[portfolioColumns]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[portfolioCards]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - columnId
        - projectId
      - name: fields[portfolioBoards]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[customfields]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - entity
        - name
        - description
        - type
        - options
        - visibilities
        - isPrivate
        - required
        - createdAt
        - createdByUserId
        - updatedAt
        - updatedByUserId
        - deleted
        - deletedAt
        - deletedByUserId
      - name: fields[customfieldProjects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - customfieldId
        - value
        - createdAt
        - createdBy
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/project.SingleResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/projects/{projectId}/customfields.json:
    get:
      description: Return all custom field values from a specific project.
      operationId: GET_projects_api_v3_projects_{projectId}_customfields.json
      parameters:
      - description: updated after
        format: date-time
        in: query
        name: updatedAfter
        type: string
      - description: filter by project name
        in: query
        name: searchTerm
        type: string
      - default: project
        description: define the format of the report
        enum:
        - project
        - health
        in: query
        name: reportType
        type: string
      - default: pdf
        description: define the format of the report
        enum:
        - csv
        - html
        - pdf
        - xls
        in: query
        name: reportFormat
        type: string
      - description: filter by project type
        in: query
        name: projectType
        type: string
      - description: filter by project status
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
        in: query
        items: {}
        name: projectStatuses
        type: string
      - default: asc
        description: order mode
        enum:
        - asc
        - desc
        in: query
        name: orderMode
        type: string
      - default: name
        description: order by
        enum:
        - companyname
        - datecreated
        - duedate
        - lastactivity
        - name
        - namecaseinsensitive
        - ownercompany
        - starred
        in: query
        name: orderBy
        type: string
      - description: filter by min last activity date
        format: date
        in: query
        name: minLastActivityDate
        type: string
      - description: filter by max last activity date
        format: date
        in: query
        name: maxLastActivityDate
        type: string
      - description: filter by user id
        in: query
        name: userId
        type: integer
      - in: path
        name: projectId
        required: true
        type: integer
      - description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
        in: query
        items: {}
        name: projectHealths
        type: integer
      - default: "50"
        description: number of items in a page (not used when generating reports)
        in: query
        name: pageSize
        type: integer
      - default: "1"
        description: page number (not used when generating reports)
        in: query
        name: page
        type: integer
      - description: filter by starred projects only
        in: query
        name: onlyStarredProjects
        type: boolean
      - default: "false"
        description: only show projects with explicit membership
        in: query
        name: onlyProjectsWithExplicitMembership
        type: boolean
      - default: "false"
        description: return only archived projects
        in: query
        name: onlyArchivedProjects
        type: boolean
      - description: match all project tags
        in: query
        name: matchAllProjectTags
        type: boolean
      - default: "false"
        description: generate a report document
        in: query
        name: isReportDownload
        type: boolean
      - default: "false"
        description: fetch user-specific data such as isStarred
        in: query
        name: includeProjectUserInfo
        type: boolean
      - default: "false"
        description: include custom fields
        in: query
        name: includeCustomFields
        type: boolean
      - description: optional to include completed projects when filtering by project statuses "current,late".
        in: query
        name: includeCompletedStatus
        type: boolean
      - default: "false"
        description: include archived projects
        in: query
        name: includeArchivedProjects
        type: boolean
      - default: "false"
        description: hide projects where the logged-in user is just an observer
        in: query
        name: hideObservedProjects
        type: boolean
      - description: filter by project tag ids
        in: query
        items:
          type: integer
        name: projectTagIds
        type: array
      - description: filter by project owner ids
        in: query
        items:
          type: integer
        name: projectOwnerIds
        type: array
      - description: filter by project ids
        in: query
        items:
          type: integer
        name: projectIds
        type: array
      - description: filter by company ids
        in: query
        items:
          type: integer
        name: projectCompanyIds
        type: array
      - description: filter by project category ids
        in: query
        items:
          type: integer
        name: projectCategoryIds
        type: array
      - description: include (not used when generating reports)
        enum:
        - projectOwners
        - projectUpdates
        - companies
        - projectCategories
        - portfolioCards
        - portfolioBoards
        - portfolioColumns
        - tags
        - customfields
        - customfieldProjects
        - projectBudgets
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
        in: query
        items:
          type: string
        name: fields[users]
        type: array
      - enum:
        - id
        - name
        - color
        - count
        in: query
        items:
          type: string
        name: fields[tags]
        type: array
      - enum:
        - id
        - name
        in: query
        items:
          type: string
        name: fields[projects]
        type: array
      - enum:
        - id
        - name
        - color
        in: query
        items:
          type: string
        name: fields[projectcategories]
        type: array
      - enum:
        - id
        - projectId
        - text
        - isActive
        - health
        - color
        - dateCreated
        - deleted
        - deletedDate
        - numLikes
        - reactions
        in: query
        items:
          type: string
        name: fields[projectUpdates]
        type: array
      - enum:
        - id
        - projectId
        - type
        - status
        - capacityUsed
        - capacity
        - |-
          originatorBudgetId
          isRepeating
        - repeatPeriod
        - repeatUnit
        - repeatsRemaining
        - sequenceNumber
        - |-
          startDateTime
          endDateTime
        - currencyCode
        - timelogType
        - expenseType
        - defaultRate
        - |-
          notificationIds
          createdByUserId
        - dateCreated
        - updatedUserId
        - dateUpdated
        - |-
          completedByUserId
          dateCompleted
        - deletedByUserId
        - dateDeleted
        in: query
        items:
          type: string
        name: fields[projectBudgets]
        type: array
      - enum:
        - id
        - name
        - color
        in: query
        items:
          type: string
        name: fields[portfolioColumns]
        type: array
      - enum:
        - id
        - columnId
        - projectId
        in: query
        items:
          type: string
        name: fields[portfolioCards]
        type: array
      - enum:
        - id
        - name
        - color
        in: query
        items:
          type: string
        name: fields[portfolioBoards]
        type: array
      - enum:
        - id
        - projectId
        - entity
        - name
        - description
        - type
        - options
        - visibilities
        - isPrivate
        - required
        - createdAt
        - createdByUserId
        - updatedAt
        - updatedByUserId
        - deleted
        - deletedAt
        - deletedByUserId
        in: query
        items:
          type: string
        name: fields[customfields]
        type: array
      - enum:
        - id
        - customfieldId
        - value
        - createdAt
        - createdBy
        in: query
        items:
          type: string
        name: fields[customfieldProjects]
        type: array
      - enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
        in: query
        items:
          type: string
        name: fields[companies]
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/project.CustomFieldProjectsResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Project custom field values.
      tags:
      - CustomFields
      x-private: true
    post:
      consumes:
      - application/json
      description: Add a project custom field value.
      operationId: POST_projects_api_v3_projects_{projectId}_customfields.json
      parameters:
      - in: body
        name: project.Request
        required: true
        schema:
          $ref: '#/definitions/project.Request'
      - in: path
        name: projectId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: 201 Created
          schema:
            $ref: '#/definitions/project.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Add project custom field value.
      tags:
      - CustomFields
      x-private: true
  /projects/api/v3/projects/{projectId}/customfields/{customFieldId}.json:
    get:
      description: Return a specific custom field value from a project.
      operationId: GET_projects_api_v3_projects_{projectId}_customfields_{customFieldId}.json
      parameters:
      - in: path
        name: projectId
        required: true
        type: integer
      - in: path
        name: customFieldId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/project.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Project custom field value.
      tags:
      - CustomFields
      x-private: true
    patch:
      consumes:
      - application/json
      description: Edit a project custom field value.
      operationId: PATCH_projects_api_v3_projects_{projectId}_customfields_{customFieldId}.json
      parameters:
      - in: body
        name: project.Request
        required: true
        schema:
          $ref: '#/definitions/project.Request'
      - in: path
        name: projectId
        required: true
        type: integer
      - in: path
        name: customFieldId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/project.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
        "409":
          description: 409 Conflict
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update an existing project custom field value.
      tags:
      - CustomFields
      x-private: true
    delete:
      description: Removes a project custom field value.
      operationId: DELETE_projects_api_v3_projects_{projectId}_customfields_{customFieldId}.json
      parameters:
      - in: path
        name: projectId
        required: true
        type: integer
      - in: path
        name: customFieldId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: 204 No Content (no data)
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Delete an existing project custom field value.
      tags:
      - CustomFields
      x-private: true
  /projects/api/v3/projects/{projectId}/customfields/bulk/delete.json:
    post:
      consumes:
      - application/json
      description: Remove many entries of project custom field values at once.
      operationId: POST_projects_api_v3_projects_{projectId}_customfields_bulk_delete.json
      parameters:
      - in: body
        name: project.BulkDeleteRequest
        required: true
        schema:
          $ref: '#/definitions/project.BulkDeleteRequest'
      - in: path
        name: projectId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: 204 No Content (no data)
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Delete many project custom fields values at once.
      tags:
      - CustomFields
      x-private: true
  /projects/api/v3/projects/{projectId}/customfields/bulk/update.json:
    post:
      consumes:
      - application/json
      description: Edit many entries of project custom field values at once.
      operationId: POST_projects_api_v3_projects_{projectId}_customfields_bulk_update.json
      parameters:
      - in: body
        name: project.BulkUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/project.BulkUpdateRequest'
      - in: path
        name: projectId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/project.CustomFieldProjectsResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
        "409":
          description: 409 Conflict
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update many project custom field values at once.
      tags:
      - CustomFields
      x-private: true
  /projects/api/v3/projects/{projectId}/featuresorder.json:
    get:
      operationId: GET_projects_api_v3_projects_{projectId}_featuresorder.json
      tags:
      - Projects
      summary: Returns a project features order to display in tab
      produces:
      - application/json
      parameters:
      - name: projectId
        in: path
        type: integer
        required: true
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/project.FeatureOrderResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
    put:
      operationId: PUT_projects_api_v3_projects_{projectId}_featuresorder.json
      tags:
      - Projects
      summary: Sets the the features order to display in tab
      description: |-
        Each field must have an index, from 0 to numFeatures -1
        without repeated numbers to provide the order
        to display the features
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: project.FeatureOrder
        in: body
        required: true
        schema:
          $ref: '#/definitions/project.FeatureOrder'
      - name: projectId
        in: path
        type: integer
        required: true
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/project.FeatureOrderResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/{projectId}/files/usage.json:
    get:
      description: Retrieves all file space used on account for a specific project.
      operationId: GET_projects_api_v3_projects_{projectId}_files_usage.json
      parameters:
      - description: filter by a specific project
        in: query
        name: projectId
        type: integer
      - in: path
        name: projectId
        required: true
        type: integer
      - description: include
        enum:
        - projects
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - name
        in: query
        items:
          type: string
        name: fields[projects]
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/file.UsageResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Retrieve file usage on a project
      tags:
      - Files
      x-private: true
  /projects/api/v3/projects/{projectId}/latestactivity:
    get:
      operationId: GET_projects_api_v3_projects_{projectId}_latestactivity
      tags:
      - Activity
      summary: List latest activity for a specific project.
      description: |-
        Lists the latest activity for a specific project. When you access a project
        you will see all the recent activity. This corresponds to that view in
        Teamwork. There is some parameters you can send in to filter your results.
      produces:
      - application/json
      parameters:
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: startDate
        in: query
        description: filter by start datetime
        type: string
        format: date-time
      - name: sort
        in: query
        description: sort by
        type: string
      - name: projectStatuses
        in: query
        description: list of project status
        type: string
        items: {}
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
      - name: endDate
        in: query
        description: filter by end datetime
        type: string
        format: date-time
      - name: activityTypes
        in: query
        description: filter by activity types
        type: string
        items: {}
        enum:
        - task
        - tasklist
        - project
        - message
        - notebook
        - milestone
        - like
        - file
        - link
        - billinginvoice
        - task_comment
        - milestone_comment
        - file_comment
        - link_comment
        - comment
      - name: projectId
        in: query
        description: filter by project id
        type: integer
      - name: projectId
        in: path
        type: integer
        required: true
      - name: projectHealths
        in: query
        description: list of project health
        type: integer
        items: {}
      - name: pageSize
        in: query
        description: |-
          number of items in a page
          default: 50
        type: integer
      - name: page
        in: query
        description: |-
          page number
          default: 1
        type: integer
      - name: maxId
        in: query
        description: activity id offset
        type: integer
      - name: catchupFromId
        in: query
        description: limit results from previous id
        type: integer
      - name: showDeleted
        in: query
        description: |-
          include deleted items
          default: false
        type: boolean
      - name: onlyStarredProjects
        in: query
        description: |-
          filter by starred projects only
          default: false
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: enforce all tag ids must be matched
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
      - name: groupCommentActivityType
        in: query
        description: group all activities on comments
        type: boolean
      - name: userIds
        in: query
        description: filter by user id
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - users
        - companies
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      - name: fields[activities]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - dateTime
        - activityType
        - latestActivityType
        - itemId
        - itemLink
        - itemType
        - itemDescription
        - itemExtraDescription
        - itemExtraLink
        - itemPublicInfo
        - forUserId
        - forUserName
        - dueDate
        - isPrivate
        - lockdownId
        - projectId
        - companyId
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/activity.ActivitiesResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/{projectId}/milestones.json:
    get:
      operationId: GET_projects_api_v3_projects_{projectId}_milestones.json
      tags:
      - Milestones
      summary: Get milestones in a project
      description: |-
        This lets you query the list of milestones for a project. You can use the
        provided filters to return only those milestones that are incomplete,
        completed, upcoming or late. This call uses pagination, returning 100
        milestones per page by default.
      produces:
      - application/json
      parameters:
      - name: updatedAfterDate
        in: query
        description: filter by updated after date (deprecated, use updatedAfter)
        type: string
        format: date-time
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: status
        in: query
        description: filter by list of milestone status
        type: string
        items: {}
        enum:
        - all
        - new
        - reopened
        - completed
        - deleted
        - pending
        - incomplete
        - late
        - today
        - upcoming
      - name: searchTerm
        in: query
        description: filter by milestone name and description
        type: string
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: projectStatuses
        in: query
        description: filter by list of project status
        type: string
        items: {}
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - date
        - dateonly
        - name
        - project
        - user
        - dateCreated
        - dateUpdated
        default: date
      - name: dueBeforeDate
        in: query
        description: filter by due before date (deprecated, use dueBefore)
        type: string
        format: date
      - name: dueBefore
        in: query
        description: filter by due before date
        type: string
        format: date
      - name: dueAfterDate
        in: query
        description: filter by due after date (deprecated, use dueAfter)
        type: string
        format: date
      - name: dueAfter
        in: query
        description: filter by due after date
        type: string
        format: date
      - name: projectId
        in: path
        type: integer
        required: true
      - name: projectHealths
        in: query
        description: filter by list of project health
        type: integer
        items: {}
      - name: projectHealth
        in: query
        description: filter by list of project health (deprecated, use projectHealths)
        type: integer
        items: {}
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: showPrivate
        in: query
        description: show private milestones
        type: boolean
        default: "true"
      - name: showPercentageCompleted
        in: query
        description: show percentages completed
        type: boolean
      - name: showDeleted
        in: query
        description: include deleted items
        type: boolean
        default: "false"
      - name: showAttachedTasklists
        in: query
        description: show attached tasklists
        type: boolean
      - name: searchCompaniesTeams
        in: query
        description: include companies and teams in the search term
        type: boolean
      - name: searchAssignees
        in: query
        description: include assignees in the search
        type: boolean
      - name: progress
        in: query
        description: include progress of each milestone
        type: boolean
        default: "false"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyMyProjects
        in: query
        description: filter by projects that the logged-in user is related
        type: boolean
        default: "false"
      - name: onlyAdminProjects
        in: query
        description: |-
          only include milestones from projects where the user is strictly a project admin.
          site admins have visibility to all projects.
        type: boolean
      - name: matchAllTags
        in: query
        description: match all milestone tags
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeUpdate
        in: query
        description: include milestones latest update action
        type: boolean
      - name: includeToday
        in: query
        description: include today when milestone status is upcoming
        type: boolean
        default: "true"
      - name: includeTeamUserIds
        in: query
        description: include team users to the responsible party ids
        type: boolean
        default: "true"
      - name: includeTags
        in: query
        description: include tags in the reports
        type: boolean
        default: "true"
      - name: includeProgress
        in: query
        description: include percentage of tasks completed for all linked tasklists
        type: boolean
      - name: includeCompleted
        in: query
        description: optional to include completed milestones
        type: boolean
      - name: includeCompanyUserIds
        in: query
        description: include company users to the responsible party ids
        type: boolean
        default: "true"
      - name: includeAssigneeTeams
        in: query
        description: include teams related to the responsible user ids
        type: boolean
      - name: includeAssigneeCompanies
        in: query
        description: include companies related to the responsible user ids
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: emoji
        in: query
        description: convert emoji alias to unicode
        type: boolean
        default: "true"
      - name: countUnreadComments
        in: query
        description: count unread comments
        type: boolean
        default: "false"
      - name: calendar
        in: query
        description: enables the calendar style layout
        type: boolean
        default: "false"
      - name: tagIds
        in: query
        description: filter by milestone tag ids
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - projects.companies
        - users
        - completedBy
        - createdBy
        - deletedBy
        - updatedBy
        - commentFollowers
        - changeFollowers
        - tags
        - tasklists
        - tasklists.tasks
      - name: ids
        in: query
        description: filter by ids
        type: array
        items:
          type: integer
      - name: followerIds
        in: query
        description: filter by followers' ids
        type: array
        items:
          type: integer
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[tasks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
      - name: fields[tasklists]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - projectId
        - milestoneId
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[milestones]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - description
        - deadline
        - completed
        - projectId
        - createdOn
        - lastChangedOn
        - creatorUserId
        - reminder
        - private
        - lockdownId
        - status
        - completedOn
        - completerId
        - percentageComplete
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      - name: creatorIds
        in: query
        description: filter by creators' ids
        type: array
        items:
          type: integer
      - name: assignedToUserIds
        in: query
        description: filter by assigned user ids
        type: array
        items:
          type: integer
      - name: assignedToTeamIds
        in: query
        description: filter by assigned team ids
        type: array
        items:
          type: integer
      - name: assignedToCompanyIds
        in: query
        description: filter by assigned company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/milestone.MilestonesResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/{projectId}/notebooks.json:
    post:
      operationId: POST_projects_api_v3_projects_{projectId}_notebooks.json
      tags:
      - Notebooks
      summary: Create a new notebook.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: notebook.Request
        in: body
        required: true
        schema:
          $ref: '#/definitions/notebook.Request'
      - name: projectId
        in: path
        type: integer
        required: true
      - name: getEmoji
        in: query
        description: parse Emoji's
        type: boolean
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - tags
        - users
        - notebookCategories
        - companies
        - teams
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[teams]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - teamLogo
        - teamLogoIcon
        - teamLogoColor
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[notebooks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - description
        - contents
        - type
        - isPrivate
        - locked
        - lockdownId
        - secureContent
        - projectId
        - createdByUserID
        - updatedByUserID
        - deletedByUserID
        - dateUpdated
        - dateCreated
        - dateDeleted
        - deleted
        - categoryId
        - notebookVersionID
        - notebookVersionCreatedDateTime
        - notebookVersionUpdatedDateTime
        - latestVersionNo
        - commentsCount
        - readCommentsCount
        - contentHTML
        - privacy
        - commentFollowers
        - changeFollowers
        - projectNotifyCommentIncludeCreator
        - tagIds
      - name: fields[notebookCategories]
        in: query
        type: array
        items:
          type: string
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      responses:
        201:
          description: 201 Created
          schema:
            $ref: '#/definitions/notebook.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/{projectId}/risks:
    get:
      operationId: GET_projects_api_v3_projects_{projectId}_risks
      tags:
      - Risks
      summary: Get risks for a specific project
      description: |-
        Return all risks for a specific project. Only filters that the logged-in user
        has access will be returned.
      produces:
      - application/json
      parameters:
      - name: updatedAfterDate
        in: query
        description: filter by risks updated after specified date (deprecated, use updatedAfter)
        type: string
        format: date-time
      - name: updatedAfter
        in: query
        description: filter by risks updated after specified date
        type: string
        format: date-time
      - name: statuses
        in: query
        description: filter by risk statuses
        type: string
        items: {}
        enum:
        - new
        - pending
        - closed
      - name: sortOrder
        in: query
        description: sort order (deprecated, use orderMode)
        type: string
        enum:
        - asc
        - desc
      - name: sort
        in: query
        description: sort by (deprecated, use orderBy)
        type: string
        enum:
        - datecreated
        - source
        - probability
        - impact
        - result
        - project
      - name: searchTerm
        in: query
        description: search term
        type: string
      - name: reportFormat
        in: query
        description: |-
          define the format of the report
          default: pdf
        type: string
      - name: projectStatuses
        in: query
        description: list of project statuses
        type: string
        items: {}
      - name: orderMode
        in: query
        description: sort order
        type: string
        enum:
        - asc
        - desc
      - name: orderBy
        in: query
        description: sort by
        type: string
        enum:
        - datecreated
        - source
        - probability
        - impact
        - result
        - project
      - name: projectId
        in: path
        type: integer
        required: true
      - name: projectHealths
        in: query
        description: list of project health
        type: integer
        items: {}
      - name: probabilityTo
        in: query
        description: filter by probability
        type: integer
      - name: probabilityFrom
        in: query
        description: filter by probability
        type: integer
      - name: pageSize
        in: query
        description: |-
          number of items in a page
          default: 50
        type: integer
      - name: page
        in: query
        description: |-
          page number
          default: 1
        type: integer
      - name: impactTo
        in: query
        description: filter by impact
        type: integer
      - name: impactFrom
        in: query
        description: filter by impact
        type: integer
      - name: showDeleted
        in: query
        description: |-
          include deleted items
          default: false
        type: boolean
      - name: onlyStarredProjects
        in: query
        description: |-
          filter by starred projects only
          default: false
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: enforce all tag ids must be matched
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
      - name: impactSchedule
        in: query
        description: filter by risks that impact schedule
        type: boolean
      - name: impactPerformance
        in: query
        description: filter by risks that impact performance
        type: boolean
      - name: impactCost
        in: query
        description: filter by risks that impact cost
        type: boolean
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - users
        - projects.companies
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[risks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - source
        - probability
        - probabilityValue
        - impact
        - |-
          impactValue
          impactCost
        - impactSchedule
        - impactPerformance
        - createdOn
        - |-
          createdByUserId
          lastChangedOn
        - lastChangedByUserId
        - result
        - mitigationPlan
        - |-
          stats
          projectId
        - deleted
        - canEdit
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/risk.RisksResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/{projectId}/summary.json:
    get:
      operationId: GET_projects_api_v3_projects_{projectId}_summary.json
      tags:
      - Summary
      summary: Get project summary dashboard
      description: |-
        Retrieves the summary from a specific project, returning counters about
        tasks, milestones, columns, events, risks, timers, projects healths.


        On this endpoint you can filter by project custom fields. The syntax for the
        query parameter is the following:

            projectCustomField[id][op]=value

        Where:
          - [id] is the custom field ID
          - [op] is the operator to apply when filtering, different operators are
            allowed according to the custom field type
          - [value] is the value to apply when filtering

        For example, if I want to filter a dropdown custom field with ID 10 to only
        return entries that have the value "Option1" we would do the following:

            projectCustomField[10][eq]=Option1

        The allowed operators are:
          - like
          - not-like
          - eq
          - not
          - lt
          - gt
          - any
      produces:
      - application/json
      parameters:
      - name: until
        in: query
        description: used to limit the since counters to a specific period
        type: string
        enum:
        - now
        - timeRange
      - name: timeRangeStart
        in: query
        description: filter by start datetime
        type: string
        format: date-time
      - name: timeRangeEnd
        in: query
        description: filter by end datetime
        type: string
        format: date-time
      - name: timeRange
        in: query
        description: |-
          filter by time range. It will be ignored if timeRangeStart and timeRangeEnd
          were informed.
        type: string
        enum:
        - yesterday
        - today
        - thisweek
        - lastweek
        - thismonth
        - lastmonth
        - last3months
        - last6months
      - name: status
        in: query
        description: project status (deprecated, use projectStatuses)
        type: string
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: projectStatuses
        in: query
        description: project statuses
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: projectStatus
        in: query
        description: project status
        type: string
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: projectId
        in: path
        type: integer
        required: true
      - name: projectHealths
        in: query
        description: |-
          project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: projectHealth
        in: query
        description: |-
          project health (deprecated, use projectHealths)

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: health
        in: query
        description: |-
          project healths (deprecated, use projectHealths)

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: eventsDaysAhead
        in: query
        description: number of days remaining to event's start
        type: integer
        default: "7"
      - name: useStartDatesForTodaysTasks
        in: query
        description: enforce today is considered as start date for today's tasks
        type: boolean
      - name: unreadMessagesMineOnly
        in: query
        description: filter by my unread messages only
        type: boolean
      - name: unreadCommentsMineOnly
        in: query
        description: filter by my unread comments only
        type: boolean
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyProjectEvents
        in: query
        description: filter only project events
        type: boolean
      - name: matchAllTags
        in: query
        description: enforce all tag ids must be matched (deprecated, use matchAllProjectTags)
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: enforce all tag ids must be matched
        type: boolean
      - name: includeAssigneeTeams
        in: query
        description: include teams related to the taskAssigneeUserIds
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
      - name: eventsAttendingOnly
        in: query
        description: count only events that the users are attending
        type: boolean
      - name: applyTaskAssigneeUsersToSince
        in: query
        description: |-
          the since section will only use taskAssigneeUserIds if this flag is true
          (keeps backward compatibility)
        type: boolean
      - name: applySinceOnUnread
        in: query
        description: when enabled unread counters will respect the time range period.
        type: boolean
        default: "false"
      - name: userIds
        in: query
        description: filter by user ids
        type: array
        items:
          type: integer
      - name: timeLoggedByUserIds
        in: query
        description: filter by user ids who time logged
        type: array
        items:
          type: integer
      - name: taskAssigneeUserIds
        in: query
        description: filter by user ids with tasks assigned
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: milestoneAssigneeUserIds
        in: query
        description: filter by user ids with milestones assigned
        type: array
        items:
          type: integer
      - name: filterTagIds
        in: query
        description: filter by project tag ids (deprecated, use projectTagIds)
        type: array
        items:
          type: integer
      - name: fields[unread]
        in: query
        type: array
        items:
          type: string
        enum:
        - comments
        - messages
      - name: fields[time]
        in: query
        type: array
        items:
          type: string
        enum:
        - mine
        - all
      - name: fields[tasks]
        in: query
        description: sparse fields
        type: array
        items:
          type: string
        enum:
        - everyone
        - mine
      - name: fields[since]
        in: query
        type: array
        items:
          type: string
        enum:
        - tasksComplete
        - tasksCreated
        - events
        - dateTime
      - name: fields[risks]
        in: query
        type: array
        items:
          type: string
        enum:
        - total
        - open
        - pending
        - closed
      - name: fields[milestones]
        in: query
        type: array
        items:
          type: string
        enum:
        - everyone
        - mine
      - name: fields[health]
        in: query
        description: |2-

          0: not set
          1: bad
          2: ok
          3: good
        type: array
        items:
          type: string
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: fields[events]
        in: query
        type: array
        items:
          type: string
        enum:
        - today
        - upcoming
      - name: fields[columns]
        in: query
        type: array
        items:
          type: string
        enum:
        - count
        - data
      - name: companyIds
        in: query
        description: filter by company ids (deprecated, use projectCompanyIds)
        type: array
        items:
          type: integer
      - name: assigneeUserIds
        in: query
        description: filter by user ids with tasks or milestones assigned
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/summary.ProjectResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/{projectId}/tasklists.csv:
    get:
      operationId: GET_projects_api_v3_projects_{projectId}_tasklists.csv
      tags:
      - TaskLists
      summary: Generate tasklist report in CSV format
      description: |-
        Generates a task list report in CSV format containing all tasks for the
        provided filters. Only the tasks that the logged-in user can access will be
        returned.
      produces:
      - application/json
      - text/csv
      parameters:
      - name: taskDate
        in: query
        description: filter by task date
        type: string
        enum:
        - all
        - anytime
        - completed
        - created
        - overdue
        - today
        - yesterday
        - started
        - tomorrow
        - thisweek
        - within7
        - within14
        - within30
        - within365
        - nodate
        - noduedate
        - nostartdate
        - newTaskDefaults
        - hasDate
        default: anytime
      - name: startDate
        in: query
        description: filter by start datetime
        type: string
        format: date-time
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - startdate
        - dateadded
        - priority
        - project
        - flattenedtasklist
        - company
        - manual
        - active
        - completedDatedesc
        - datecompleted
        - duestartdate
        - duestartdatedesc
        - alldates
        - alldatesdesc
        - duedateDESC
        - tasklistname
        - tasklistdisplayorder
        - tasklistid
        - duedate
        - dateupdated
        - taskname
        default: manual
      - name: endDate
        in: query
        description: filter by end datetime
        type: string
        format: date-time
      - name: commentsOrderMode
        in: query
        description: order mode of the comments
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: tasklistId
        in: query
        description: filter by task list
        type: integer
      - name: projectId
        in: query
        description: filter by project
        type: integer
      - name: projectId
        in: path
        type: integer
        required: true
      - name: onlyCompletedTasks
        in: query
        description: only completed tasks
        type: boolean
        default: "false"
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeTime
        in: query
        description: include time
        type: boolean
      - name: includeTags
        in: query
        description: include tags
        type: boolean
        default: "true"
      - name: includePrivateItems
        in: query
        description: include private items
        type: boolean
        default: "true"
      - name: includeLateTasks
        in: query
        description: include late tasks
        type: boolean
      - name: includeEstimatedTime
        in: query
        description: include estimated time
        type: boolean
        default: "true"
      - name: includeCustomFields
        in: query
        description: include custom fields
        type: boolean
        default: "false"
      - name: includeCompletedTasks
        in: query
        description: include completed tasks
        type: boolean
        default: "true"
      - name: includeComments
        in: query
        description: include comments
        type: boolean
        default: "false"
      - name: includeCommentAvatars
        in: query
        description: include comment avatars
        type: boolean
      - name: includeColumns
        in: query
        description: include columns
        type: boolean
        default: "true"
      - name: includeAnytimeTasks
        in: query
        description: include anytime tasks
        type: boolean
      - name: includeAllComments
        in: query
        description: include all comments
        type: boolean
        default: "false"
      - name: ignoreStartDates
        in: query
        description: ignore task start dates
        type: boolean
      - name: groupByTasklists
        in: query
        description: group by task lists
        type: boolean
      - name: tags
        in: query
        description: filter by tag names
        type: array
        items:
          type: string
      - name: tagIds
        in: query
        description: filter by tag ids
        type: array
        items:
          type: integer
      - name: assignedToUserIds
        in: query
        description: filter by assigned user ids
        type: array
        items:
          type: integer
      - name: assignedToTeamIds
        in: query
        description: filter by assigned team ids
        type: array
        items:
          type: integer
      - name: assignedToCompanyIds
        in: query
        description: filter by assigned company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/{projectId}/tasklists.html:
    get:
      operationId: GET_projects_api_v3_projects_{projectId}_tasklists.html
      tags:
      - TaskLists
      summary: Generate tasklist report in HTML format
      description: |-
        Generates a task list report in HTML format containing all tasks for the
        provided filters. Only the tasks that the logged-in user can access will be
        returned.
      produces:
      - application/json
      - text/html
      parameters:
      - name: taskDate
        in: query
        description: filter by task date
        type: string
        enum:
        - all
        - anytime
        - completed
        - created
        - overdue
        - today
        - yesterday
        - started
        - tomorrow
        - thisweek
        - within7
        - within14
        - within30
        - within365
        - nodate
        - noduedate
        - nostartdate
        - newTaskDefaults
        - hasDate
        default: anytime
      - name: startDate
        in: query
        description: filter by start datetime
        type: string
        format: date-time
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - startdate
        - dateadded
        - priority
        - project
        - flattenedtasklist
        - company
        - manual
        - active
        - completedDatedesc
        - datecompleted
        - duestartdate
        - duestartdatedesc
        - alldates
        - alldatesdesc
        - duedateDESC
        - tasklistname
        - tasklistdisplayorder
        - tasklistid
        - duedate
        - dateupdated
        - taskname
        default: manual
      - name: endDate
        in: query
        description: filter by end datetime
        type: string
        format: date-time
      - name: commentsOrderMode
        in: query
        description: order mode of the comments
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: tasklistId
        in: query
        description: filter by task list
        type: integer
      - name: projectId
        in: query
        description: filter by project
        type: integer
      - name: projectId
        in: path
        type: integer
        required: true
      - name: onlyCompletedTasks
        in: query
        description: only completed tasks
        type: boolean
        default: "false"
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeTime
        in: query
        description: include time
        type: boolean
      - name: includeTags
        in: query
        description: include tags
        type: boolean
        default: "true"
      - name: includePrivateItems
        in: query
        description: include private items
        type: boolean
        default: "true"
      - name: includeLateTasks
        in: query
        description: include late tasks
        type: boolean
      - name: includeEstimatedTime
        in: query
        description: include estimated time
        type: boolean
        default: "true"
      - name: includeCustomFields
        in: query
        description: include custom fields
        type: boolean
        default: "false"
      - name: includeCompletedTasks
        in: query
        description: include completed tasks
        type: boolean
        default: "true"
      - name: includeComments
        in: query
        description: include comments
        type: boolean
        default: "false"
      - name: includeCommentAvatars
        in: query
        description: include comment avatars
        type: boolean
      - name: includeColumns
        in: query
        description: include columns
        type: boolean
        default: "true"
      - name: includeAnytimeTasks
        in: query
        description: include anytime tasks
        type: boolean
      - name: includeAllComments
        in: query
        description: include all comments
        type: boolean
        default: "false"
      - name: ignoreStartDates
        in: query
        description: ignore task start dates
        type: boolean
      - name: groupByTasklists
        in: query
        description: group by task lists
        type: boolean
      - name: tags
        in: query
        description: filter by tag names
        type: array
        items:
          type: string
      - name: tagIds
        in: query
        description: filter by tag ids
        type: array
        items:
          type: integer
      - name: assignedToUserIds
        in: query
        description: filter by assigned user ids
        type: array
        items:
          type: integer
      - name: assignedToTeamIds
        in: query
        description: filter by assigned team ids
        type: array
        items:
          type: integer
      - name: assignedToCompanyIds
        in: query
        description: filter by assigned company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/{projectId}/tasklists.pdf:
    get:
      operationId: GET_projects_api_v3_projects_{projectId}_tasklists.pdf
      tags:
      - TaskLists
      summary: Generate tasklist report in PDF format
      description: |-
        Generates a task list report in PDF format containing all tasks for the
        provided filters. Only the tasks that the logged-in user can access will be
        returned.
      produces:
      - application/json
      - application/pdf
      parameters:
      - name: taskDate
        in: query
        description: filter by task date
        type: string
        enum:
        - all
        - anytime
        - completed
        - created
        - overdue
        - today
        - yesterday
        - started
        - tomorrow
        - thisweek
        - within7
        - within14
        - within30
        - within365
        - nodate
        - noduedate
        - nostartdate
        - newTaskDefaults
        - hasDate
        default: anytime
      - name: startDate
        in: query
        description: filter by start datetime
        type: string
        format: date-time
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - startdate
        - dateadded
        - priority
        - project
        - flattenedtasklist
        - company
        - manual
        - active
        - completedDatedesc
        - datecompleted
        - duestartdate
        - duestartdatedesc
        - alldates
        - alldatesdesc
        - duedateDESC
        - tasklistname
        - tasklistdisplayorder
        - tasklistid
        - duedate
        - dateupdated
        - taskname
        default: manual
      - name: endDate
        in: query
        description: filter by end datetime
        type: string
        format: date-time
      - name: commentsOrderMode
        in: query
        description: order mode of the comments
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: tasklistId
        in: query
        description: filter by task list
        type: integer
      - name: projectId
        in: query
        description: filter by project
        type: integer
      - name: projectId
        in: path
        type: integer
        required: true
      - name: onlyCompletedTasks
        in: query
        description: only completed tasks
        type: boolean
        default: "false"
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeTime
        in: query
        description: include time
        type: boolean
      - name: includeTags
        in: query
        description: include tags
        type: boolean
        default: "true"
      - name: includePrivateItems
        in: query
        description: include private items
        type: boolean
        default: "true"
      - name: includeLateTasks
        in: query
        description: include late tasks
        type: boolean
      - name: includeEstimatedTime
        in: query
        description: include estimated time
        type: boolean
        default: "true"
      - name: includeCustomFields
        in: query
        description: include custom fields
        type: boolean
        default: "false"
      - name: includeCompletedTasks
        in: query
        description: include completed tasks
        type: boolean
        default: "true"
      - name: includeComments
        in: query
        description: include comments
        type: boolean
        default: "false"
      - name: includeCommentAvatars
        in: query
        description: include comment avatars
        type: boolean
      - name: includeColumns
        in: query
        description: include columns
        type: boolean
        default: "true"
      - name: includeAnytimeTasks
        in: query
        description: include anytime tasks
        type: boolean
      - name: includeAllComments
        in: query
        description: include all comments
        type: boolean
        default: "false"
      - name: ignoreStartDates
        in: query
        description: ignore task start dates
        type: boolean
      - name: groupByTasklists
        in: query
        description: group by task lists
        type: boolean
      - name: tags
        in: query
        description: filter by tag names
        type: array
        items:
          type: string
      - name: tagIds
        in: query
        description: filter by tag ids
        type: array
        items:
          type: integer
      - name: assignedToUserIds
        in: query
        description: filter by assigned user ids
        type: array
        items:
          type: integer
      - name: assignedToTeamIds
        in: query
        description: filter by assigned team ids
        type: array
        items:
          type: integer
      - name: assignedToCompanyIds
        in: query
        description: filter by assigned company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/{projectId}/tasklists.xlsx:
    get:
      operationId: GET_projects_api_v3_projects_{projectId}_tasklists.xlsx
      tags:
      - TaskLists
      summary: Generate tasklist report in XLSX format
      description: |-
        Generates a task list report in XLSX format containing all tasks for the
        provided filters. Only the tasks that the logged-in user can access will be
        returned.
      produces:
      - application/json
      - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
      parameters:
      - name: taskDate
        in: query
        description: filter by task date
        type: string
        enum:
        - all
        - anytime
        - completed
        - created
        - overdue
        - today
        - yesterday
        - started
        - tomorrow
        - thisweek
        - within7
        - within14
        - within30
        - within365
        - nodate
        - noduedate
        - nostartdate
        - newTaskDefaults
        - hasDate
        default: anytime
      - name: startDate
        in: query
        description: filter by start datetime
        type: string
        format: date-time
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - startdate
        - dateadded
        - priority
        - project
        - flattenedtasklist
        - company
        - manual
        - active
        - completedDatedesc
        - datecompleted
        - duestartdate
        - duestartdatedesc
        - alldates
        - alldatesdesc
        - duedateDESC
        - tasklistname
        - tasklistdisplayorder
        - tasklistid
        - duedate
        - dateupdated
        - taskname
        default: manual
      - name: endDate
        in: query
        description: filter by end datetime
        type: string
        format: date-time
      - name: commentsOrderMode
        in: query
        description: order mode of the comments
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: tasklistId
        in: query
        description: filter by task list
        type: integer
      - name: projectId
        in: query
        description: filter by project
        type: integer
      - name: projectId
        in: path
        type: integer
        required: true
      - name: onlyCompletedTasks
        in: query
        description: only completed tasks
        type: boolean
        default: "false"
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeTime
        in: query
        description: include time
        type: boolean
      - name: includeTags
        in: query
        description: include tags
        type: boolean
        default: "true"
      - name: includePrivateItems
        in: query
        description: include private items
        type: boolean
        default: "true"
      - name: includeLateTasks
        in: query
        description: include late tasks
        type: boolean
      - name: includeEstimatedTime
        in: query
        description: include estimated time
        type: boolean
        default: "true"
      - name: includeCustomFields
        in: query
        description: include custom fields
        type: boolean
        default: "false"
      - name: includeCompletedTasks
        in: query
        description: include completed tasks
        type: boolean
        default: "true"
      - name: includeComments
        in: query
        description: include comments
        type: boolean
        default: "false"
      - name: includeCommentAvatars
        in: query
        description: include comment avatars
        type: boolean
      - name: includeColumns
        in: query
        description: include columns
        type: boolean
        default: "true"
      - name: includeAnytimeTasks
        in: query
        description: include anytime tasks
        type: boolean
      - name: includeAllComments
        in: query
        description: include all comments
        type: boolean
        default: "false"
      - name: ignoreStartDates
        in: query
        description: ignore task start dates
        type: boolean
      - name: groupByTasklists
        in: query
        description: group by task lists
        type: boolean
      - name: tags
        in: query
        description: filter by tag names
        type: array
        items:
          type: string
      - name: tagIds
        in: query
        description: filter by tag ids
        type: array
        items:
          type: integer
      - name: assignedToUserIds
        in: query
        description: filter by assigned user ids
        type: array
        items:
          type: integer
      - name: assignedToTeamIds
        in: query
        description: filter by assigned team ids
        type: array
        items:
          type: integer
      - name: assignedToCompanyIds
        in: query
        description: filter by assigned company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/{projectId}/time.json:
    get:
      operationId: GET_projects_api_v3_projects_{projectId}_time.json
      tags:
      - TimeTracking
      summary: Get time entries for a specific project
      description: |-
        Return logged time entries for a specific project. Only the time entries that
        the logged-in user can access will be returned.
      produces:
      - application/json
      parameters:
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: startDate
        in: query
        description: filter by a starting date
        type: string
        format: date
      - name: selectedColumns
        in: query
        description: customise the report by selecting columns
        type: string
        items: {}
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: projectStatuses
        in: query
        description: filter by project statuses
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: sort order
        type: string
        enum:
        - company
        - date
        - dateupdated
        - project
        - task
        - tasklist
        - user
        default: date
      - name: invoicedType
        in: query
        description: filter by invoiced type
        type: string
        enum:
        - all
        - invoiced
        - not-invoiced
        default: all
      - name: endDate
        in: query
        description: filter by an ending date
        type: string
        format: date
      - name: billableType
        in: query
        description: filter by billable type
        type: string
        enum:
        - all
        - billable
        - non-billable
        default: all
      - name: ticketId
        in: query
        description: filter by ticket id
        type: integer
      - name: tasklistId
        in: query
        description: filter by tasklist id
        type: integer
      - name: projectId
        in: path
        type: integer
        required: true
      - name: projectId
        in: query
        description: filter by project id
        type: integer
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: allocationId
        in: query
        description: filter by allocation id
        type: integer
      - name: showDeleted
        in: query
        description: include deleted items
        type: boolean
        default: "false"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllTags
        in: query
        description: match all tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: taskTagIds
        in: query
        description: filter by task tag ids
        type: array
        items:
          type: integer
      - name: tagIds
        in: query
        description: filter by tag ids
        type: array
        items:
          type: integer
      - name: projectsFromCompanyId
        in: query
        description: filter by project company ids
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - tags
        - tasks
        - tasks.parentTasks
        - tasks.tasklists
        - users
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[timelogs]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - dateCreated
        - minutes
        - description
        - timeLogged
        - billable
        - deleted
        - dateDeleted
        - hasStartTime
        - dateEdited
        - deskTicketId
        - invoiceNumber
        - userId
        - taskId
        - projectId
        - loggedByUserId
        - deletedByUserId
        - editedByUserId
        - taskIdPreMove
        - projectBillingInvoiceId
      - name: fields[tasks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
      - name: fields[tasklists]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - projectId
        - milestoneId
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: companyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: assignedToUserIds
        in: query
        description: filter by assigned user ids
        type: array
        items:
          type: integer
      - name: assignedToTeamIds
        in: query
        description: filter by assigned team ids
        type: array
        items:
          type: integer
      - name: assignedToCompanyIds
        in: query
        description: filter by assigned company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/timelog.TimelogsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/{projectId}/time/total.json:
    get:
      operationId: GET_projects_api_v3_projects_{projectId}_time_total.json
      tags:
      - TimeTracking
      summary: Get timelog totals.
      produces:
      - application/json
      parameters:
      - name: projectStatuses
        in: query
        description: filter by project statuses
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: userId
        in: query
        description: filter by user id
        type: integer
      - name: tasklistId
        in: query
        description: filter by tasklist id
        type: integer
      - name: taskId
        in: query
        description: filter by task id
        type: integer
      - name: projectId
        in: query
        description: filter by project id
        type: integer
      - name: projectId
        in: path
        type: integer
        required: true
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: deskTicketId
        in: query
        description: filter by desk ticket id
        type: integer
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllTags
        in: query
        description: match all tags
        type: boolean
      - name: userIds
        in: query
        description: filter by user ids
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by project company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: companyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/timelog.TotalsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/{projectIds}/updates.json:
    get:
      operationId: GET_projects_api_v3_projects_{projectIds}_updates.json
      tags:
      - ProjectUpdates
      summary: Get all updates from a specific project
      description: Return the updates from a specific project.
      produces:
      - application/json
      parameters:
      - name: projectStatuses
        in: query
        description: list of project status
        type: string
        items: {}
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - date
        - color
        - health
        - project
        - user
        default: date
      - name: createdAfter
        in: query
        description: filter by creation date
        type: string
        format: date-time
      - name: projectIds
        in: path
        type: integer
        required: true
      - name: projectId
        in: query
        description: filter by project id
        type: integer
      - name: projectHealths
        in: query
        description: filter by project health
        type: integer
        items: {}
      - name: projectHealth
        in: query
        description: filter by project health (deprecated, use projectHealths)
        type: integer
        items: {}
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: showDeleted
        in: query
        description: include deleted items
        type: boolean
        default: "false"
      - name: reactions
        in: query
        description: add reactions to the response
        type: boolean
        default: "false"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
      - name: emoji
        in: query
        description: parse emojis to unicode
        type: boolean
        default: "true"
      - name: activeOnly
        in: query
        description: filter by active
        type: boolean
        default: "true"
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - createdBy
        - deletedBy
        - likes.users
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[projectUpdates]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - text
        - isActive
        - health
        - color
        - dateCreated
        - deleted
        - deletedDate
        - numLikes
        - reactions
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/update.ProjectUpdatesResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/budgets/usages.json:
    get:
      operationId: GET_projects_api_v3_projects_budgets_usages.json
      tags:
      - Budgets
      summary: Get the budgets usages for a set of projects
      description: |-
        Gets the budget used capacity for a set of projects,
        with the daily timeline of capacity usage.
      produces:
      - application/json
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/budget.ProjectBudgetsUsagesResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/projects/featuresorder.json:
    put:
      operationId: PUT_projects_api_v3_projects_featuresorder.json
      tags:
      - Projects
      summary: Sets the default features order to display in tab
      description: |-
        Each field must have an index, from 0 to numFeatures -1
        without repeated numbers to provide the order
        to display the features
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: project.FeatureOrderDefaults
        in: body
        required: true
        schema:
          $ref: '#/definitions/project.FeatureOrderDefaults'
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/project.FeatureOrderResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/metrics/active.json:
    get:
      operationId: GET_projects_api_v3_projects_metrics_active.json
      tags:
      - Projects
      summary: Get the total count of active projects
      description: Return the number of active projects that the logged-in user can access.
      produces:
      - application/json
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/active.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/projects/metrics/billable.json:
    get:
      operationId: GET_projects_api_v3_projects_metrics_billable.json
      tags:
      - Projects
      summary: Get the total billable time per project
      description: |-
        Returns the total billable time of all projects that the logged-in user has
        access.
      produces:
      - application/json
      parameters:
      - name: startDate
        in: query
        type: string
        format: date
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: desc
      - name: endDate
        in: query
        type: string
        format: date
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/billable.ProjectMetricBillablesResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/metrics/healths.json:
    get:
      operationId: GET_projects_api_v3_projects_metrics_healths.json
      tags:
      - Projects
      summary: Get a health summary for all projects
      description: |-
        Return the number of projects on each health category. It will only count the
        projects that the logged-in user can access.
      produces:
      - application/json
      parameters:
      - name: projectStatuses
        in: query
        description: filter by project statuses
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: projectHealths
        in: query
        description: |-
          project health

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/health.ProjectMetricHealthsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/metrics/invoice.json:
    get:
      operationId: GET_projects_api_v3_projects_metrics_invoice.json
      tags:
      - Projects
      summary: Return open invoices across all projects
      description: |-
        Count the number of open invoices on all projects that the logged-in user has
        access.
      produces:
      - application/json
      parameters:
      - name: projectStatuses
        in: query
        description: project status
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: projectHealths
        in: query
        description: |-
          project health

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/invoice.ProjectMetricInvoicesResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/metrics/owners.json:
    get:
      operationId: GET_projects_api_v3_projects_metrics_owners.json
      tags:
      - Projects
      summary: Get number of owned and un-assigned projects
      description: Count the number of projects per project owner user.
      produces:
      - application/json
      parameters:
      - name: projectStatuses
        in: query
        description: project status
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: orderMode
        in: query
        description: sort order
        type: string
        enum:
        - asc
        - desc
        default: desc
      - name: projectHealths
        in: query
        description: |-
          project health

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/owner.ProjectMetricOwnersResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/metrics/unbilled.json:
    get:
      operationId: GET_projects_api_v3_projects_metrics_unbilled.json
      tags:
      - Projects
      summary: Return un-billed expenses across all projects
      description: |-
        Return the un-billed expenses for each project that the logged-in user has
        access.
      produces:
      - application/json
      parameters:
      - name: projectStatuses
        in: query
        description: project status
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: projectHealths
        in: query
        description: |-
          project health

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/unbilled.ProjectMetricUnbilledResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/teamwork/categories.json:
    get:
      operationId: GET_projects_api_v3_projects_teamwork_categories.json
      tags:
      - Categories
      summary: Returns a list of teamwork project categories
      produces:
      - application/json
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/category.CategoriesResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/teamwork/samples.json:
    get:
      operationId: GET_projects_api_v3_projects_teamwork_samples.json
      tags:
      - Projects
      summary: Returns a list of teamwork sample projects
      description: Retrieve all sample projects for the provided filters.
      produces:
      - application/json
      parameters:
      - name: searchTerm
        in: query
        description: filter by project name
        type: string
      - name: pageSize
        in: query
        description: number of items in a page (not used when generating reports)
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number (not used when generating reports)
        type: integer
        default: "1"
      - name: ids
        in: query
        description: filter by sample ids
        type: array
        items:
          type: integer
      - name: fields[sampleprojects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - code
        - description
        - icon
        - imagePreview
        - categoryId
        - content
      - name: categoryIds
        in: query
        description: filter by category ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/project.SampleProjectsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/templates.json:
    get:
      operationId: GET_projects_api_v3_projects_templates.json
      tags:
      - Projects
      summary: Returns a list of projects templates
      description: |-
        Retrieve all projects templates for the provided filters. Only the projects templates that the
        logged-in user can access will be returned.


        On this endpoint you can filter by project custom fields. The syntax for the
        query parameter is the following:

            projectCustomField[id][op]=value

        Where:
          - [id] is the custom field ID
          - [op] is the operator to apply when filtering, different operators are
            allowed according to the custom field type
          - [value] is the value to apply when filtering

        For example, if I want to filter a dropdown custom field with ID 10 to only
        return entries that have the value "Option1" we would do the following:

            projectCustomField[10][eq]=Option1

        The allowed operators are:
          - like
          - not-like
          - eq
          - not
          - lt
          - gt
          - any
      produces:
      - application/json
      parameters:
      - name: updatedAfter
        in: query
        description: updated after
        type: string
        format: date-time
      - name: searchTerm
        in: query
        description: filter by project name
        type: string
      - name: reportType
        in: query
        description: define the format of the report
        type: string
        enum:
        - project
        - health
        default: project
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
        enum:
        - csv
        - html
        - pdf
        - xls
        default: pdf
      - name: projectType
        in: query
        description: filter by project type
        type: string
      - name: projectStatuses
        in: query
        description: filter by project status
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - companyname
        - datecreated
        - duedate
        - lastactivity
        - name
        - namecaseinsensitive
        - ownercompany
        - starred
        default: name
      - name: minLastActivityDate
        in: query
        description: filter by min last activity date
        type: string
        format: date
      - name: maxLastActivityDate
        in: query
        description: filter by max last activity date
        type: string
        format: date
      - name: userId
        in: query
        description: filter by user id
        type: integer
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: pageSize
        in: query
        description: number of items in a page (not used when generating reports)
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number (not used when generating reports)
        type: integer
        default: "1"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyProjectsWithExplicitMembership
        in: query
        description: only show projects with explicit membership
        type: boolean
        default: "false"
      - name: onlyArchivedProjects
        in: query
        description: return only archived projects
        type: boolean
        default: "false"
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
        default: "false"
      - name: includeProjectUserInfo
        in: query
        description: fetch user-specific data such as isStarred
        type: boolean
        default: "false"
      - name: includeCustomFields
        in: query
        description: include custom fields
        type: boolean
        default: "false"
      - name: includeCompletedStatus
        in: query
        description: optional to include completed projects when filtering by project statuses "current,late".
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: hideObservedProjects
        in: query
        description: hide projects where the logged-in user is just an observer
        type: boolean
        default: "false"
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include (not used when generating reports)
        type: array
        items:
          type: string
        enum:
        - projectOwners
        - projectUpdates
        - companies
        - projectCategories
        - portfolioCards
        - portfolioBoards
        - portfolioColumns
        - tags
        - customfields
        - customfieldProjects
        - projectBudgets
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[projectcategories]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[projectUpdates]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - text
        - isActive
        - health
        - color
        - dateCreated
        - deleted
        - deletedDate
        - numLikes
        - reactions
      - name: fields[projectBudgets]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - type
        - status
        - capacityUsed
        - capacity
        - |-
          originatorBudgetId
          isRepeating
        - repeatPeriod
        - repeatUnit
        - repeatsRemaining
        - sequenceNumber
        - |-
          startDateTime
          endDateTime
        - currencyCode
        - timelogType
        - expenseType
        - defaultRate
        - |-
          notificationIds
          createdByUserId
        - dateCreated
        - updatedUserId
        - dateUpdated
        - |-
          completedByUserId
          dateCompleted
        - deletedByUserId
        - dateDeleted
      - name: fields[portfolioColumns]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[portfolioCards]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - columnId
        - projectId
      - name: fields[portfolioBoards]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
      - name: fields[customfields]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - entity
        - name
        - description
        - type
        - options
        - visibilities
        - isPrivate
        - required
        - createdAt
        - createdByUserId
        - updatedAt
        - updatedByUserId
        - deleted
        - deletedAt
        - deletedByUserId
      - name: fields[customfieldProjects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - customfieldId
        - value
        - createdAt
        - createdBy
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/project.ProjectsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/projects/updates.json:
    get:
      operationId: GET_projects_api_v3_projects_updates.json
      tags:
      - ProjectUpdates
      summary: Get all project updates
      description: Return the updates from all projects that the logged-in user can access.
      produces:
      - application/json
      parameters:
      - name: projectStatuses
        in: query
        description: list of project status
        type: string
        items: {}
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - date
        - color
        - health
        - project
        - user
        default: date
      - name: createdAfter
        in: query
        description: filter by creation date
        type: string
        format: date-time
      - name: projectId
        in: query
        description: filter by project id
        type: integer
      - name: projectHealths
        in: query
        description: filter by project health
        type: integer
        items: {}
      - name: projectHealth
        in: query
        description: filter by project health (deprecated, use projectHealths)
        type: integer
        items: {}
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: showDeleted
        in: query
        description: include deleted items
        type: boolean
        default: "false"
      - name: reactions
        in: query
        description: add reactions to the response
        type: boolean
        default: "false"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
      - name: emoji
        in: query
        description: parse emojis to unicode
        type: boolean
        default: "true"
      - name: activeOnly
        in: query
        description: filter by active
        type: boolean
        default: "true"
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - createdBy
        - deletedBy
        - likes.users
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[projectUpdates]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - projectId
        - text
        - isActive
        - health
        - color
        - dateCreated
        - deleted
        - deletedDate
        - numLikes
        - reactions
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/update.ProjectUpdatesResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/rates/installation.json:
    get:
      description: Gets the default rate for users installation
      operationId: GET_projects_api_v3_rates_installation.json
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/rates.RateResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get an installation default rate.
      tags:
      - BETA
      x-private: true
    put:
      consumes:
      - application/json
      description: sets a rate to be the installtion default rate
      operationId: PUT_projects_api_v3_rates_installation.json
      parameters:
      - in: body
        name: rates.Request
        required: true
        schema:
          $ref: '#/definitions/rates.Request'
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/rates.RateResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: set an installation default rate.
      tags:
      - BETA
      x-private: true
  /projects/api/v3/rates/installation/users.json:
    get:
      description: Long description explaining the endpoint.
      operationId: GET_projects_api_v3_rates_installation_users.json
      parameters:
      - default: "50"
        description: number of items in a page
        in: query
        name: pageSize
        type: integer
      - default: "1"
        description: page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/rates.InstallationUserRateResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get a specific rates.
      tags:
      - BETA
      x-private: true
  /projects/api/v3/rates/projects/{projectId}.json:
    get:
      description: Gets the default rate for specifc project
      operationId: GET_projects_api_v3_rates_projects_{projectId}.json
      parameters:
      - in: path
        name: projectId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/rates.RateResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get a projects default rate.
      tags:
      - BETA
      x-private: true
    put:
      consumes:
      - application/json
      description: sets a rate to be the project default rate
      operationId: PUT_projects_api_v3_rates_projects_{projectId}.json
      parameters:
      - in: body
        name: rates.Request
        required: true
        schema:
          $ref: '#/definitions/rates.Request'
      - in: path
        name: projectId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/rates.RateResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: set a project default rate.
      tags:
      - BETA
      x-private: true
  /projects/api/v3/rates/user/{userId}.json:
    get:
      description: Gets the default rate for a specific user
      operationId: GET_projects_api_v3_rates_user_{userId}.json
      parameters:
      - in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/rates.RateResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get a user default rate.
      tags:
      - BETA
      x-private: true
  /projects/api/v3/rates/users/{userId}.json:
    put:
      consumes:
      - application/json
      description: sets a rate to be the the users default rate
      operationId: PUT_projects_api_v3_rates_users_{userId}.json
      parameters:
      - in: body
        name: rates.Request
        required: true
        schema:
          $ref: '#/definitions/rates.Request'
      - in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/rates.RateResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: set a user default rate.
      tags:
      - BETA
      x-private: true
  /projects/api/v3/risks.json:
    get:
      operationId: GET_projects_api_v3_risks.json
      tags:
      - Risks
      summary: Get all risks
      description: |-
        Return all risks for the provided filters. Only filters that the logged-in user
        has access will be returned.
      produces:
      - application/json
      parameters:
      - name: updatedAfterDate
        in: query
        description: filter by risks updated after specified date (deprecated, use updatedAfter)
        type: string
        format: date-time
      - name: updatedAfter
        in: query
        description: filter by risks updated after specified date
        type: string
        format: date-time
      - name: statuses
        in: query
        description: filter by risk statuses
        type: string
        items: {}
        enum:
        - new
        - pending
        - closed
      - name: sortOrder
        in: query
        description: sort order (deprecated, use orderMode)
        type: string
        enum:
        - asc
        - desc
      - name: sort
        in: query
        description: sort by (deprecated, use orderBy)
        type: string
        enum:
        - datecreated
        - source
        - probability
        - impact
        - result
        - project
      - name: searchTerm
        in: query
        description: search term
        type: string
      - name: reportFormat
        in: query
        description: |-
          define the format of the report
          default: pdf
        type: string
      - name: projectStatuses
        in: query
        description: list of project statuses
        type: string
        items: {}
      - name: orderMode
        in: query
        description: sort order
        type: string
        enum:
        - asc
        - desc
      - name: orderBy
        in: query
        description: sort by
        type: string
        enum:
        - datecreated
        - source
        - probability
        - impact
        - result
        - project
      - name: projectHealths
        in: query
        description: list of project health
        type: integer
        items: {}
      - name: probabilityTo
        in: query
        description: filter by probability
        type: integer
      - name: probabilityFrom
        in: query
        description: filter by probability
        type: integer
      - name: pageSize
        in: query
        description: |-
          number of items in a page
          default: 50
        type: integer
      - name: page
        in: query
        description: |-
          page number
          default: 1
        type: integer
      - name: impactTo
        in: query
        description: filter by impact
        type: integer
      - name: impactFrom
        in: query
        description: filter by impact
        type: integer
      - name: showDeleted
        in: query
        description: |-
          include deleted items
          default: false
        type: boolean
      - name: onlyStarredProjects
        in: query
        description: |-
          filter by starred projects only
          default: false
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: enforce all tag ids must be matched
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
      - name: impactSchedule
        in: query
        description: filter by risks that impact schedule
        type: boolean
      - name: impactPerformance
        in: query
        description: filter by risks that impact performance
        type: boolean
      - name: impactCost
        in: query
        description: filter by risks that impact cost
        type: boolean
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - users
        - projects.companies
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[risks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - source
        - probability
        - probabilityValue
        - impact
        - |-
          impactValue
          impactCost
        - impactSchedule
        - impactPerformance
        - createdOn
        - |-
          createdByUserId
          lastChangedOn
        - lastChangedByUserId
        - result
        - mitigationPlan
        - |-
          stats
          projectId
        - deleted
        - canEdit
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/risk.RisksResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/schedule/people.json:
    get:
      description: |-
        Return people allocations summary to easy manage work, time and resources in
        Teamwork that address broader resource management needs.


        On this endpoint you can filter by project custom fields. The syntax for the
        query parameter is the following:

            projectCustomField[id][op]=value

        Where:
          - [id] is the custom field ID
          - [op] is the operator to apply when filtering, different operators are
            allowed according to the custom field type
          - [value] is the value to apply when filtering

        For example, if I want to filter a dropdown custom field with ID 10 to only
        return entries that have the value "Option1" we would do the following:

            projectCustomField[10][eq]=Option1

        The allowed operators are:
          - like
          - not-like
          - eq
          - not
          - lt
          - gt
          - any
      operationId: GET_projects_api_v3_schedule_people.json
      parameters:
      - description: filter by start date
        format: date
        in: query
        name: startDate
        type: string
      - description: filter by search term
        in: query
        name: searchTerm
        type: string
      - description: filter by project status
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
        in: query
        name: projectStatus
        type: string
      - default: asc
        description: order mode
        enum:
        - asc
        - desc
        in: query
        name: orderMode
        type: string
      - default: project
        description: order by
        enum:
        - startdate
        - enddate
        - project
        - assigneduser
        in: query
        name: orderBy
        type: string
      - description: filter by end date
        format: date
        in: query
        name: endDate
        type: string
      - description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
        in: query
        items: {}
        name: projectHealths
        type: integer
      - default: "50"
        description: number of items in a page
        in: query
        name: pageSize
        type: integer
      - default: "1"
        description: page number
        in: query
        name: page
        type: integer
      - description: filter by starred projects only
        in: query
        name: onlyStarredProjects
        type: boolean
      - default: "false"
        description: only show projects with explicit membership
        in: query
        name: onlyProjectsWithExplicitMembership
        type: boolean
      - description: match all project tags
        in: query
        name: matchAllProjectTags
        type: boolean
      - default: "false"
        description: hide projects where the logged-in user is just an observer
        in: query
        name: hideObservedProjects
        type: boolean
      - description: filter by teams
        in: query
        items:
          type: integer
        name: teamIds
        type: array
      - description: filter by project tag ids
        in: query
        items:
          type: integer
        name: projectTagIds
        type: array
      - description: filter by project owner ids
        in: query
        items:
          type: integer
        name: projectOwnerIds
        type: array
      - description: filter by project ids
        in: query
        items:
          type: integer
        name: projectIds
        type: array
      - description: filter by company ids
        in: query
        items:
          type: integer
        name: projectCompanyIds
        type: array
      - description: filter by project category ids
        in: query
        items:
          type: integer
        name: projectCategoryIds
        type: array
      - description: include
        enum:
        - projects
        - projects.milestones
        - projects.budgets
        - projects.companies
        - projects.users
        - assignee
        - assignee.calendarEvents
        - assignee.timelogs
        - allocations
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
        in: query
        items:
          type: string
        name: fields[users]
        type: array
      - enum:
        - userId
        - allocatedTotalMinutes
        - loggedTotalMinutes
        - unavailableTotalMinutes
        - schedule
        in: query
        items:
          type: string
        name: fields[userSchedules]
        type: array
      - enum:
        - id
        - dateCreated
        - minutes
        - description
        - timeLogged
        - billable
        - deleted
        - dateDeleted
        - hasStartTime
        - dateEdited
        - deskTicketId
        - invoiceNumber
        - userId
        - taskId
        - projectId
        - loggedByUserId
        - deletedByUserId
        - editedByUserId
        - taskIdPreMove
        - projectBillingInvoiceId
        in: query
        items:
          type: string
        name: fields[timelogs]
        type: array
      - enum:
        - id
        - name
        in: query
        items:
          type: string
        name: fields[projects]
        type: array
      - enum:
        - projectId
        - allocatedTotalMinutes
        - loggedTotalMinutes
        - unavailableTotalMinutes
        - schedule
        in: query
        items:
          type: string
        name: fields[projectSchedules]
        type: array
      - enum:
        - id
        - name
        - description
        - deadline
        - completed
        - projectId
        - createdOn
        - lastChangedOn
        - creatorUserId
        - reminder
        - private
        - lockdownId
        - status
        - completedOn
        - completerId
        - percentageComplete
        in: query
        items:
          type: string
        name: fields[milestones]
        type: array
      - enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
        in: query
        items:
          type: string
        name: fields[companies]
        type: array
      - enum:
        - id
        - title
        - startDate
        - endDate
        - typeId
        - privacyType
        - allDay
        - location
        - description
        - showAsBusy
        - attendeesCanEdit
        - projectUsersCanEdit
        - monthlyRepeatType
        - dateLastUpdated
        - createdDateTime
        - deleted
        - dateDeleted
        - additionalProperties
        - currentUserAssociationType
        - sequenceId
        - projectId
        - ownerUserId
        - deletedByUserId
        - createdByUserId
        - updatedByUserId
        in: query
        items:
          type: string
        name: fields[calendarEvents]
        type: array
      - enum:
        - id
        - installationId
        - projectId
        - title
        - description
        - startedAt
        - endedAt
        - duration
        - color
        - status
        - distributeType
        - createdAt
        - createdByUser
        - updatedAt
        - updatedByUser
        - deletedAt
        - deletedByUser
        - assignedUserID
        in: query
        items:
          type: string
        name: fields[allocations]
        type: array
      - description: filter by companies
        in: query
        items:
          type: integer
        name: companyIds
        type: array
      - description: filter by assigned user ids
        in: query
        items:
          type: integer
        name: assignedUserIds
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/schedule.UserSchedulesResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Return the summary for users' allocations.
      tags:
      - ResourceScheduling
      x-private: true
  /projects/api/v3/schedule/projects.json:
    get:
      description: |-
        Return project allocations summary to easy manage work, time and resources in
        Teamwork that address broader resource management needs.


        On this endpoint you can filter by project custom fields. The syntax for the
        query parameter is the following:

            projectCustomField[id][op]=value

        Where:
          - [id] is the custom field ID
          - [op] is the operator to apply when filtering, different operators are
            allowed according to the custom field type
          - [value] is the value to apply when filtering

        For example, if I want to filter a dropdown custom field with ID 10 to only
        return entries that have the value "Option1" we would do the following:

            projectCustomField[10][eq]=Option1

        The allowed operators are:
          - like
          - not-like
          - eq
          - not
          - lt
          - gt
          - any
      operationId: GET_projects_api_v3_schedule_projects.json
      parameters:
      - description: filter by start date
        format: date
        in: query
        name: startDate
        type: string
      - description: filter by search term
        in: query
        name: searchTerm
        type: string
      - description: filter by project status
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
        in: query
        name: projectStatus
        type: string
      - default: asc
        description: order mode
        enum:
        - asc
        - desc
        in: query
        name: orderMode
        type: string
      - default: project
        description: order by
        enum:
        - startdate
        - enddate
        - project
        - assigneduser
        in: query
        name: orderBy
        type: string
      - description: filter by end date
        format: date
        in: query
        name: endDate
        type: string
      - description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
        in: query
        items: {}
        name: projectHealths
        type: integer
      - default: "50"
        description: number of items in a page
        in: query
        name: pageSize
        type: integer
      - default: "1"
        description: page number
        in: query
        name: page
        type: integer
      - description: filter by starred projects only
        in: query
        name: onlyStarredProjects
        type: boolean
      - default: "false"
        description: only show projects with explicit membership
        in: query
        name: onlyProjectsWithExplicitMembership
        type: boolean
      - description: match all project tags
        in: query
        name: matchAllProjectTags
        type: boolean
      - default: "false"
        description: hide projects where the logged-in user is just an observer
        in: query
        name: hideObservedProjects
        type: boolean
      - description: filter by project tag ids
        in: query
        items:
          type: integer
        name: projectTagIds
        type: array
      - description: filter by project owner ids
        in: query
        items:
          type: integer
        name: projectOwnerIds
        type: array
      - description: filter by project ids
        in: query
        items:
          type: integer
        name: projectIds
        type: array
      - description: filter by company ids
        in: query
        items:
          type: integer
        name: projectCompanyIds
        type: array
      - description: filter by project category ids
        in: query
        items:
          type: integer
        name: projectCategoryIds
        type: array
      - description: include
        enum:
        - projects
        - projects.milestones
        - projects.budgets
        - projects.companies
        - projects.users
        - assignee
        - assignee.calendarEvents
        - assignee.timelogs
        - allocations
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
        in: query
        items:
          type: string
        name: fields[users]
        type: array
      - enum:
        - userId
        - allocatedTotalMinutes
        - loggedTotalMinutes
        - unavailableTotalMinutes
        - schedule
        in: query
        items:
          type: string
        name: fields[userSchedules]
        type: array
      - enum:
        - id
        - dateCreated
        - minutes
        - description
        - timeLogged
        - billable
        - deleted
        - dateDeleted
        - hasStartTime
        - dateEdited
        - deskTicketId
        - invoiceNumber
        - userId
        - taskId
        - projectId
        - loggedByUserId
        - deletedByUserId
        - editedByUserId
        - taskIdPreMove
        - projectBillingInvoiceId
        in: query
        items:
          type: string
        name: fields[timelogs]
        type: array
      - enum:
        - id
        - name
        in: query
        items:
          type: string
        name: fields[projects]
        type: array
      - enum:
        - projectId
        - allocatedTotalMinutes
        - loggedTotalMinutes
        - unavailableTotalMinutes
        - schedule
        in: query
        items:
          type: string
        name: fields[projectSchedules]
        type: array
      - enum:
        - id
        - name
        - description
        - deadline
        - completed
        - projectId
        - createdOn
        - lastChangedOn
        - creatorUserId
        - reminder
        - private
        - lockdownId
        - status
        - completedOn
        - completerId
        - percentageComplete
        in: query
        items:
          type: string
        name: fields[milestones]
        type: array
      - enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
        in: query
        items:
          type: string
        name: fields[companies]
        type: array
      - enum:
        - id
        - title
        - startDate
        - endDate
        - typeId
        - privacyType
        - allDay
        - location
        - description
        - showAsBusy
        - attendeesCanEdit
        - projectUsersCanEdit
        - monthlyRepeatType
        - dateLastUpdated
        - createdDateTime
        - deleted
        - dateDeleted
        - additionalProperties
        - currentUserAssociationType
        - sequenceId
        - projectId
        - ownerUserId
        - deletedByUserId
        - createdByUserId
        - updatedByUserId
        in: query
        items:
          type: string
        name: fields[calendarEvents]
        type: array
      - enum:
        - id
        - installationId
        - projectId
        - title
        - description
        - startedAt
        - endedAt
        - duration
        - color
        - status
        - distributeType
        - createdAt
        - createdByUser
        - updatedAt
        - updatedByUser
        - deletedAt
        - deletedByUser
        - assignedUserID
        in: query
        items:
          type: string
        name: fields[allocations]
        type: array
      - description: filter by assigned user ids
        in: query
        items:
          type: integer
        name: assignedUserIds
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/schedule.ProjectSchedulesResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Return the summary for projects' allocations.
      tags:
      - ResourceScheduling
      x-private: true
  /projects/api/v3/statuses.json:
    get:
      operationId: GET_projects_api_v3_statuses.json
      tags:
      - PeopleStatus
      summary: Get all statuses
      description: |-
        All of the latest status posts are returned for all users in the parent
        company.
      produces:
      - application/json
      parameters:
      - name: updatedAfter
        in: query
        description: return only statuses updated after a specific date
        type: string
        format: date-time
      - name: searchTerm
        in: query
        description: filter by the user name or status message
        type: string
      - name: teamId
        in: query
        description: filter by team
        type: integer
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "100"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: showEveryone
        in: query
        description: show also users without status
        type: boolean
      - name: showDeleted
        in: query
        description: showDeleted statuses
        type: boolean
        default: "false"
      - name: includeSubteams
        in: query
        description: also include statuses from subteams
        type: boolean
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - statuses
        - users
        - userevents
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[statuses]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - userId
        - emoji
        - text
        - dateTime
        - ipAddress
        - dateLastUpdated
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/status.TimelineResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/statuses/timeline.json:
    get:
      operationId: GET_projects_api_v3_statuses_timeline.json
      tags:
      - PeopleStatus
      summary: Get the people statuses timeline.
      description: Return a timeline list of people statuses that the logged-in user can access.
      produces:
      - application/json
      parameters:
      - name: searchTerm
        in: query
        description: filter by the user name or status message
        type: string
      - name: teamId
        in: query
        description: filter by team
        type: integer
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: showDeleted
        in: query
        description: showDeleted statuses
        type: boolean
        default: "false"
      - name: includeSubteams
        in: query
        description: also include statuses from subteams
        type: boolean
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - users
        - userevents
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/status.TimelineResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/summary.json:
    get:
      operationId: GET_projects_api_v3_summary.json
      tags:
      - Summary
      summary: Get installation summary dashboard
      description: |-
        Retrieves the summary from the entire installation, returning counters about
        tasks, milestones, columns, events, risks, timers, projects healths.


        On this endpoint you can filter by project custom fields. The syntax for the
        query parameter is the following:

            projectCustomField[id][op]=value

        Where:
          - [id] is the custom field ID
          - [op] is the operator to apply when filtering, different operators are
            allowed according to the custom field type
          - [value] is the value to apply when filtering

        For example, if I want to filter a dropdown custom field with ID 10 to only
        return entries that have the value "Option1" we would do the following:

            projectCustomField[10][eq]=Option1

        The allowed operators are:
          - like
          - not-like
          - eq
          - not
          - lt
          - gt
          - any
      produces:
      - application/json
      parameters:
      - name: until
        in: query
        description: used to limit the since counters to a specific period
        type: string
        enum:
        - now
        - timeRange
      - name: timeRangeStart
        in: query
        description: filter by start datetime
        type: string
        format: date-time
      - name: timeRangeEnd
        in: query
        description: filter by end datetime
        type: string
        format: date-time
      - name: timeRange
        in: query
        description: |-
          filter by time range. It will be ignored if timeRangeStart and timeRangeEnd
          are provided.
        type: string
        enum:
        - yesterday
        - today
        - thisweek
        - lastweek
        - thismonth
        - lastmonth
        - last3months
        - last6months
      - name: status
        in: query
        description: project status (deprecated, use projectStatuses)
        type: string
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: projectStatuses
        in: query
        description: project statuses
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: projectStatus
        in: query
        description: project status
        type: string
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: projectHealths
        in: query
        description: |-
          project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: projectHealth
        in: query
        description: |-
          project healths (deprecated, use projectHealths)

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: eventsDaysAhead
        in: query
        description: number of days remaining to event's start
        type: integer
        default: "7"
      - name: useStartDatesForTodaysTasks
        in: query
        description: enforce today is considered as start date for today's tasks
        type: boolean
      - name: unreadMessagesMineOnly
        in: query
        description: filter by my unread messages only
        type: boolean
      - name: unreadCommentsMineOnly
        in: query
        description: filter by my unread comments only
        type: boolean
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: onlyProjectEvents
        in: query
        description: filter only project events
        type: boolean
      - name: matchAllTags
        in: query
        description: enforce all tag ids must be matched (deprecated, use matchAllProjectTags)
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: enforce all tag ids must be matched
        type: boolean
      - name: includeAssigneeTeams
        in: query
        description: include teams related to the taskAssigneeUserIds
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
      - name: eventsAttendingOnly
        in: query
        description: count only events that the users are attending
        type: boolean
      - name: applyTaskAssigneeUsersToSince
        in: query
        description: |-
          the since section will only use taskAssigneeUserIds if this flag is true
          (keeps backward compatibility)
        type: boolean
      - name: applySinceOnUnread
        in: query
        description: when enabled unread counters will respect the time range period.
        type: boolean
        default: "false"
      - name: userIds
        in: query
        description: filter by user ids
        type: array
        items:
          type: integer
      - name: timeLoggedByUserIds
        in: query
        description: filter by user ids who time logged
        type: array
        items:
          type: integer
      - name: taskAssigneeUserIds
        in: query
        description: filter by user ids with tasks assigned
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: milestoneAssigneeUserIds
        in: query
        description: filter by user ids with milestones assigned
        type: array
        items:
          type: integer
      - name: filterTagIds
        in: query
        description: filter by project tag ids (deprecated, use projectTagIds)
        type: array
        items:
          type: integer
      - name: fields[unread]
        in: query
        type: array
        items:
          type: string
        enum:
        - comments
        - messages
      - name: fields[time]
        in: query
        type: array
        items:
          type: string
        enum:
        - estimates
        - totals
      - name: fields[tasks]
        in: query
        description: sparse fields
        type: array
        items:
          type: string
        enum:
        - nodate
        - today
        - late
        - started
        - complete
        - upcoming
        - active
      - name: fields[since]
        in: query
        type: array
        items:
          type: string
        enum:
        - tasksComplete
        - tasksCreated
        - events
        - dateTime
      - name: fields[risks]
        in: query
        type: array
        items:
          type: string
        enum:
        - total
        - open
        - pending
        - closed
      - name: fields[milestones]
        in: query
        type: array
        items:
          type: string
        enum:
        - today
        - late
        - complete
        - upcoming
        - active
      - name: fields[health]
        in: query
        description: |2-

          0: not set
          1: bad
          2: ok
          3: good
        type: array
        items:
          type: string
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: fields[events]
        in: query
        type: array
        items:
          type: string
        enum:
        - today
        - upcoming
      - name: fields[columns]
        in: query
        type: array
        items:
          type: string
        enum:
        - count
        - data
      - name: companyIds
        in: query
        description: filter by company ids (deprecated, use projectCompanyIds)
        type: array
        items:
          type: integer
      - name: assigneeUserIds
        in: query
        description: filter by user ids with tasks or milestones assigned
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/summary.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/tags.json:
    get:
      operationId: GET_projects_api_v3_tags.json
      tags:
      - Tags
      summary: Get all tags
      description: Return all tags that the logged-in user can access.
      produces:
      - application/json
      parameters:
      - name: updatedAfter
        in: query
        description: search for tags updated after the provided date
        type: string
        format: date-time
      - name: searchTerm
        in: query
        description: filter by search term
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - name
        - count
        - datelastused
        - color
        default: name
      - name: itemType
        in: query
        description: filter by item type
        type: string
        enum:
        - all
        - project
        - task
        - tasklist
        - milestone
        - message
        - comment
        - timelog
        - file
        - user
        - company
        - invoice
        - risk
        - notebook
        - link
        - event
        - notebookversion
        - fileversion
        default: all
      - name: filter
        in: query
        description: mode used when filtering the tags
        type: string
        enum:
        - all
        - recent
        default: all
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "500"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: withCounters
        in: query
        description: include in the response the number of items that use the tag
        type: boolean
        default: "false"
      - name: skipSpecial
        in: query
        description: do not include in the response special tags
        type: boolean
        default: "true"
      - name: searchRightOnly
        in: query
        description: search term will be placed as a prefix to match the tag names
        type: boolean
        default: "false"
      - name: skipIds
        in: query
        description: skip from the result tags with the defined ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by projects
        type: array
        items:
          type: integer
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/tag.TagsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
    post:
      operationId: POST_projects_api_v3_tags.json
      tags:
      - Tags
      summary: Create a single tag
      description: |-
        Creates a new tag. If there's already a tag with the same name in the
        installation, it will be returned in the response with the status code 200
        (OK).
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: tag.Request
        in: body
        required: true
        schema:
          $ref: '#/definitions/tag.Request'
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/tag.Response'
        201:
          description: 201 Created
          schema:
            $ref: '#/definitions/tag.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        409:
          description: 409 Conflict
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/tags/{tagId}.json:
    get:
      operationId: GET_projects_api_v3_tags_{tagId}.json
      tags:
      - Tags
      summary: Get details of an individual tag
      description: Return a specific tag.
      produces:
      - application/json
      parameters:
      - name: tagId
        in: path
        type: integer
        required: true
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/tag.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
    patch:
      operationId: PATCH_projects_api_v3_tags_{tagId}.json
      tags:
      - Tags
      summary: Update a single tag
      description: |-
        Updates a existing tag. If there's already a tag with the same changed name
        in the installation, it will be returned the status code 409 (CONFLICT).
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: tag.Request
        in: body
        required: true
        schema:
          $ref: '#/definitions/tag.Request'
      - name: tagId
        in: path
        type: integer
        required: true
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/tag.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
        409:
          description: 409 Conflict
          schema:
            $ref: '#/definitions/view.ErrorResponse'
    delete:
      operationId: DELETE_projects_api_v3_tags_{tagId}.json
      tags:
      - Tags
      summary: Deletes a tag
      description: |-
        Removes a tag. If there's no tag with the given ID the status code 409
        (CONFLICT) will be returned.
      produces:
      - application/json
      parameters:
      - name: tagId
        in: path
        type: integer
        required: true
      responses:
        204:
          description: 204 No Content (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/tags/bulk/delete.json:
    post:
      operationId: POST_projects_api_v3_tags_bulk_delete.json
      tags:
      - Tags
      summary: Delete many tags at once
      description: Removes many tags at once.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: tag.BulkDeleteRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/tag.BulkDeleteRequest'
      responses:
        204:
          description: 204 No Content (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        403:
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/tasklists/{tasklistId}/tasks.json:
    post:
      consumes:
      - application/json
      description: Create a new task in the provided task list.
      operationId: POST_projects_api_v3_tasklists_{tasklistId}_tasks.json
      parameters:
      - in: body
        name: task.Request
        required: true
        schema:
          $ref: '#/definitions/task.Request'
      - in: path
        name: tasklistId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: 201 Created
          schema:
            $ref: '#/definitions/task.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Creates a task.
      tags:
      - Tasks
      x-private: true
  /projects/api/v3/tasks.json:
    get:
      description: Return multiple tasks according to the provided filter.
      operationId: GET_projects_api_v3_tasks.json
      parameters:
      - description: filter by updated after date
        format: date
        in: query
        name: updatedAfter
        type: string
      - description: filter by today
        format: date-time
        in: query
        name: today
        type: string
      - description: filter by task included set
        enum:
        - overdue
        - nodate
        - nostartdate
        - "noduedate\n\t\tnostartwithfutureduedate"
        - taskListNames
        - projectNames
        in: query
        items: {}
        name: taskIncludedSet
        type: string
      - description: filter by a taskFilter
        enum:
        - all
        - anytime
        - completed
        - created
        - overdue
        - "today\n\t\tyesterday"
        - started
        - tomorrow
        - thisweek
        - "within7\n\t\twithin14"
        - within30
        - within365
        - nodate
        - "noduedate\n\t\tnostartdate"
        - newTaskDefaults
        - hasDate
        in: query
        name: taskFilter
        type: string
      - description: filter by list of task status
        enum:
        - upcoming
        - late
        - all
        in: query
        items: {}
        name: status
        type: string
      - description: filter on start date
        format: date
        in: query
        name: startDate
        type: string
      - description: filter by search term
        in: query
        name: searchTerm
        type: string
      - description: filter by project status
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
        in: query
        items: {}
        name: projectStatuses
        type: string
      - description: filter by task priority
        in: query
        name: priority
        type: string
      - default: asc
        description: order mode
        enum:
        - asc
        - desc
        in: query
        name: orderMode
        type: string
      - default: duedate
        description: order by
        enum:
        - startdate
        - dateadded
        - priority
        - project
        - flattenedtasklist
        - company
        - "manual\n\tactive"
        - datecompleted
        - duestartdate
        - alldates
        - tasklistname
        - tasklistdisplayorder
        - tasklistid
        - duedate
        - dateupdated
        - taskname
        - createdby
        - completedby
        - assignedto
        - taskstatus
        - taskduedate
        in: query
        name: orderBy
        type: string
      - description: filter on end date
        format: date
        in: query
        name: endDate
        type: string
      - description: filter on deleted after date
        format: date-time
        in: query
        name: deletedAfter
        type: string
      - description: filter by created filter
        enum:
        - anytime
        - today
        - yesterday
        - custom
        in: query
        name: createdFilter
        type: string
      - description: filter by created date code
        in: query
        name: createdDateCode
        type: string
      - description: filter by created before date
        format: date
        in: query
        name: createdBefore
        type: string
      - description: filter by created after date
        format: date-time
        in: query
        name: createdAfter
        type: string
      - description: filter by completed before date
        format: date-time
        in: query
        name: completedBefore
        type: string
      - description: filter by completed after date
        format: date-time
        in: query
        name: completedAfter
        type: string
      - description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
        in: query
        items: {}
        name: projectHealths
        type: integer
      - description: filter by parent task ids
        in: query
        name: parentTaskId
        type: integer
      - default: "50"
        description: number of items in a page
        in: query
        name: pageSize
        type: integer
      - default: "1"
        description: page number
        in: query
        name: page
        type: integer
      - description: include task id
        in: query
        name: includeTaskId
        type: integer
      - description: filter by completer user id
        in: query
        name: completedByUserId
        type: integer
      - description: use start dates for todays tasks
        in: query
        name: useStartDatesForTodaysTasks
        type: boolean
      - description: filter on all projects
        in: query
        name: useAllProjects
        type: boolean
      - default: "false"
        description: include deleted items
        in: query
        name: showDeleted
        type: boolean
      - description: include tasks from completed lists
        in: query
        name: showCompletedLists
        type: boolean
      - description: include companies and teams in the search term
        in: query
        name: searchCompaniesTeams
        type: boolean
      - description: include assignees in the search
        in: query
        name: searchAssignees
        type: boolean
      - description: only untagged tasks
        in: query
        name: onlyUntaggedTasks
        type: boolean
      - description: filter by only tasks with unread comments
        in: query
        name: onlyTasksWithUnreadComments
        type: boolean
      - description: filter by only tasks with tickets
        in: query
        name: onlyTasksWithTickets
        type: boolean
      - description: filter by starred projects only
        in: query
        name: onlyStarredProjects
        type: boolean
      - description: |-
          only include tasks from projects where the user is strictly a project admin.
          site admins have visibility to all projects.
        in: query
        name: onlyAdminProjects
        type: boolean
      - description: nest sub tasks
        in: query
        name: nestSubTasks
        type: boolean
      - description: match all tags
        in: query
        name: matchAllTags
        type: boolean
      - description: match all project tags
        in: query
        name: matchAllProjectTags
        type: boolean
      - description: match all exclude tags
        in: query
        name: matchAllExcludedTags
        type: boolean
      - description: include tasks latest update action
        in: query
        name: includeUpdate
        type: boolean
      - description: include untagged tasks
        in: query
        name: includeUntaggedTasks
        type: boolean
      - description: filter by include today
        in: query
        name: includeToday
        type: boolean
      - description: include tasks without due dates
        in: query
        name: includeTasksWithoutDueDates
        type: boolean
      - description: include tasks with cards
        in: query
        name: includeTasksWithCards
        type: boolean
      - description: include tasks from deleted lists
        in: query
        name: includeTasksFromDeletedLists
        type: boolean
      - description: include reminders
        in: query
        name: includeReminders
        type: boolean
      - description: include ids of completed and active subtasks, dependencies, predecessors
        in: query
        name: includeRelatedTasks
        type: boolean
      - description: include private items
        in: query
        name: includePrivateItems
        type: boolean
      - description: include overdue tasks
        in: query
        name: includeOverdueTasks
        type: boolean
      - description: include original due date of a task
        in: query
        name: includeOriginalDueDate
        type: boolean
      - description: include logged time
        in: query
        name: includeLoggedTime
        type: boolean
      - description: include completed tasks
        in: query
        name: includeCompletedTasks
        type: boolean
      - description: include completed sub tasks
        in: query
        name: includeCompletedSubtasks
        type: boolean
      - description: filter by include crm deal ids
        in: query
        name: includeCRMDealIds
        type: boolean
      - description: filter by include blocked
        in: query
        name: includeBlocked
        type: boolean
      - description: include teams related to the responsible user ids
        in: query
        name: includeAssigneeTeams
        type: boolean
      - description: include companies related to the responsible user ids
        in: query
        name: includeAssigneeCompanies
        type: boolean
      - description: include all comments
        in: query
        name: includeAllComments
        type: boolean
      - description: group by tasklist
        in: query
        name: groupByTasklist
        type: boolean
      - description: get sub tasks
        in: query
        name: getSubTasks
        type: boolean
      - description: get files
        in: query
        name: getFiles
        type: boolean
      - description: exclude assignee not on project teams
        in: query
        name: excludeAssigneeNotOnProjectTeams
        type: boolean
      - description: only return tasks with estimated time
        in: query
        name: OnlyTasksWithEstimatedTime
        type: boolean
      - description: filter by tasklist ids
        in: query
        items:
          type: integer
        name: tasklistIds
        type: array
      - description: filter by tag values
        in: query
        items:
          type: string
        name: tags
        type: array
      - description: filter by tag ids
        in: query
        items:
          type: integer
        name: tagIds
        type: array
      - description: skip crm deal ids
        in: query
        items:
          type: integer
        name: skipCRMDealIds
        type: array
      - description: filter by responsible party ids
        in: query
        items:
          type: integer
        name: responsiblePartyIds
        type: array
      - description: filter by project tag ids
        in: query
        items:
          type: integer
        name: projectTagIds
        type: array
      - description: filter by project owner ids
        in: query
        items:
          type: integer
        name: projectOwnerIds
        type: array
      - description: filter by project ids
        in: query
        items:
          type: integer
        name: projectIds
        type: array
      - description: filter by company ids
        in: query
        items:
          type: integer
        name: projectCompanyIds
        type: array
      - description: filter by project category ids
        in: query
        items:
          type: integer
        name: projectCategoryIds
        type: array
      - description: include
        enum:
        - projects
        - tasklists
        - parentTasks
        - companies
        - "teams\n\tusers"
        - milestones
        - comments
        - comments.users
        - tags
        - "cards\n\tcards.columns"
        - timeTotals
        in: query
        items:
          type: string
        name: include
        type: array
      - description: filter by task ids
        in: query
        items:
          type: integer
        name: ids
        type: array
      - description: filter by followed by user ids
        in: query
        items:
          type: integer
        name: followedByUserIds
        type: array
      - description: filter by board column ids
        in: query
        items:
          type: integer
        name: filterBoardColumnIds
        type: array
      - enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
        in: query
        items:
          type: string
        name: fields[users]
        type: array
      - enum:
        - id
        - name
        - teamLogo
        - teamLogoIcon
        - teamLogoColor
        in: query
        items:
          type: string
        name: fields[teams]
        type: array
      - enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
        in: query
        items:
          type: string
        name: fields[tasks]
        type: array
      - enum:
        - id
        - name
        - projectId
        - milestoneId
        in: query
        items:
          type: string
        name: fields[tasklists]
        type: array
      - enum:
        - id
        - name
        - color
        - count
        in: query
        items:
          type: string
        name: fields[tags]
        type: array
      - enum:
        - id
        - name
        in: query
        items:
          type: string
        name: fields[projects]
        type: array
      - enum:
        - id
        - name
        - description
        - deadline
        - completed
        - projectId
        - createdOn
        - lastChangedOn
        - creatorUserId
        - reminder
        - private
        - lockdownId
        - status
        - completedOn
        - completerId
        - percentageComplete
        in: query
        items:
          type: string
        name: fields[milestones]
        type: array
      - enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
        in: query
        items:
          type: string
        name: fields[companies]
        type: array
      - enum:
        - id
        - objectType
        - objectId
        - title
        in: query
        items:
          type: string
        name: fields[comments]
        type: array
      - enum:
        - id
        - name
        - color
        - displayOrder
        - createdAt
        - updatedAt
        - settings
        - "sort\n\tsortOrder"
        - deletedAt
        - project
        - hasTriggers
        - deleted
        - stats
        - defaultTasklist
        in: query
        items:
          type: string
        name: fields[columns]
        type: array
      - enum:
        - id
        - displayOrder
        - archived
        - archivedAt
        - archivedBy
        - "createdAt\n\tcreateBy"
        - updatedAt
        - visible
        - status
        - deleteBy
        - deletedAt
        in: query
        items:
          type: string
        name: fields[cards]
        type: array
      - description: filter by excluded tag ids
        in: query
        items:
          type: integer
        name: excludeTagIds
        type: array
      - description: filter by custom fields
        in: query
        items:
          type: string
        name: customFields
        type: array
      - description: filter by crm deal ids
        in: query
        items:
          type: integer
        name: crmDealIds
        type: array
      - description: filter by creator user ids
        in: query
        items:
          type: integer
        name: createdByUserIds
        type: array
      - description: filter by assignee team ids
        in: query
        items:
          type: integer
        name: assigneeTeamIds
        type: array
      - description: filter by assignee company ids
        in: query
        items:
          type: integer
        name: assigneeCompanyIds
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/task.TasksResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get all tasks.
      tags:
      - Tasks
      x-private: true
  /projects/api/v3/tasks/{taskId}.json:
    get:
      description: Returns the information about a specific task.
      operationId: GET_projects_api_v3_tasks_{taskId}.json
      parameters:
      - in: path
        name: taskId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/task.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Get a specific task.
      tags:
      - Tasks
      x-private: true
    delete:
      description: Delete a task and its subtasks.
      operationId: DELETE_projects_api_v3_tasks_{taskId}.json
      parameters:
      - in: path
        name: taskId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: 204 No Content (no data)
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Delete an existing task.
      tags:
      - Tasks
      x-private: true
  /projects/api/v3/tasks/{taskId}/customfields.json:
    get:
      description: Return all custom field values from a specific task.
      operationId: GET_projects_api_v3_tasks_{taskId}_customfields.json
      parameters:
      - description: filter by task id
        in: query
        name: taskId
        type: integer
      - in: path
        name: taskId
        required: true
        type: integer
      - default: "50"
        description: number of items in a page
        in: query
        name: pageSize
        type: integer
      - default: "1"
        description: page number
        in: query
        name: page
        type: integer
      - description: include
        enum:
        - tasks
        - customfields
        in: query
        items:
          type: string
        name: include
        type: array
      - enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
        in: query
        items:
          type: string
        name: fields[tasks]
        type: array
      - enum:
        - id
        - projectId
        - entity
        - name
        - description
        - type
        - options
        - visibilities
        - isPrivate
        - required
        - createdAt
        - createdByUserId
        - updatedAt
        - updatedByUserId
        - deleted
        - deletedAt
        - deletedByUserId
        in: query
        items:
          type: string
        name: fields[customfields]
        type: array
      - enum:
        - id
        - customfieldId
        - value
        - createdAt
        - createdBy
        in: query
        items:
          type: string
        name: fields[customfieldTasks]
        type: array
      - description: filter by custom field ids
        in: query
        items:
          type: integer
        name: customFieldIds
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/task.CustomFieldTasksResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Task custom field values.
      tags:
      - CustomFields
      x-private: true
    post:
      consumes:
      - application/json
      description: Add a task custom field value.
      operationId: POST_projects_api_v3_tasks_{taskId}_customfields.json
      parameters:
      - in: body
        name: task.Request
        required: true
        schema:
          $ref: '#/definitions/task.Request'
      - in: path
        name: taskId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: 201 Created
          schema:
            $ref: '#/definitions/task.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Add task custom field value.
      tags:
      - CustomFields
      x-private: true
  /projects/api/v3/tasks/{taskId}/customfields/{customFieldId}.json:
    get:
      description: Return a specific custom field value from a task.
      operationId: GET_projects_api_v3_tasks_{taskId}_customfields_{customFieldId}.json
      parameters:
      - in: path
        name: taskId
        required: true
        type: integer
      - in: path
        name: customFieldId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/task.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Task custom field value.
      tags:
      - CustomFields
      x-private: true
    patch:
      consumes:
      - application/json
      description: Edit a task custom field value.
      operationId: PATCH_projects_api_v3_tasks_{taskId}_customfields_{customFieldId}.json
      parameters:
      - in: body
        name: task.Request
        required: true
        schema:
          $ref: '#/definitions/task.Request'
      - in: path
        name: taskId
        required: true
        type: integer
      - in: path
        name: customFieldId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/task.Response'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
        "409":
          description: 409 Conflict
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update an existing task custom field value.
      tags:
      - CustomFields
      x-private: true
    delete:
      description: Removes a task custom field value.
      operationId: DELETE_projects_api_v3_tasks_{taskId}_customfields_{customFieldId}.json
      parameters:
      - in: path
        name: taskId
        required: true
        type: integer
      - in: path
        name: customFieldId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: 204 No Content (no data)
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Delete an existing task custom field value.
      tags:
      - CustomFields
      x-private: true
  /projects/api/v3/tasks/{taskId}/customfields/bulk/delete.json:
    post:
      consumes:
      - application/json
      description: Remove many entries of task custom field values at once.
      operationId: POST_projects_api_v3_tasks_{taskId}_customfields_bulk_delete.json
      parameters:
      - in: body
        name: task.BulkDeleteRequest
        required: true
        schema:
          $ref: '#/definitions/task.BulkDeleteRequest'
      - in: path
        name: taskId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: 204 No Content (no data)
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Delete many task custom fields values at once.
      tags:
      - CustomFields
      x-private: true
  /projects/api/v3/tasks/{taskId}/customfields/bulk/update.json:
    post:
      consumes:
      - application/json
      description: Edit many entries of task custom field values at once.
      operationId: POST_projects_api_v3_tasks_{taskId}_customfields_bulk_update.json
      parameters:
      - in: body
        name: task.BulkUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/task.BulkUpdateRequest'
      - in: path
        name: taskId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/task.CustomFieldTasksResponse'
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
        "409":
          description: 409 Conflict
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update many task custom field values at once.
      tags:
      - CustomFields
      x-private: true
  /projects/api/v3/tasks/bulk/delete.json:
    post:
      consumes:
      - application/json
      description: Delete several tasks and their subtasks.
      operationId: POST_projects_api_v3_tasks_bulk_delete.json
      parameters:
      - in: body
        name: task.DeleteRequest
        required: true
        schema:
          $ref: '#/definitions/task.DeleteRequest'
      produces:
      - application/json
      responses:
        "204":
          description: 204 No Content (no data)
        "400":
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "403":
          description: 403 Forbidden
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: 404 Not Found (no data)
      summary: Delete many tasks at once.
      tags:
      - Tasks
      x-private: true
  /projects/api/v3/tasks/metrics/complete.json:
    get:
      operationId: GET_projects_api_v3_tasks_metrics_complete.json
      tags:
      - Tasks
      summary: Total count of completed tasks
      description: |-
        Returns the total number of completed tasks. Only the tasks that the
        logged-in user can access will be counted.
      produces:
      - application/json
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/complete.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/tasks/metrics/late.json:
    get:
      operationId: GET_projects_api_v3_tasks_metrics_late.json
      tags:
      - Tasks
      summary: Get total count of late tasks
      description: |-
        Returns the number of late tasks. Only the tasks that the logged-in user has
        access to will be counted.
      produces:
      - application/json
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/late.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/teams/{teamId}/statuses/timeline.json:
    get:
      operationId: GET_projects_api_v3_teams_{teamId}_statuses_timeline.json
      tags:
      - PeopleStatus
      summary: Get statuses timeline for a specific team
      description: |-
        Return people statuses from a specific team that the logged-in user can
        access.
      produces:
      - application/json
      parameters:
      - name: searchTerm
        in: query
        description: filter by the user name or status message
        type: string
      - name: teamId
        in: query
        description: filter by team
        type: integer
      - name: teamId
        in: path
        type: integer
        required: true
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: showDeleted
        in: query
        description: showDeleted statuses
        type: boolean
        default: "false"
      - name: includeSubteams
        in: query
        description: also include statuses from subteams
        type: boolean
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - users
        - userevents
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/status.TimelineResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/time.json:
    get:
      operationId: GET_projects_api_v3_time.json
      tags:
      - TimeTracking
      summary: Get all time entries
      description: |-
        Return all logged time entries for all projects. Only the time entries that
        the logged-in user can access will be returned.
      produces:
      - application/json
      parameters:
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: startDate
        in: query
        description: filter by a starting date
        type: string
        format: date
      - name: selectedColumns
        in: query
        description: customise the report by selecting columns
        type: string
        items: {}
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: projectStatuses
        in: query
        description: filter by project statuses
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: sort order
        type: string
        enum:
        - company
        - date
        - dateupdated
        - project
        - task
        - tasklist
        - user
        default: date
      - name: invoicedType
        in: query
        description: filter by invoiced type
        type: string
        enum:
        - all
        - invoiced
        - not-invoiced
        default: all
      - name: endDate
        in: query
        description: filter by an ending date
        type: string
        format: date
      - name: billableType
        in: query
        description: filter by billable type
        type: string
        enum:
        - all
        - billable
        - non-billable
        default: all
      - name: ticketId
        in: query
        description: filter by ticket id
        type: integer
      - name: tasklistId
        in: query
        description: filter by tasklist id
        type: integer
      - name: projectId
        in: query
        description: filter by project id
        type: integer
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: allocationId
        in: query
        description: filter by allocation id
        type: integer
      - name: showDeleted
        in: query
        description: include deleted items
        type: boolean
        default: "false"
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllTags
        in: query
        description: match all tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
        default: "false"
      - name: taskTagIds
        in: query
        description: filter by task tag ids
        type: array
        items:
          type: integer
      - name: tagIds
        in: query
        description: filter by tag ids
        type: array
        items:
          type: integer
      - name: projectsFromCompanyId
        in: query
        description: filter by project company ids
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - tags
        - tasks
        - tasks.parentTasks
        - tasks.tasklists
        - users
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[timelogs]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - dateCreated
        - minutes
        - description
        - timeLogged
        - billable
        - deleted
        - dateDeleted
        - hasStartTime
        - dateEdited
        - deskTicketId
        - invoiceNumber
        - userId
        - taskId
        - projectId
        - loggedByUserId
        - deletedByUserId
        - editedByUserId
        - taskIdPreMove
        - projectBillingInvoiceId
      - name: fields[tasks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
      - name: fields[tasklists]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - projectId
        - milestoneId
      - name: fields[tags]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - color
        - count
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      - name: companyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: assignedToUserIds
        in: query
        description: filter by assigned user ids
        type: array
        items:
          type: integer
      - name: assignedToTeamIds
        in: query
        description: filter by assigned team ids
        type: array
        items:
          type: integer
      - name: assignedToCompanyIds
        in: query
        description: filter by assigned company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/timelog.TimelogsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/time/total.json:
    get:
      operationId: GET_projects_api_v3_time_total.json
      tags:
      - TimeTracking
      summary: Get timelog totals.
      produces:
      - application/json
      parameters:
      - name: projectStatuses
        in: query
        description: filter by project statuses
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: userId
        in: query
        description: filter by user id
        type: integer
      - name: tasklistId
        in: query
        description: filter by tasklist id
        type: integer
      - name: taskId
        in: query
        description: filter by task id
        type: integer
      - name: projectId
        in: query
        description: filter by project id
        type: integer
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: deskTicketId
        in: query
        description: filter by desk ticket id
        type: integer
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllTags
        in: query
        description: match all tags
        type: boolean
      - name: userIds
        in: query
        description: filter by user ids
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by project company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: companyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/timelog.TotalsResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/timers.json:
    get:
      operationId: GET_projects_api_v3_timers.json
      tags:
      - TimeTracking
      summary: Get all running timers
      description: |-
        Brings back all current running timers. Will return a set of existing intervals for each timer.
        If the timer has never been stopped then this interval will only have a from property set and
        the you will need to calculate the current duration of the timer.
      produces:
      - application/json
      parameters:
      - name: updatedAfterDate
        in: query
        description: filter by updated after date (deprecated, use updatedAfter)
        type: string
        format: date-time
      - name: updatedAfter
        in: query
        description: filter by updated after date
        type: string
        format: date-time
      - name: userId
        in: query
        description: filter by user id
        type: integer
      - name: taskId
        in: query
        description: filter by task id
        type: integer
      - name: projectId
        in: query
        description: filter by project id
        type: integer
      - name: pageSize
        in: query
        description: |-
          number of items in a page
          default: 50
        type: integer
      - name: page
        in: query
        description: |-
          page number
          default: 1
        type: integer
      - name: showDeleted
        in: query
        description: |-
          include deleted items
          default: false
        type: boolean
      - name: runningTimersOnly
        in: query
        description: |-
          enforce running timers only
          default: false
        type: boolean
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - tasks
        - tasks.parentTasks
        - tasks.tasklists
        - users
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[timers]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - userId
        - taskId
        - projectId
        - description
        - running
        - billable
        - deleted
        - dateCreated
        - dateDeleted
        - duration
        - lastStartedAt
        - serverTime
        - intervals
      - name: fields[tasks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
      - name: fields[tasklists]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - projectId
        - milestoneId
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/timer.TimersResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/timers/{timerId}.json:
    get:
      operationId: GET_projects_api_v3_timers_{timerId}.json
      tags:
      - TimeTracking
      summary: Get a specific timer
      description: Will get a timer with with a specific ID
      produces:
      - application/json
      parameters:
      - name: userId
        in: query
        description: filter by user id
        type: integer
      - name: timerId
        in: path
        type: integer
        required: true
      - name: showDeleted
        in: query
        description: filter by task id
        type: boolean
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - projects
        - tasks
        - tasks.parentTasks
        - tasks.tasklists
        - users
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[timers]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - userId
        - taskId
        - projectId
        - description
        - running
        - billable
        - deleted
        - dateCreated
        - dateDeleted
        - duration
        - lastStartedAt
        - serverTime
        - intervals
      - name: fields[tasks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
      - name: fields[tasklists]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - projectId
        - milestoneId
      - name: fields[projects]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/timer.Response'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        404:
          description: 404 Not Found (no data)
  /projects/api/v3/workload.csv:
    get:
      operationId: GET_projects_api_v3_workload.csv
      tags:
      - Workload
      summary: Generate workload report in CSV format
      description: |-
        Generates a workload report in CSV format containing all workload for the
        provided filters. Only the tasks that the logged-in user can access will be
        returned.
      produces:
      - application/json
      - text/csv
      parameters:
      - name: startDate
        in: query
        description: filter by start date
        type: string
        format: date
      - name: searchTerm
        in: query
        description: filter by search term
        type: string
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: projectStatuses
        in: query
        description: filter by project status
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - project
        - company
        - user
        - startDate
        - dueDate
        - estimatedTime
        default: user
      - name: endDate
        in: query
        description: filter by end date
        type: string
        format: date
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: prorataEstimatedTime
        in: query
        description: enable prorata estimated time
        type: boolean
      - name: onlyUntaggedTasks
        in: query
        description: filter for only untagged tasks
        type: boolean
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllTags
        in: query
        description: math all task tags
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: matchAllExcludedTags
        in: query
        description: match all excluded task tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeTasksWithoutDates
        in: query
        description: include tasks without dates
        type: boolean
      - name: distributeEstimatedTimeToAssignees
        in: query
        description: distribute estimated time to assignees
        type: boolean
      - name: tagIds
        in: query
        description: filter by task tag ids
        type: array
        items:
          type: integer
      - name: responsiblePartyIds
        in: query
        description: filter by responsible party IDs
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: excludeTagIds
        in: query
        description: exclude some task tag ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/workload.html:
    get:
      operationId: GET_projects_api_v3_workload.html
      tags:
      - Workload
      summary: Generate workload report in HTML format
      description: |-
        Generates a workload report in HTML format containing all workload for the
        provided filters. Only the tasks that the logged-in user can access will be
        returned.
      produces:
      - application/json
      - text/html
      parameters:
      - name: startDate
        in: query
        description: filter by start date
        type: string
        format: date
      - name: searchTerm
        in: query
        description: filter by search term
        type: string
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: projectStatuses
        in: query
        description: filter by project status
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - project
        - company
        - user
        - startDate
        - dueDate
        - estimatedTime
        default: user
      - name: endDate
        in: query
        description: filter by end date
        type: string
        format: date
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: prorataEstimatedTime
        in: query
        description: enable prorata estimated time
        type: boolean
      - name: onlyUntaggedTasks
        in: query
        description: filter for only untagged tasks
        type: boolean
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllTags
        in: query
        description: math all task tags
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: matchAllExcludedTags
        in: query
        description: match all excluded task tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeTasksWithoutDates
        in: query
        description: include tasks without dates
        type: boolean
      - name: distributeEstimatedTimeToAssignees
        in: query
        description: distribute estimated time to assignees
        type: boolean
      - name: tagIds
        in: query
        description: filter by task tag ids
        type: array
        items:
          type: integer
      - name: responsiblePartyIds
        in: query
        description: filter by responsible party IDs
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: excludeTagIds
        in: query
        description: exclude some task tag ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/workload.pdf:
    get:
      operationId: GET_projects_api_v3_workload.pdf
      tags:
      - Workload
      summary: Generate workload report in PDF format
      description: |-
        Generates a task list report in PDF format containing all workload for the
        provided filters. Only the tasks that the logged-in user can access will be
        returned.
      produces:
      - application/json
      - application/pdf
      parameters:
      - name: startDate
        in: query
        description: filter by start date
        type: string
        format: date
      - name: searchTerm
        in: query
        description: filter by search term
        type: string
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: projectStatuses
        in: query
        description: filter by project status
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - project
        - company
        - user
        - startDate
        - dueDate
        - estimatedTime
        default: user
      - name: endDate
        in: query
        description: filter by end date
        type: string
        format: date
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: prorataEstimatedTime
        in: query
        description: enable prorata estimated time
        type: boolean
      - name: onlyUntaggedTasks
        in: query
        description: filter for only untagged tasks
        type: boolean
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllTags
        in: query
        description: math all task tags
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: matchAllExcludedTags
        in: query
        description: match all excluded task tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeTasksWithoutDates
        in: query
        description: include tasks without dates
        type: boolean
      - name: distributeEstimatedTimeToAssignees
        in: query
        description: distribute estimated time to assignees
        type: boolean
      - name: tagIds
        in: query
        description: filter by task tag ids
        type: array
        items:
          type: integer
      - name: responsiblePartyIds
        in: query
        description: filter by responsible party IDs
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: excludeTagIds
        in: query
        description: exclude some task tag ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/workload.xlsx:
    get:
      operationId: GET_projects_api_v3_workload.xlsx
      tags:
      - Workload
      summary: Generate workload report in XLSX format.
      description: |-
        Generates a workload report in XLSX format containing all workload for the
        provided filters. Only the tasks that the logged-in user can access will be
        returned.
      produces:
      - application/json
      - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
      parameters:
      - name: startDate
        in: query
        description: filter by start date
        type: string
        format: date
      - name: searchTerm
        in: query
        description: filter by search term
        type: string
      - name: reportFormat
        in: query
        description: define the format of the report
        type: string
      - name: projectStatuses
        in: query
        description: filter by project status
        type: string
        items: {}
        enum:
        - active
        - current
        - late
        - upcoming
        - completed
        - deleted
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - project
        - company
        - user
        - startDate
        - dueDate
        - estimatedTime
        default: user
      - name: endDate
        in: query
        description: filter by end date
        type: string
        format: date
      - name: projectHealths
        in: query
        description: |-
          filter by project healths

          0: not set
          1: bad
          2: ok
          3: good
        type: integer
        items: {}
        enum:
        - "0"
        - "1"
        - "2"
        - "3"
      - name: prorataEstimatedTime
        in: query
        description: enable prorata estimated time
        type: boolean
      - name: onlyUntaggedTasks
        in: query
        description: filter for only untagged tasks
        type: boolean
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllTags
        in: query
        description: math all task tags
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: match all project tags
        type: boolean
      - name: matchAllExcludedTags
        in: query
        description: match all excluded task tags
        type: boolean
      - name: isReportDownload
        in: query
        description: generate a report document
        type: boolean
      - name: includeTasksWithoutDates
        in: query
        description: include tasks without dates
        type: boolean
      - name: distributeEstimatedTimeToAssignees
        in: query
        description: distribute estimated time to assignees
        type: boolean
      - name: tagIds
        in: query
        description: filter by task tag ids
        type: array
        items:
          type: integer
      - name: responsiblePartyIds
        in: query
        description: filter by responsible party IDs
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: excludeTagIds
        in: query
        description: exclude some task tag ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK (no data)
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
  /projects/api/v3/workload/planners.json:
    get:
      operationId: GET_projects_api_v3_workload_planners.json
      tags:
      - Workload
      summary: Retrieve user workload planner
      description: Return the workload planner for each users of the installation.
      produces:
      - application/json
      parameters:
      - name: startDate
        in: query
        description: define the start date of the planner
        type: string
        format: date
      - name: searchUserName
        in: query
        description: filter by user name
        type: string
      - name: searchTaskName
        in: query
        description: filter by task name
        type: string
      - name: projectStatuses
        in: query
        description: list of project status
        type: string
        items: {}
      - name: projectStatus
        in: query
        description: filter by project status
        type: string
      - name: orderMode
        in: query
        description: order mode
        type: string
        enum:
        - asc
        - desc
        default: asc
      - name: orderBy
        in: query
        description: order by
        type: string
        enum:
        - name
        - company
        default: name
      - name: endDate
        in: query
        description: define the end date of the planner
        type: string
        format: date
      - name: projectHealths
        in: query
        description: list of project health
        type: integer
        items: {}
      - name: pageSize
        in: query
        description: number of items in a page
        type: integer
        default: "50"
      - name: page
        in: query
        description: page number
        type: integer
        default: "1"
      - name: subtractLoggedTimeFromEstimates
        in: query
        description: subtract logged time from task estimated time
        type: boolean
      - name: prorating
        in: query
        description: include tasks that have the start and due dates outside the window range
        type: boolean
        default: "false"
      - name: onlyUntaggedTasks
        in: query
        description: filter ony untagged tasks
        type: boolean
      - name: onlyStarredProjects
        in: query
        description: filter by starred projects only
        type: boolean
      - name: matchAllProjectTags
        in: query
        description: enforce all tag ids must be matched
        type: boolean
      - name: includeTeamUserIds
        in: query
        description: include team users to the responsible party ids
        type: boolean
        default: "true"
      - name: includeTasksWithoutDates
        in: query
        description: include tasks without start or due date
        type: boolean
      - name: includeCompletedTasks
        in: query
        description: include completed tasks
        type: boolean
      - name: includeCompanyUserIds
        in: query
        description: include company users to the responsible party ids
        type: boolean
        default: "true"
      - name: includeCalendarEvents
        in: query
        description: include calendar events on capacity calculation
        type: boolean
      - name: includeAssigneeTeams
        in: query
        description: include teams related to the responsible party ids
        type: boolean
      - name: includeAssigneeCompanies
        in: query
        description: include companies related to the responsible party ids
        type: boolean
      - name: includeArchivedProjects
        in: query
        description: include archived projects
        type: boolean
      - name: distribute
        in: query
        description: distribute the estimated time for a task between all the assignees
        type: boolean
      - name: teamIds
        in: query
        description: filter by member of team ids
        type: array
        items:
          type: integer
      - name: tagIds
        in: query
        description: filter by task tag ids
        type: array
        items:
          type: integer
      - name: responsiblePartyIds
        in: query
        description: filter by responsible party ids
        type: array
        items:
          type: integer
      - name: projectTagIds
        in: query
        description: filter by project tag ids
        type: array
        items:
          type: integer
      - name: projectOwnerIds
        in: query
        description: filter by project owner ids
        type: array
        items:
          type: integer
      - name: projectIds
        in: query
        description: filter by project ids
        type: array
        items:
          type: integer
      - name: projectCompanyIds
        in: query
        description: filter by company ids
        type: array
        items:
          type: integer
      - name: projectCategoryIds
        in: query
        description: filter by project category ids
        type: array
        items:
          type: integer
      - name: memberOfProjectIds
        in: query
        description: filter by member of project ids
        type: array
        items:
          type: integer
      - name: include
        in: query
        description: include
        type: array
        items:
          type: string
        enum:
        - users
        - users.workingHours
        - users.workingHours.workingHoursEntry
        - tasks
        - tasks.timelogs
        - tasklists
        - milestones
        - companies
        - calendarEvents
      - name: fields[workingHours]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - objectType
        - objectId
        - name
        - description
        - dateCreated
        - dateUpdated
        - entryIds
      - name: fields[workingHourEntries]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - workingHourId
        - weekday
        - startTime
        - endTime
        - taskHours
        - timezone
      - name: fields[users]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - firstName
        - lastName
        - email
        - companyId
        - isAdmin
        - type
      - name: fields[timelogs]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - dateCreated
        - minutes
        - description
        - timeLogged
        - billable
        - deleted
        - dateDeleted
        - hasStartTime
        - dateEdited
        - deskTicketId
        - invoiceNumber
        - userId
        - taskId
        - projectId
        - loggedByUserId
        - deletedByUserId
        - editedByUserId
        - taskIdPreMove
        - projectBillingInvoiceId
      - name: fields[tasks]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - dateUpdated
        - parentTaskId
        - isPrivate
        - status
        - tasklistId
        - startDate
        - dueDate
      - name: fields[tasklists]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - projectId
        - milestoneId
      - name: fields[milestones]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - description
        - deadline
        - completed
        - projectId
        - createdOn
        - lastChangedOn
        - creatorUserId
        - reminder
        - private
        - lockdownId
        - status
        - completedOn
        - completerId
        - percentageComplete
      - name: fields[companies]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - name
        - logoUploadedToServer
        - logoImage
      - name: fields[calendarEvents]
        in: query
        type: array
        items:
          type: string
        enum:
        - id
        - title
        - startDate
        - endDate
        - typeId
        - privacyType
        - allDay
        - location
        - description
        - showAsBusy
        - attendeesCanEdit
        - projectUsersCanEdit
        - monthlyRepeatType
        - dateLastUpdated
        - createdDateTime
        - deleted
        - dateDeleted
        - additionalProperties
        - currentUserAssociationType
        - sequenceId
        - projectId
        - ownerUserId
        - deletedByUserId
        - createdByUserId
        - updatedByUserId
      - name: excludeTagIds
        in: query
        description: filter by removing task tag ids
        type: array
        items:
          type: integer
      - name: companyIds
        in: query
        description: filter by user company id
        type: array
        items:
          type: integer
      - name: assigneeTeamIds
        in: query
        description: filter by assignee team ids
        type: array
        items:
          type: integer
      - name: assigneeCompanyIds
        in: query
        description: filter by assignee company ids
        type: array
        items:
          type: integer
      responses:
        200:
          description: 200 OK
          schema:
            $ref: '#/definitions/planner.WorkloadPlannersResponse'
        400:
          description: 400 Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
definitions:
  active.ProjectMetricActive:
    title: ProjectMetricActive
    description: ProjectMetricActive contains all the information returned from a active.
    type: object
    properties:
      value:
        type: integer
  active.Response:
    title: Response
    description: Response contains information about a specific active.
    type: object
    properties:
      data:
        $ref: '#/definitions/active.ProjectMetricActive'
  activity.ActivitiesResponse:
    title: ActivitiesResponse
    description: |-
      ActivitiesResponse contains all the information returned when sending a GET
      request to the activity endpoint.
    type: object
    properties:
      activities:
        type: array
        items:
          $ref: '#/definitions/activity.Activity'
      included:
        type: object
        properties:
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
  activity.Activity:
    title: Activity
    description: Activity represents a view of activity.
    type: object
    properties:
      activityType:
        type: string
      company:
        $ref: '#/definitions/view.Relationship'
      companyId:
        type: integer
      dateTime:
        type: string
      description:
        type: string
      dueDate:
        type: string
      extraDescription:
        type: string
      forUser:
        $ref: '#/definitions/view.Relationship'
      forUserId:
        type: integer
      forUserName:
        type: string
      id:
        type: integer
      isPrivate:
        type: integer
      item:
        $ref: '#/definitions/view.Relationship'
      itemId:
        type: integer
      itemLink:
        type: string
      latestActivityType:
        type: string
      link:
        type: string
      lockdown:
        $ref: '#/definitions/view.Relationship'
      lockdownId:
        type: integer
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      publicInfo:
        type: string
      type:
        type: string
      user:
        $ref: '#/definitions/view.Relationship'
      userId:
        type: integer
  allocation.Allocation:
    title: Allocation
    description: Allocation contains all the information returned from a allocation.
    type: object
    properties:
      assignedUserID:
        type: integer
      color:
        type: string
      description:
        type: string
      distributeType:
        type: string
      duration:
        description: in minutes
        type: integer
      endedAt:
        $ref: '#/definitions/payload.Date'
      hoursPerDay:
        type: number
      ignoreCollisions:
        type: boolean
      projectId:
        type: integer
      recurringRule:
        $ref: '#/definitions/payload.NullableRRule'
      startedAt:
        $ref: '#/definitions/payload.Date'
      title:
        type: string
  allocation.AllocationsResponse:
    title: AllocationsResponse
    description: AllocationsResponse contains information about a group of allocations.
    type: object
    properties:
      allocations:
        type: array
        items:
          $ref: '#/definitions/view.Allocation'
      included:
        type: object
        properties:
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
  allocation.BulkDeleteRequest:
    title: BulkDeleteRequest
    description: BulkDeleteRequest contains the ids of the allocations that should be removed.
    type: object
    properties:
      allocationIds:
        type: array
        items:
          type: integer
      hardDelete:
        type: boolean
  allocation.DeleteRequest:
    title: DeleteRequest
    description: DeleteRequest contains some options while removing an allocation.
    type: object
    properties:
      hardDelete:
        type: boolean
  allocation.Request:
    title: Request
    description: Request contains information of a allocation to be created or updated.
    type: object
    properties:
      allocation:
        $ref: '#/definitions/allocation.Allocation'
  allocation.Response:
    title: Response
    description: Response contains information about a specific allocation.
    type: object
    properties:
      allocation:
        $ref: '#/definitions/view.Allocation'
  allocation.SplitRequest:
    title: SplitRequest
    description: |-
      SplitRequest contains the time at which to insert the split, and new duration
      of the resulting first allocation.
    type: object
    properties:
      at:
        $ref: '#/definitions/payload.Date'
      duration:
        type: integer
  app.AppsResponse:
    title: AppsResponse
    description: AppsResponse contains information about a group of apps.
    type: object
    properties:
      apps:
        type: array
        items:
          $ref: '#/definitions/view.App'
      included:
        type: object
        properties:
          appsettings:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.AppSetting'
      meta:
        $ref: '#/definitions/view.Meta'
  app.Response:
    title: Response
    description: Response contains information about a specific app.
    type: object
    properties:
      app:
        $ref: '#/definitions/view.App'
      included:
        type: object
        properties:
          appsettings:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.AppSetting'
  arg.CustomField:
    title: CustomField
    description: CustomField stores the id, value and operator of the custom field.
    type: object
    properties:
      ID:
        type: integer
      Operator:
        type: string
      Value:
        type: string
  assignee.FormAssignee:
    title: FormAssignee
    description: FormAssignee contains all the information returned from a assignee.
    type: object
    properties:
      id:
        type: integer
      meta:
        type: object
      type:
        type: string
  assignee.FormAssigneesResponse:
    title: FormAssigneesResponse
    description: FormAssigneesResponse contains information about a group of assignees.
    type: object
    properties:
      assignees:
        type: array
        items:
          $ref: '#/definitions/view.FormAssignee'
      included:
        type: object
        properties:
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          teams:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Team'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
  assignee.Request:
    title: Request
    description: Request contains information of a assignee to be created or updated.
    type: object
    properties:
      assignees:
        type: array
        items:
          $ref: '#/definitions/assignee.FormAssignee'
  assignee.Response:
    title: Response
    description: Response contains information about a specific assignee.
    type: object
    properties:
      assignees:
        type: array
        items:
          $ref: '#/definitions/view.FormAssignee'
      errors:
        type: array
        items:
          $ref: '#/definitions/errors.BulkError'
      included:
        type: object
        properties:
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          teams:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Team'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
  availability.Response:
    title: Response
    description: Response contains information about a specific availability.
    type: object
    properties:
      availability:
        $ref: '#/definitions/view.UserAvailability'
      included:
        type: object
        properties:
          calendarEvents:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.CalendarEvent'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
          workingHourEntries:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.WorkingHourEntry'
          workingHours:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.WorkingHour'
  billable.ProjectMetricBillable:
    title: ProjectMetricBillable
    description: ProjectMetricBillable contains all the information returned from a billable.
    type: object
    properties:
      name:
        type: string
      value:
        type: integer
  billable.ProjectMetricBillablesResponse:
    title: ProjectMetricBillablesResponse
    description: ProjectMetricBillablesResponse contains information about a group of billables.
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/billable.ProjectMetricBillable'
  budget.BulkDeleteRequest:
    title: BulkDeleteRequest
    description: BulkDeleteRequest contains the ids of the budgets that should be removed.
    type: object
    properties:
      budgetIds:
        type: array
        items:
          type: integer
  budget.CapacityUsedAtDate:
    title: CapacityUsedAtDate
    description: CapacityUsedAtDate reprsents the capacity of the
    type: object
    properties:
      date:
        description: RFC3339 formated datetime, when the day starts int UTC time
        type: string
      usage:
        type: number
  budget.ProjectBudget:
    title: ProjectBudget
    description: ProjectBudget contains all the information returned from a budget.
    type: object
    properties:
      capacity:
        type: integer
      currencyCode:
        type: string
      defaultRate:
        type: number
      endDateTime:
        type: string
      expenseType:
        type: string
      id:
        type: integer
      isRepeating:
        type: boolean
      notifications:
        type: array
        items:
          $ref: '#/definitions/notification.ProjectBudgetNotification'
      originatorBudgetID:
        type: integer
      projectId:
        type: integer
      repeatPeriod:
        type: integer
      repeatUnit:
        type: string
      repeatsRemaining:
        type: integer
      sequenceNumber:
        type: integer
      startDateTime:
        type: string
      status:
        type: string
      timelogType:
        type: string
      type:
        type: string
  budget.ProjectBudgetSummary:
    title: ProjectBudgetSummary
    description: ProjectBudgetSummary has a summary with some of the view.ProjectBudget fields
    type: object
    properties:
      capacity:
        type: integer
      capacityUsed:
        type: integer
      endDateTime:
        type: string
      id:
        type: integer
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      startDateTime:
        type: string
      timelogType:
        type: string
      type:
        type: string
  budget.ProjectBudgetUsage:
    title: ProjectBudgetUsage
    description: ProjectBudgetUsage has the summary and daily usage for a ProjectBudget
    type: object
    properties:
      budgetSummary:
        $ref: '#/definitions/budget.ProjectBudgetSummary'
      usageTimeline:
        type: array
        items:
          $ref: '#/definitions/budget.CapacityUsedAtDate'
  budget.ProjectBudgetUsageResponse:
    title: ProjectBudgetUsageResponse
    description: ProjectBudgetUsageResponse contains a list of ProjectBudgetUsage
    type: object
    properties:
      budgetUsages:
        type: array
        items:
          $ref: '#/definitions/budget.ProjectBudgetUsage'
  budget.ProjectBudgetsResponse:
    title: ProjectBudgetsResponse
    description: ProjectBudgetsResponse contains information about a group of budgets.
    type: object
    properties:
      budgets:
        type: array
        items:
          $ref: '#/definitions/view.ProjectBudget'
      included:
        type: object
        properties:
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          notifications:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectBudgetNotification'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          teams:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Team'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
  budget.ProjectBudgetsUsagesResponse:
    title: ProjectBudgetsUsagesResponse
    description: ProjectBudgetsUsagesResponse contains information about a group of budgets.
    type: object
    properties:
      budgetUsages:
        type: array
        items:
          $ref: '#/definitions/budget.ProjectBudgetUsage'
      meta:
        $ref: '#/definitions/view.Meta'
  budget.Request:
    title: Request
    description: Request contains information of a budget to be created or updated.
    type: object
    properties:
      budget:
        $ref: '#/definitions/budget.ProjectBudget'
  budget.Response:
    title: Response
    description: Response contains information about a specific budget.
    type: object
    properties:
      budget:
        $ref: '#/definitions/view.ProjectBudget'
      repeatStatus:
        type: string
  calendar.EventsResponse:
    title: EventsResponse
    description: EventsResponse contains information about a group of calendar events.
    type: object
    properties:
      calendarEvents:
        type: array
        items:
          $ref: '#/definitions/view.CalendarEvent'
      included:
        type: object
        properties:
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
  category.CategoriesResponse:
    title: CategoriesResponse
    description: CategoriesResponse contains information about a group of projects.
    type: object
    properties:
      projects:
        type: array
        items:
          $ref: '#/definitions/view.ProjectCategory'
  change.ChangesResponse:
    title: ChangesResponse
    description: ChangesResponse contains information about a group of changes.
    type: object
    properties:
      changes:
        type: array
        items:
          $ref: '#/definitions/view.Change'
  column.BoardColumnMeta:
    title: BoardColumnMeta
    description: BoardColumnMeta contains user-specific information
    type: object
    properties:
      user:
        type: object
        properties:
          canAddCards:
            type: boolean
          canEdit:
            type: boolean
  column.Response:
    title: Response
    description: Response contains information about a specific column.
    type: object
    properties:
      column:
        $ref: '#/definitions/view.BoardColumn'
      included:
        type: object
        properties:
          tasklists:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tasklist'
      meta:
        $ref: '#/definitions/column.BoardColumnMeta'
  comment.CommentsResponse:
    title: CommentsResponse
    description: CommentsResponse contains information about a group of comments.
    type: object
    properties:
      comments:
        type: array
        items:
          $ref: '#/definitions/comment.FullComment'
      included:
        type: object
        properties:
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          files:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectFile'
          fileversions:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Fileversion'
          links:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.LinkItem'
          milestones:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Milestone'
          notebooks:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Notebook'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          tasks:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Task'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
  comment.FullComment:
    title: FullComment
    description: FullComment contains the full information for a comment
    type: object
    properties:
      body:
        type: string
      contentType:
        type: string
      dateDeleted:
        type: string
      dateLastEdited:
        type: string
      deleted:
        type: boolean
      deletedBy:
        type: integer
      deletedByUserId:
        type: integer
      fileIds:
        type: array
        items:
          type: integer
      files:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      id:
        type: integer
      installation:
        $ref: '#/definitions/view.Relationship'
      installationId:
        type: integer
      lastEditedBy:
        type: integer
      lastEditedByUserId:
        type: integer
      object:
        $ref: '#/definitions/view.Relationship'
      objectId:
        type: integer
      objectType:
        type: string
      peopleNotifiedCount:
        type: integer
      postedBy:
        type: integer
      postedByUserId:
        type: integer
      postedDateTime:
        type: string
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      reactions:
        type: array
        items:
          $ref: '#/definitions/view.Reaction'
      reactionsCount:
        type: integer
  company.Response:
    title: Response
    description: Response contains information about a specific company.
    type: object
    properties:
      company:
        $ref: '#/definitions/view.Company'
      included:
        type: object
        properties:
          countries:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Country'
          industries:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Industry'
          tags:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tag'
  complete.Response:
    title: Response
    description: Response contains information about a specific complete.
    type: object
    properties:
      data:
        $ref: '#/definitions/complete.TaskMetricComplete'
  complete.TaskMetricComplete:
    title: TaskMetricComplete
    description: TaskMetricComplete contains all the information returned from a complete.
    type: object
    properties:
      value:
        type: integer
  customfield.BulkDeleteRequest:
    title: BulkDeleteRequest
    description: |-
      BulkDeleteRequest contains the ids of the custom fields that should be
      removed.
    type: object
    properties:
      customfieldIds:
        type: array
        items:
          type: integer
  customfield.CustomField:
    title: CustomField
    description: CustomField contains all the information returned from a custom field.
    type: object
    properties:
      description:
        type: string
      entity:
        description: using a verbose name to avoid conflict
        type: string
      isPrivate:
        type: boolean
      name:
        type: string
      options: {}
      privacy:
        $ref: '#/definitions/payload.UserGroups'
      projectId:
        type: integer
      required:
        type: boolean
      type:
        type: string
      visibilities:
        type: string
        items: {}
  customfield.CustomFieldsResponse:
    title: CustomFieldsResponse
    description: CustomFieldsResponse contains information about a group of custom fields.
    type: object
    properties:
      customfields:
        type: array
        items:
          $ref: '#/definitions/view.CustomField'
      included:
        type: object
        properties:
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
  customfield.Request:
    title: Request
    description: Request contains information of a custom field to be created or updated.
    type: object
    properties:
      customfield:
        $ref: '#/definitions/customfield.CustomField'
  customfield.Response:
    title: Response
    description: Response contains information about a specific customfield.
    type: object
    properties:
      count:
        type: integer
      customfield:
        $ref: '#/definitions/view.CustomField'
  dashboard.UserDashboardsResponse:
    title: UserDashboardsResponse
    description: UserDashboardsResponse contains information about a group of dashboards.
    type: object
    properties:
      dashboards:
        type: array
        items:
          $ref: '#/definitions/view.UserDashboard'
      included:
        type: object
        properties:
          dashboardPanelSettings:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.UserDashboardPanelSetting'
          dashboardPanels:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.UserDashboardPanel'
          dashboardSettings:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.UserDashboardSetting'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
  deadline.MilestoneMetricDeadline:
    title: MilestoneMetricDeadline
    description: MilestoneMetricDeadline contains all the information returned from a deadline.
    type: object
    properties:
      date:
        type: string
      value:
        type: integer
  deadline.MilestoneMetricDeadlinesResponse:
    title: MilestoneMetricDeadlinesResponse
    description: MilestoneMetricDeadlinesResponse contains information about a group of deadlines.
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/deadline.MilestoneMetricDeadline'
  errors.BulkError:
    title: BulkError
    description: |-
      BulkError stores details related to an error on an api request that
      we may want to present to the user, but do not wish to cancel the
      request over
    type: object
    properties:
      code:
        type: string
      detail:
        type: string
      id: {}
      meta:
        type: object
      source:
        type: string
      statusCode:
        type: integer
      title:
        type: string
  file.ArchiveRequest:
    title: ArchiveRequest
    description: ArchiveRequest contains all file IDs that will be grouped for download.
    type: object
    properties:
      fileIds:
        type: array
        items:
          type: integer
  file.ArchiveResponse:
    title: ArchiveResponse
    description: ArchiveResponse contains the download URL with all desired files.
    type: object
    properties:
      downloadURL:
        type: string
  file.AvailableResponse:
    title: AvailableResponse
    description: AvailableResponse contains information regarding the available space.
    type: object
    properties:
      available:
        type: object
        properties:
          bytes:
            type: integer
  file.ProjectFile:
    title: ProjectFile
    description: ProjectFile contains all the information returned from a file.
    type: object
    properties:
      categoryId:
        type: integer
      description:
        type: string
      name:
        type: string
      notify:
        $ref: '#/definitions/payload.Notify'
      notifyCurrentUser:
        type: boolean
      privacy:
        $ref: '#/definitions/payload.UserGroups'
      private:
        type: boolean
      tagIds:
        $ref: '#/definitions/payload.NullableInt64Slice'
      versionId:
        type: integer
  file.ProjectFilesResponse:
    title: ProjectFilesResponse
    description: ProjectFilesResponse contains information about a group of files.
    type: object
    properties:
      files:
        type: array
        items:
          $ref: '#/definitions/view.ProjectFile'
      included:
        type: object
        properties:
          comments:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Comment'
          fileCategories:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectFileCategory'
          messages:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectMessage'
          permissions:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.FilePermissions'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          tags:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tag'
          tasks:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Task'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
  file.ProjectUsage:
    title: ProjectUsage
    description: ProjectUsage contains information regarding files usage on a project.
    type: object
    properties:
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      total:
        type: integer
      totalAsText:
        type: string
  file.Request:
    title: Request
    description: Request contains information of a file to be created or updated.
    type: object
    properties:
      file:
        $ref: '#/definitions/file.ProjectFile'
  file.Response:
    title: Response
    description: Response contains information about a specific file.
    type: object
    properties:
      file:
        $ref: '#/definitions/view.ProjectFile'
      included:
        type: object
        properties:
          comments:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Comment'
          fileCategories:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectFileCategory'
          messages:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectMessage'
          permissions:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.FilePermissions'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          tags:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tag'
          tasks:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Task'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
  file.UsageResponse:
    title: UsageResponse
    description: UsageResponse contains information regarding files usage on the account.
    type: object
    properties:
      filesUsage:
        type: object
        properties:
          overuse:
            type: integer
          overuseAsText:
            type: string
          projects:
            type: array
            items:
              $ref: '#/definitions/file.ProjectUsage'
          total:
            type: integer
          totalAllowed:
            type: integer
          totalAllowedAsText:
            type: string
          totalAsText:
            type: string
          totalRemaining:
            type: integer
          totalRemainingAsText:
            type: string
      included:
        type: object
        properties:
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
  fileversion.Fileversion:
    title: Fileversion
    description: Fileversion contains all the information returned from a fileversion.
    type: object
    properties:
      categoryId:
        type: integer
      description:
        type: string
      fileData:
        type: string
      fileRef:
        type: string
      fileSize:
        type: integer
      fileSource:
        type: string
      id:
        type: integer
      name:
        type: string
      notify:
        $ref: '#/definitions/payload.Notify'
      notifyCurrentUser:
        type: boolean
      pendingFileRef:
        type: string
      privacy:
        $ref: '#/definitions/payload.UserGroups'
      private:
        type: boolean
      projectId:
        type: integer
  fileversion.Request:
    title: Request
    description: Request contains information of a fileversion to be created or updated.
    type: object
    properties:
      fileversion:
        $ref: '#/definitions/fileversion.Fileversion'
  fileversion.Response:
    title: Response
    description: Response contains information about a specific fileversion.
    type: object
    properties:
      fileversion:
        $ref: '#/definitions/view.Fileversion'
      included:
        type: object
        properties:
          files:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectFile'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
  form.Banner:
    title: Banner
    description: Banner contains information of a form banner to be created or updated.
    type: object
    properties:
      url:
        type: string
      x:
        type: number
      "y":
        type: number
  form.Content:
    title: Content
    description: Content contains information of a form content to be created or updated.
    type: object
    properties:
      banner:
        $ref: '#/definitions/form.Banner'
      definition:
        type: string
      description:
        type: string
      name:
        type: string
      state:
        type: string
  form.Form:
    title: Form
    description: Form contains information of a form to be created or updated.
    type: object
    properties:
      confirmationMessage:
        type: string
      content:
        $ref: '#/definitions/form.Content'
      hostObject:
        $ref: '#/definitions/form.HostObject'
      promptAdditionalSubmissions:
        type: boolean
      taskTitleFieldId:
        type: string
  form.FormsResponse:
    title: FormsResponse
    description: FormsResponse contains information about a group of forms.
    type: object
    properties:
      forms:
        type: array
        items:
          $ref: '#/definitions/view.Form'
      included:
        type: object
        properties:
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
  form.HostObject:
    title: HostObject
    description: HostObject contains information of a form host object to be created or updated.
    type: object
    properties:
      id:
        type: integer
      meta:
        $ref: '#/definitions/form.HostObjectMeta'
      type:
        type: string
  form.HostObjectMeta:
    title: HostObjectMeta
    description: HostObjectMeta contains information of a form host object meta to be created or updated.
    type: object
    properties:
      tasklistId:
        type: integer
  form.PublicResponse:
    title: PublicResponse
    description: PublicResponse contains information about a specific public form.
    type: object
    properties:
      form:
        $ref: '#/definitions/view.PublicForm'
  form.Request:
    title: Request
    description: Request contains information of a form to be created or updated.
    type: object
    properties:
      form:
        $ref: '#/definitions/form.Form'
  form.Response:
    title: Response
    description: Response contains information about a specific form.
    type: object
    properties:
      form:
        $ref: '#/definitions/view.Form'
      included:
        type: object
        properties:
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
  form.Submission:
    title: Submission
    description: Submission contains information of a form submitted by a user.
    type: object
    properties:
      data:
        type: object
      version:
        type: integer
  form.SubmissionRequest:
    title: SubmissionRequest
    description: SubmissionRequest contains information of a form submitted by a user.
    type: object
    properties:
      form:
        $ref: '#/definitions/form.Submission'
  health.ProjectMetricHealth:
    title: ProjectMetricHealth
    description: ProjectMetricHealth stores a specific health counter.
    type: object
    properties:
      name:
        type: string
      value:
        type: integer
  health.ProjectMetricHealthsResponse:
    title: ProjectMetricHealthsResponse
    description: |-
      ProjectMetricHealthsResponse contains information about a group of healths.
      Following this format to satisfy the Numerics integration.
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/health.ProjectMetricHealth'
  importer.Importer:
    title: Importer
    description: Importer single importer for response.
    type: object
    properties:
      name:
        type: string
      running:
        type: boolean
      status:
        type: string
  importer.ImportersResponse:
    title: ImportersResponse
    description: ImportersResponse contains information about a group of importers.
    type: object
    properties:
      importers:
        type: array
        items:
          $ref: '#/definitions/importer.Importer'
      isImporting:
        type: boolean
  invoice.ProjectMetricInvoicesResponse:
    title: ProjectMetricInvoicesResponse
    description: ProjectMetricInvoicesResponse contains information about a group of invoices.
    type: object
    properties:
      data:
        type: object
        properties:
          value:
            type: integer
  late.Response:
    title: Response
    description: |-
      Response contains the count of late tasks.
      Following this format to satisfy the Numerics integration.
    type: object
    properties:
      data:
        $ref: '#/definitions/late.TaskMetricLate'
  late.TaskMetricLate:
    title: TaskMetricLate
    description: TaskMetricLate contains count information about late tasks.
    type: object
    properties:
      value:
        type: integer
  lockdown.Response:
    title: Response
    description: Response contains information about a specific lockdown.
    type: object
    properties:
      included:
        type: object
        properties:
          comments:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Comment'
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          files:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectFile'
          links:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.LinkItem'
          messages:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectMessage'
          milestones:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Milestone'
          notebooks:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Notebook'
          tasklists:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tasklist'
          tasks:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Task'
          teams:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Team'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      lockdown:
        $ref: '#/definitions/view.Lockdown'
  message.Request:
    title: Request
    description: Request contains information of a message to be created or updated.
    type: object
    properties:
      read:
        type: boolean
  milestone.MilestonesResponse:
    title: MilestonesResponse
    description: MilestonesResponse contains information about a group of milestones.
    type: object
    properties:
      included:
        type: object
        properties:
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          tags:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tag'
          tasklists:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tasklist'
          tasks:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Task'
          teams:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Team'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
      milestones:
        type: array
        items:
          $ref: '#/definitions/view.Milestone'
  milestone.Response:
    title: Response
    description: Response contains information about a milestone.
    type: object
    properties:
      included:
        type: object
        properties:
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          tags:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tag'
          tasklists:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tasklist'
          tasks:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Task'
          teams:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Team'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      milestone:
        $ref: '#/definitions/view.Milestone'
  notebook.Notebook:
    title: Notebook
    description: Notebook contains all the information returned from a notebook.
    type: object
    properties:
      categoryId:
        type: integer
      contents:
        type: string
      description:
        type: string
      isPrivate:
        type: boolean
      locked:
        type: boolean
      name:
        type: string
      newVersion:
        type: boolean
      notify:
        $ref: '#/definitions/payload.Notify'
      notifyCurrentUser:
        type: boolean
      privacy:
        $ref: '#/definitions/payload.UserGroups'
      secureContent:
        type: boolean
      sendDiff:
        type: boolean
      tagIds:
        type: array
        items:
          type: integer
      type:
        type: string
  notebook.NotebooksResponse:
    title: NotebooksResponse
    description: NotebooksResponse contains information about a group of notebooks.
    type: object
    properties:
      included:
        type: object
        properties:
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          notebookCategories:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.NotebookCategory'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          tags:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tag'
          teams:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Team'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
      notebooks:
        type: array
        items:
          $ref: '#/definitions/view.Notebook'
  notebook.Request:
    title: Request
    description: Request contains information of a notebook to be created or updated.
    type: object
    properties:
      notebook:
        $ref: '#/definitions/notebook.Notebook'
  notebook.Response:
    title: Response
    description: Response contains information about a specific notebook.
    type: object
    properties:
      included:
        type: object
        properties:
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          notebookCategories:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.NotebookCategory'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          tags:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tag'
          teams:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Team'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      notebook:
        $ref: '#/definitions/view.Notebook'
  notebook.VersionResponse:
    title: VersionResponse
    description: VersionResponse contains information about a specifc notebook version
    type: object
    properties:
      included:
        type: object
        properties:
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      version:
        $ref: '#/definitions/view.NotebookVersion'
  notebook.VersionsResponse:
    title: VersionsResponse
    description: VersionsResponse contains information about a group of notebook versions
    type: object
    properties:
      included:
        type: object
        properties:
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      versions:
        type: array
        items:
          $ref: '#/definitions/view.NotebookVersion'
  notification.ProjectBudgetNotification:
    title: ProjectBudgetNotification
    description: ProjectBudgetNotification contains all the information returned from a notification.
    type: object
    properties:
      budgetId:
        type: integer
      capacityThreshold:
        type: number
      companyIds:
        type: array
        items:
          type: integer
      id:
        type: integer
      notificationMedium:
        type: string
      projectId:
        type: integer
      teamIds:
        type: array
        items:
          type: integer
      userIds:
        type: array
        items:
          type: integer
  notification.Request:
    title: Request
    description: Request contains information of a notification to be created or updated.
    type: object
    properties:
      notification:
        $ref: '#/definitions/notification.ProjectBudgetNotification'
  notification.Response:
    title: Response
    description: Response contains information about a specific notification.
    type: object
    properties:
      notification:
        $ref: '#/definitions/view.ProjectBudgetNotification'
  owner.ProjectMetricOwner:
    title: ProjectMetricOwner
    description: ProjectMetricOwner contains information about a specific owner.
    type: object
    properties:
      name:
        type: string
      value:
        type: integer
  owner.ProjectMetricOwnersResponse:
    title: ProjectMetricOwnersResponse
    description: ProjectMetricOwnersResponse contains information about a group of owners.
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/owner.ProjectMetricOwner'
      meta:
        $ref: '#/definitions/view.Meta'
  payload.Date:
    title: Date
    description: Date unmarshals represents a Unified API Spec date format.
    type: object
  payload.Notify:
    title: Notify
    description: Notify defines the access lists.
    type: object
    properties:
      ids:
        $ref: '#/definitions/payload.UserGroups'
      type:
        type: string
  payload.NullableInt64Slice:
    title: NullableInt64Slice
    description: |-
      NullableInt64Slice implements json.Unmarshaler to allow testing between a
      value that explicitly set to null or omitted.
    type: object
    properties:
      "Null":
        type: boolean
      Set:
        type: boolean
      Value:
        type: array
        items:
          type: integer
  payload.NullableRRule:
    title: NullableRRule
    description: |-
      NullableRRule implements json.Unmarshaler to allow testing
      between a value that explicitly set to null or omitted.
    type: object
    properties:
      Location:
        $ref: '#/definitions/time.Location'
      "Null":
        type: boolean
      Set:
        type: boolean
  payload.UserGroups:
    title: UserGroups
    description: |-
      UserGroups are common lists for storing users, companies and teams ids
      together.
    type: object
    properties:
      companyIds:
        $ref: '#/definitions/payload.NullableInt64Slice'
      teamIds:
        $ref: '#/definitions/payload.NullableInt64Slice'
      userIds:
        $ref: '#/definitions/payload.NullableInt64Slice'
  people.MultiResponse:
    title: MultiResponse
    description: MultiResponse contains information about a group of users.
    type: object
    properties:
      included:
        type: object
        properties:
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
      meta:
        $ref: '#/definitions/view.Meta'
      people:
        type: array
        items:
          $ref: '#/definitions/view.User'
  people.Response:
    title: Response
    description: Response contains information about a user.
    type: object
    properties:
      included:
        type: object
        properties:
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
      person:
        $ref: '#/definitions/view.User'
  performance.PeopleMetricPerformance:
    title: PeopleMetricPerformance
    description: PeopleMetricPerformance contains all the information returned from a performance.
    type: object
    properties:
      name:
        type: string
      value:
        type: integer
  performance.PeopleMetricPerformancesResponse:
    title: PeopleMetricPerformancesResponse
    description: PeopleMetricPerformancesResponse contains information about a group of performances.
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/performance.PeopleMetricPerformance'
  planner.WorkloadPlanner:
    title: WorkloadPlanner
    description: WorkloadPlanner contains all the information returned from a planner.
    type: object
    properties:
      capacities:
        type: object
        additionalProperties:
          $ref: '#/definitions/planner.WorkloadPlannerCapacity'
      user:
        $ref: '#/definitions/view.Relationship'
      userId:
        type: integer
  planner.WorkloadPlannerCapacity:
    title: WorkloadPlannerCapacity
    description: |-
      WorkloadPlannerCapacity contains the information regarding an user on a
      specific date.
    type: object
    properties:
      capacity:
        description: percentage
        type: number
      estimateMinutesTotal:
        type: number
      lengthOfDayMinutes:
        type: number
      tasks:
        type: array
        items:
          $ref: '#/definitions/planner.WorkloadPlannerCapacityTask'
  planner.WorkloadPlannerCapacityTask:
    title: WorkloadPlannerCapacityTask
    description: |-
      WorkloadPlannerCapacityTask provides how many minutes should a user work in a
      task for a specific date.
    type: object
    properties:
      estimateMinutes:
        type: number
      taskId:
        type: integer
  planner.WorkloadPlannersResponse:
    title: WorkloadPlannersResponse
    description: WorkloadPlannersResponse contains information about a group of planners.
    type: object
    properties:
      included:
        type: object
        properties:
          calendarEvents:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.CalendarEvent'
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          milestones:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Milestone'
          tasklists:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tasklist'
          tasks:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Task'
          timelogs:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Timelog'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
          workingHourEntries:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.WorkingHourEntry'
          workingHours:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.WorkingHour'
      meta:
        $ref: '#/definitions/view.Meta'
      planners:
        type: array
        items:
          $ref: '#/definitions/planner.WorkloadPlanner'
  project.BulkDeleteRequest:
    title: BulkDeleteRequest
    description: |-
      BulkDeleteRequest contains the ids of the customfields that should be
      removed.
    type: object
    properties:
      customfieldProjectIds:
        type: array
        items:
          type: integer
  project.BulkUpdateRequest:
    title: BulkUpdateRequest
    description: |-
      BulkUpdateRequest contains the the project custom field values that should be
      updated.
    type: object
    properties:
      customfieldProjects:
        type: array
        items:
          $ref: '#/definitions/project.EditCustomFieldProject'
  project.CustomFieldProject:
    title: CustomFieldProject
    description: CustomFieldProject contains all the information returned from a customfield.
    type: object
    properties:
      customfieldId:
        type: integer
      value: {}
  project.CustomFieldProjectsResponse:
    title: CustomFieldProjectsResponse
    description: |-
      CustomFieldProjectsResponse contains information about a group of
      project custom field values.
    type: object
    properties:
      customfieldProjects:
        type: array
        items:
          $ref: '#/definitions/view.CustomFieldProject'
      included:
        type: object
        properties:
          customfields:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.CustomField'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
      meta:
        $ref: '#/definitions/view.Meta'
  project.EditCustomFieldProject:
    title: EditCustomFieldProject
    description: |-
      EditCustomFieldProject contains all the information to update a project
      custom field value.
    type: object
    properties:
      customfieldId:
        type: integer
      id:
        type: integer
      value: {}
  project.FeatureOrder:
    title: FeatureOrder
    description: |-
      FeatureOrder is the payload used to set
      the project features order as we want to appear
      in the UI tabs selection
    type: object
    properties:
      billing:
        type: integer
      board:
        type: integer
      comments:
        type: integer
      dashboard:
        type: integer
      files:
        type: integer
      gantt:
        type: integer
      links:
        type: integer
      list:
        type: integer
      messages:
        type: integer
      milestones:
        type: integer
      notebooks:
        type: integer
      numVisibleTabs:
        type: integer
      people:
        type: integer
      risks:
        type: integer
      settings:
        type: integer
      table:
        type: integer
      time:
        type: integer
  project.FeatureOrderDefaults:
    title: FeatureOrderDefaults
    description: |-
      FeatureOrderDefaults is the payload used to set
      the defaults for all projects feature order, and
      allows to also update the projects that have
      an explicitly set defaults
    type: object
    properties:
      billing:
        type: integer
      board:
        type: integer
      comments:
        type: integer
      dashboard:
        type: integer
      files:
        type: integer
      gantt:
        type: integer
      links:
        type: integer
      list:
        type: integer
      messages:
        type: integer
      milestones:
        type: integer
      notebooks:
        type: integer
      numVisibleTabs:
        type: integer
      people:
        type: integer
      risks:
        type: integer
      settings:
        type: integer
      table:
        type: integer
      time:
        type: integer
  project.FeatureOrderResponse:
    title: FeatureOrderResponse
    description: |-
      FeatureOrderResponse is the api response containing
      information about the order to display the featues in the UI.
    type: object
    properties:
      featureOrder:
        $ref: '#/definitions/project.FeatureOrder'
  project.ProjectsResponse:
    title: ProjectsResponse
    description: ProjectsResponse contains information about a group of projects.
    type: object
    properties:
      included:
        type: object
        properties:
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          customfieldProjects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.CustomFieldProject'
          customfields:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.CustomField'
          portfolioBoards:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.PortfolioBoard'
          portfolioCards:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.PortfolioCard'
          portfolioColumns:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.PortfolioColumn'
          projectBudgets:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectBudget'
          projectCategories:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectCategory'
          projectTaskStats:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectTaskStats'
          projectUpdates:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectUpdate'
          tags:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tag'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
      projects:
        type: array
        items:
          $ref: '#/definitions/view.Project'
  project.Request:
    title: Request
    description: Request contains information of a customfield to be created or updated.
    type: object
    properties:
      customfieldProject:
        $ref: '#/definitions/project.CustomFieldProject'
  project.Response:
    title: Response
    description: Response contains information about a specific project custom field value.
    type: object
    properties:
      customfieldProject:
        $ref: '#/definitions/view.CustomFieldProject'
  project.SampleProjectsResponse:
    title: SampleProjectsResponse
    description: SampleProjectsResponse contains information about a group of sample projects.
    type: object
    properties:
      included:
        type: object
        properties:
          projectCategories:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectCategory'
      meta:
        $ref: '#/definitions/view.Meta'
      projects:
        type: array
        items:
          $ref: '#/definitions/view.SampleProject'
  project.SingleResponse:
    title: SingleResponse
    description: SingleResponse contains information about a project.
    type: object
    properties:
      included:
        type: object
        properties:
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          customfieldProjects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.CustomFieldProject'
          customfields:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.CustomField'
          portfolioBoards:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.PortfolioBoard'
          portfolioCards:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.PortfolioCard'
          portfolioColumns:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.PortfolioColumn'
          projectBudgets:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectBudget'
          projectCategories:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectCategory'
          projectTaskStats:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectTaskStats'
          projectUpdates:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.ProjectUpdate'
          tags:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tag'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      project:
        $ref: '#/definitions/view.Project'
  rates.InstallationUserRateResponse:
    title: InstallationUserRateResponse
    description: InstallationUserRateResponse contains info about a set of users installation rates
    type: object
    properties:
      userRates:
        type: array
        items:
          $ref: '#/definitions/view.InstallationUserRate'
  rates.RateResponse:
    title: RateResponse
    description: RateResponse contains information about a specific rate.
    type: object
    properties:
      rate:
        type: integer
  rates.Request:
    title: Request
    description: Request contains information of a rates to be created or updated.
    type: object
    properties:
      rate:
        type: integer
  risk.Risk:
    title: Risk
    description: Risk represents a view of a risk.
    type: object
    properties:
      canEdit:
        type: boolean
      createdAt:
        type: string
      createdBy:
        type: integer
      createdByUserId:
        type: integer
      createdOn:
        type: string
      deleted:
        type: boolean
      id:
        type: integer
      impact:
        type: string
      impactCost:
        type: boolean
      impactPerformance:
        type: boolean
      impactSchedule:
        type: boolean
      impactValue:
        type: integer
      lastChangedByUserId:
        type: integer
      lastChangedOn:
        type: string
      mitigationPlan:
        type: string
      probability:
        type: string
      probabilityValue:
        type: integer
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      result:
        type: integer
      source:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: integer
  risk.RisksResponse:
    title: RisksResponse
    description: |-
      RisksResponse contains all the information returned when sending a GET
      request to the risk endpoint.
    type: object
    properties:
      included:
        type: object
        properties:
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
      risks:
        type: array
        items:
          $ref: '#/definitions/risk.Risk'
  schedule.ProjectSchedulesResponse:
    title: ProjectSchedulesResponse
    description: ProjectSchedulesResponse contains information about a group of schedules.
    type: object
    properties:
      included:
        type: object
        properties:
          allocations:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Allocation'
          calendarEvents:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.CalendarEvent'
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          milestones:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Milestone'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          timelogs:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Timelog'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
      projectSchedules:
        type: array
        items:
          $ref: '#/definitions/view.ProjectSchedule'
  schedule.UserSchedulesResponse:
    title: UserSchedulesResponse
    description: UserSchedulesResponse contains information about a group of schedules.
    type: object
    properties:
      included:
        type: object
        properties:
          allocations:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Allocation'
          calendarEvents:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.CalendarEvent'
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          timelogs:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Timelog'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
      userSchedules:
        type: array
        items:
          $ref: '#/definitions/view.UserSchedule'
  setting.AppSetting:
    title: AppSetting
    description: AppSetting contains all the information returned from a setting.
    type: object
    properties:
      value:
        type: string
  setting.Request:
    title: Request
    description: Request contains information of a setting to be created or updated.
    type: object
    properties:
      appsetting:
        $ref: '#/definitions/setting.AppSetting'
  setting.Response:
    title: Response
    description: Response contains information about a specific setting.
    type: object
    properties:
      appsetting:
        $ref: '#/definitions/view.AppSetting'
  status.TimelineResponse:
    title: TimelineResponse
    description: TimelineResponse contains information about a group of statuses.
    type: object
    properties:
      included:
        type: object
        properties:
          userEvents:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.UserEvents'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
      statuses:
        type: array
        items:
          $ref: '#/definitions/view.Status'
  summary.ColumnCardResponse:
    title: ColumnCardResponse
    description: ColumnCardResponse contains counters from column's cards.
    type: object
    properties:
      active:
        type: integer
      archived:
        type: integer
      completed:
        type: integer
      count:
        type: integer
  summary.ColumnDataResponse:
    title: ColumnDataResponse
    description: ColumnDataResponse contains information of a specific column.
    type: object
    properties:
      cards:
        $ref: '#/definitions/summary.ColumnCardResponse'
      color:
        type: string
      estimatedTime:
        $ref: '#/definitions/summary.ColumnEstimatedResponse'
      id:
        type: integer
      name:
        type: string
  summary.ColumnEstimatedResponse:
    title: ColumnEstimatedResponse
    description: |-
      ColumnEstimatedResponse contains estimated counters about the
      columns's state.
    type: object
    properties:
      active:
        type: integer
      archived:
        type: integer
      completed:
        type: integer
      total:
        type: integer
  summary.ColumnResponse:
    title: ColumnResponse
    description: ColumnResponse contains counters for columns.
    type: object
    properties:
      count:
        type: integer
      data:
        type: array
        items:
          $ref: '#/definitions/summary.ColumnDataResponse'
  summary.EventResponse:
    title: EventResponse
    description: EventResponse contains counters for events.
    type: object
    properties:
      today:
        type: integer
      upcoming:
        type: integer
  summary.HealthResponse:
    title: HealthResponse
    description: HealthResponse contains counters for health.
    type: object
    properties:
      "0":
        type: integer
      "1":
        type: integer
      "2":
        type: integer
      "3":
        type: integer
  summary.MilestoneCountsResponse:
    title: MilestoneCountsResponse
    description: MilestoneCountsResponse contains counters for milestones.
    type: object
    properties:
      active:
        type: integer
      complete:
        type: integer
      late:
        type: integer
      today:
        type: integer
      upcoming:
        type: integer
  summary.MilestoneResponse:
    title: MilestoneResponse
    description: MilestoneResponse contains groups of counter for milestones.
    type: object
    properties:
      everyone:
        $ref: '#/definitions/summary.MilestoneCountsResponse'
      mine:
        $ref: '#/definitions/summary.MilestoneCountsResponse'
  summary.ProjectResponse:
    title: ProjectResponse
    description: |-
      ProjectResponse contains all the information returned when sending
      a GET request to the summary endpoint (project).
    type: object
    properties:
      columns:
        $ref: '#/definitions/summary.ColumnResponse'
      events:
        $ref: '#/definitions/summary.EventResponse'
      health:
        $ref: '#/definitions/summary.HealthResponse'
      milestones:
        $ref: '#/definitions/summary.MilestoneResponse'
      risks:
        $ref: '#/definitions/summary.RiskResponse'
      since:
        $ref: '#/definitions/summary.SinceResponse'
      tasks:
        $ref: '#/definitions/summary.ProjectTasksResponse'
      time:
        $ref: '#/definitions/summary.TimeResponse'
      unread:
        $ref: '#/definitions/summary.UnreadResponse'
  summary.ProjectTasksResponse:
    title: ProjectTasksResponse
    description: ProjectTasksResponse contains groups of counters tasks.
    type: object
    properties:
      everyone:
        $ref: '#/definitions/summary.TaskResponse'
      mine:
        $ref: '#/definitions/summary.TaskResponse'
      user:
        $ref: '#/definitions/summary.TaskResponse'
  summary.Response:
    title: Response
    description: |-
      Response contains all the information returned when sending a GET
      request to the summary endpoint (dashboard).
    type: object
    properties:
      columns:
        $ref: '#/definitions/summary.ColumnResponse'
      events:
        $ref: '#/definitions/summary.EventResponse'
      health:
        $ref: '#/definitions/summary.HealthResponse'
      milestones:
        $ref: '#/definitions/summary.MilestoneCountsResponse'
      risks:
        $ref: '#/definitions/summary.RiskResponse'
      since:
        $ref: '#/definitions/summary.SinceResponse'
      tasks:
        $ref: '#/definitions/summary.TaskResponse'
      time:
        $ref: '#/definitions/summary.TimeCounterResponse'
      unread:
        $ref: '#/definitions/summary.UnreadResponse'
  summary.RiskResponse:
    title: RiskResponse
    description: RiskResponse contains counters for risks.
    type: object
    properties:
      closed:
        type: integer
      open:
        type: integer
      pending:
        type: integer
      total:
        type: integer
  summary.SinceResponse:
    title: SinceResponse
    description: SinceResponse contains counters for since.
    type: object
    properties:
      dateTime:
        type: string
      events:
        type: integer
      tasksComplete:
        type: integer
      tasksCreated:
        type: integer
  summary.TaskResponse:
    title: TaskResponse
    description: TaskResponse contains counters for tasks.
    type: object
    properties:
      active:
        type: integer
      complete:
        type: integer
      late:
        type: integer
      nodate:
        type: integer
      started:
        type: integer
      today:
        type: integer
      upcoming:
        type: integer
  summary.TimeCounterEstimateResponse:
    title: TimeCounterEstimateResponse
    description: TimeCounterEstimateResponse contains estimate counters for times.
    type: object
    properties:
      activeMinsEstimated:
        type: integer
      completedMinsEstimated:
        type: integer
      totalMinsEstimated:
        type: integer
      totalWithTimeLoggedEstimatedMins:
        type: integer
  summary.TimeCounterResponse:
    title: TimeCounterResponse
    description: TimeCounterResponse contains counters for times.
    type: object
    properties:
      estimates:
        $ref: '#/definitions/summary.TimeCounterEstimateResponse'
      totals:
        $ref: '#/definitions/summary.TimeCounterTotalResponse'
  summary.TimeCounterTotalResponse:
    title: TimeCounterTotalResponse
    description: TimeCounterTotalResponse contains total counters for times.
    type: object
    properties:
      billableMinsSum:
        type: integer
      billedMinsSum:
        type: integer
      nonBillableMinsSum:
        type: integer
      nonBilledMinsSum:
        type: integer
      totalMinsSum:
        type: integer
  summary.TimeResponse:
    title: TimeResponse
    description: TimeResponse contains counters for times' groups.
    type: object
    properties:
      all:
        $ref: '#/definitions/summary.TimeCounterResponse'
      mine:
        $ref: '#/definitions/summary.TimeCounterResponse'
  summary.UnreadResponse:
    title: UnreadResponse
    description: UnreadResponse contains counters for unread objects.
    type: object
    properties:
      comments:
        type: integer
      messages:
        type: integer
  tag.BulkDeleteRequest:
    title: BulkDeleteRequest
    description: BulkDeleteRequest contains the ids of the tags that should be removed.
    type: object
    properties:
      tagIds:
        type: array
        items:
          type: integer
      tagNames:
        type: string
  tag.Request:
    title: Request
    description: Request contains information of a tag to be created or updated.
    type: object
    properties:
      tag:
        $ref: '#/definitions/tag.Tag'
  tag.Response:
    title: Response
    description: Response contains information about a specific tag.
    type: object
    properties:
      tag:
        $ref: '#/definitions/view.Tag'
  tag.Tag:
    title: Tag
    description: Tag contains all the information returned from a tag.
    type: object
    properties:
      color:
        type: string
      name:
        type: string
      projectId:
        type: integer
  tag.TagsResponse:
    title: TagsResponse
    description: TagsResponse contains information about a group of tags.
    type: object
    properties:
      meta:
        $ref: '#/definitions/view.Meta'
      tags:
        type: array
        items:
          $ref: '#/definitions/view.Tag'
  task.BulkDeleteRequest:
    title: BulkDeleteRequest
    description: |-
      BulkDeleteRequest contains the ids of the customfields that should be
      removed.
    type: object
    properties:
      customfieldTaskIds:
        type: array
        items:
          type: integer
  task.BulkUpdateRequest:
    title: BulkUpdateRequest
    description: |-
      BulkUpdateRequest contains the the task custom field values that should be
      updated.
    type: object
    properties:
      customfieldTasks:
        type: array
        items:
          $ref: '#/definitions/task.EditCustomFieldTask'
  task.Card:
    title: Card
    description: Card stores information about the card created with the task.
    type: object
    properties:
      columnId:
        type: integer
  task.CommonOptions:
    title: CommonOptions
    description: CommonOptions contains any options common to most task endpoints
    type: object
    properties:
      fireWebhook:
        type: boolean
      logActivity:
        type: boolean
      useNotifyViaTWIM:
        type: boolean
  task.CustomFieldTask:
    title: CustomFieldTask
    description: CustomFieldTask contains all the information returned from a customfield.
    type: object
    properties:
      customfieldId:
        type: integer
      value: {}
  task.CustomFieldTasksResponse:
    title: CustomFieldTasksResponse
    description: |-
      CustomFieldTasksResponse contains information about a group of
      task custom field values.
    type: object
    properties:
      customfieldTasks:
        type: array
        items:
          $ref: '#/definitions/view.CustomFieldTask'
      included:
        type: object
        properties:
          customfields:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.CustomField'
          tasks:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Task'
      meta:
        $ref: '#/definitions/view.Meta'
  task.DeleteRequest:
    title: DeleteRequest
    description: DeleteRequest contains the ids of the tasks that should be removed.
    type: object
    properties:
      taskIds:
        type: array
        items:
          type: integer
      taskOptions:
        $ref: '#/definitions/task.CommonOptions'
  task.EditCustomFieldTask:
    title: EditCustomFieldTask
    description: |-
      EditCustomFieldTask contains all the information to update a task
      custom field value.
    type: object
    properties:
      customfieldId:
        type: integer
      id:
        type: integer
      value: {}
  task.File:
    title: File
    description: File stores information about a uploaded file.
    type: object
    properties:
      categoryId:
        type: integer
      id:
        type: integer
  task.Options:
    title: Options
    description: |-
      Options contains any options which can be set
      for the task request
    type: object
    properties:
      everyoneMustDo:
        type: boolean
      fireWebhook:
        type: boolean
      isTemplate:
        type: boolean
      logActivity:
        type: boolean
      notify:
        type: boolean
      parseInlineTags:
        type: boolean
      positionAfterTaskId:
        type: integer
      shiftProjectDates:
        type: boolean
      useDefaults:
        type: boolean
      useNotifyViaTWIM:
        type: boolean
  task.PendingFile:
    title: PendingFile
    description: PendingFile stores information about a file uploaded on-the-fly.
    type: object
    properties:
      categoryId:
        type: integer
      reference:
        type: string
  task.Predecessor:
    title: Predecessor
    description: Predecessor stores information about task predecessors.
    type: object
    properties:
      id:
        type: integer
      type:
        type: string
  task.Reminder:
    title: Reminder
    description: Reminder stores all necessary information to create a task reminder.
    type: object
    properties:
      isRelative:
        type: boolean
      note:
        type: string
      peopleAssigned:
        type: boolean
      relativeNumberDays:
        type: integer
      remindAt:
        type: string
      type:
        type: string
      userId:
        type: integer
      usingOffsetDueDate:
        type: boolean
  task.RepeatOptions:
    title: RepeatOptions
    description: RepeatOptions stores recurring information for the task.
    type: object
    properties:
      duration:
        type: integer
      endsAt:
        $ref: '#/definitions/payload.Date'
      frequency:
        type: string
      monthlyRepeatType:
        type: string
      selectedDays:
        type: string
  task.Request:
    title: Request
    description: Request contains information of a task to be created or updated.
    type: object
    properties:
      attachmentOptions:
        type: object
        properties:
          removeOtherFiles:
            type: boolean
      attachments:
        type: object
        properties:
          files:
            type: array
            items:
              $ref: '#/definitions/task.File'
          pendingFiles:
            type: array
            items:
              $ref: '#/definitions/task.PendingFile'
      card:
        $ref: '#/definitions/task.Card'
      predecessors:
        type: array
        items:
          $ref: '#/definitions/task.Predecessor'
      tags:
        type: array
        items:
          $ref: '#/definitions/tag.Tag'
      task:
        $ref: '#/definitions/task.Task'
      taskOptions:
        $ref: '#/definitions/task.Options'
  task.Response:
    title: Response
    description: Response contains information about a specific task.
    type: object
    properties:
      included:
        type: object
        properties:
          cards:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.TaskCard'
          columns:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.BoardColumn'
          comments:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Comment'
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          milestones:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Milestone'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          tags:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tag'
          tasklists:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tasklist'
          teams:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Team'
          timeTotals:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.TaskTimeTotals'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      task:
        $ref: '#/definitions/view.Task'
  task.Task:
    title: Task
    description: Task contains all the information returned from a task.
    type: object
    properties:
      assignees:
        $ref: '#/definitions/payload.UserGroups'
      attachmentIds:
        type: array
        items:
          type: integer
      changeFollowers:
        $ref: '#/definitions/payload.UserGroups'
      commentFollowers:
        $ref: '#/definitions/payload.UserGroups'
      createdAt:
        type: string
      createdBy:
        type: integer
      crmDealIds:
        type: array
        items:
          type: integer
      customFields:
        type: array
        items:
          $ref: '#/definitions/task.CustomFieldTask'
      description:
        type: string
      dueAt:
        $ref: '#/definitions/payload.Date'
      estimatedMinutes:
        type: integer
      grantAccessTo:
        $ref: '#/definitions/payload.UserGroups'
      name:
        type: string
      parentTaskId:
        type: integer
      priority:
        type: string
      private:
        type: boolean
      progress:
        type: integer
      reminders:
        type: array
        items:
          $ref: '#/definitions/task.Reminder'
      repeatOptions:
        $ref: '#/definitions/task.RepeatOptions'
      startAt:
        $ref: '#/definitions/payload.Date'
      status:
        type: string
      tagIds:
        type: array
        items:
          type: integer
      tasklistId:
        type: integer
      templateRoleName:
        type: string
      ticketId:
        type: integer
  task.TasksResponse:
    title: TasksResponse
    description: TasksResponse contains information about a group of tasks.
    type: object
    properties:
      included:
        type: object
        properties:
          cards:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.TaskCard'
          columns:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.BoardColumn'
          comments:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Comment'
          companies:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Company'
          milestones:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Milestone'
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          tags:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tag'
          tasklists:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tasklist'
          teams:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Team'
          timeTotals:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.TaskTimeTotals'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
      tasks:
        type: array
        items:
          $ref: '#/definitions/view.Task'
  time.Location:
    title: Location
    description: |-
      A Location maps time instants to the zone in use at that time.
      Typically, the Location represents the collection of time offsets
      in use in a geographical area. For many Locations the time offset varies
      depending on whether daylight savings time is in use at the time instant.
    type: object
  timelog.TimelogsResponse:
    title: TimelogsResponse
    description: TimelogsResponse contains information about a group of timelogs.
    type: object
    properties:
      included:
        type: object
        properties:
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          tags:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tag'
          tasklists:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tasklist'
          tasks:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Task'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
      timelogs:
        type: array
        items:
          $ref: '#/definitions/view.Timelog'
  timelog.TotalsResponse:
    title: TotalsResponse
    description: TotalsResponse contains information about timelog totals.
    type: object
    properties:
      time-totals:
        $ref: '#/definitions/view.TimelogTotals'
  timer.DeleteRequest:
    title: DeleteRequest
    description: |-
      DeleteRequest contains the whether or not a timer should be hard deleted
      or soft deleted. Hard delete will remove the timer row from the DB and
      remove its timer intervals. Soft delete will just mark it as deleted.
    type: object
    properties:
      hardDelete:
        type: boolean
  timer.Request:
    title: Request
    description: Request contains information of a timer to be created or updated.
    type: object
    properties:
      timer:
        $ref: '#/definitions/timer.Timer'
  timer.Response:
    title: Response
    description: |-
      Response contains the information returned when sending a PUT/POST
      request to the timers endpoint, or GET request for a single item by ID
    type: object
    properties:
      included:
        type: object
        properties:
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          tasklists:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tasklist'
          tasks:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Task'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      timer:
        $ref: '#/definitions/view.Timer'
  timer.Timer:
    title: Timer
    description: Timer contains all the information returned from a timer.
    type: object
    properties:
      description:
        type: string
      isBillable:
        type: boolean
      isRunning:
        type: boolean
      projectId:
        type: integer
      seconds:
        type: integer
      stopRunningTimers:
        type: boolean
      taskId:
        type: integer
  timer.TimersResponse:
    title: TimersResponse
    description: |-
      TimersResponse contains all the information returned when sending a GET
      request to the timers endpoint.
    type: object
    properties:
      included:
        type: object
        properties:
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          tasklists:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Tasklist'
          tasks:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Task'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
      timers:
        type: array
        items:
          $ref: '#/definitions/view.Timer'
  token.FormToken:
    title: FormToken
    description: FormToken contains all the information returned from a token.
    type: object
    properties:
      expires:
        type: boolean
      expiryDate:
        type: string
      state:
        type: string
  token.Request:
    title: Request
    description: Request contains information of a token to be created or updated.
    type: object
    properties:
      token:
        $ref: '#/definitions/token.FormToken'
  token.Response:
    title: Response
    description: Response contains information about a specific token.
    type: object
    properties:
      token:
        $ref: '#/definitions/view.FormToken'
  unbilled.ProjectMetricUnbilledResponse:
    title: ProjectMetricUnbilledResponse
    description: |-
      ProjectMetricUnbilledResponse contains information about a group of unbilled
      invoices.
    type: object
    properties:
      data:
        type: object
        properties:
          value:
            type: integer
  update.ProjectUpdatesResponse:
    title: ProjectUpdatesResponse
    description: ProjectUpdatesResponse contains information about a group of updates.
    type: object
    properties:
      included:
        type: object
        properties:
          projects:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.Project'
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
      projectUpdates:
        type: array
        items:
          $ref: '#/definitions/view.ProjectUpdate'
  usercost.Request:
    title: Request
    description: Request contains information of a usercost to be created or updated.
    type: object
    properties:
      cost:
        type: integer
  usercost.Response:
    title: Response
    description: Response contains information about a specific usercost.
    type: object
    properties:
      usercost:
        $ref: '#/definitions/view.Usercost'
  utilization.Response:
    title: Response
    description: Response contains information about a specific availability.
    type: object
    properties:
      included:
        type: object
        properties:
          users:
            type: object
            additionalProperties:
              $ref: '#/definitions/view.User'
      meta:
        $ref: '#/definitions/view.Meta'
      utilization:
        type: array
        items:
          $ref: '#/definitions/view.UserUtilization'
  view.Allocation:
    title: Allocation
    description: Allocation contains all the information returned from a allocation.
    type: object
    properties:
      assignedUser:
        $ref: '#/definitions/view.Relationship'
      assignedUserID:
        type: integer
      availableDuration:
        description: in minutes
        type: integer
      color:
        type: string
      createdAt:
        type: string
      createdBy:
        type: integer
      deletedAt:
        type: string
      deletedBy:
        type: integer
      description:
        type: string
      distributeType:
        type: string
      duration:
        description: in minutes
        type: integer
      endedAt:
        $ref: '#/definitions/view.Date'
      hoursPerDay:
        type: number
      id:
        type: integer
      installation:
        $ref: '#/definitions/view.Relationship'
      installationId:
        type: integer
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      recurringRule:
        type: string
      startedAt:
        $ref: '#/definitions/view.Date'
      status:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: integer
  view.App:
    title: App
    description: App contains all the information returned from a app.
    type: object
    properties:
      appsettings:
        description: |-
          Settings is an optional list of config settings for the App
          can be used to build up an options panel
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      baseUrl:
        description: BaseURL is the CDN location for the latest version of the App
        type: string
      code:
        description: Code is a text unique identifier slug for the App
        type: string
      createdAt:
        description: CreatedAt is the date the app was created
        type: string
      description:
        description: Description is a detailed description of the App
        type: string
      id:
        description: ID is the unique identifier for the App
        type: integer
      isInstalled:
        description: IsInstalled denotes if the app can be used by the installation
        type: boolean
      isUninstallable:
        description: |-
          IsUninstallable denotes if the app can be removed, some apps are
          added by default and can't be removed.
        type: boolean
      isVerified:
        description: IsVerified denotes if the App has been verified by Teamwork for usage
        type: boolean
      logoURL:
        description: LogoURL is the URL to the Apps logo if it has one
        type: string
      name:
        description: name is the human readable name
        type: string
      publisher:
        $ref: '#/definitions/view.Relationship'
      shortDescription:
        description: ShortDescription is a snippet of information detailing the app
        type: string
      updatedAt:
        description: CreatedAt is the date the app was last updated
        type: string
      url:
        description: URL is the location of the App feature page on the marketplace
        type: string
      verifiedAt:
        description: VerifiedAt, if provided, is the date the App was verified by Teamwork
        type: string
  view.AppSetting:
    title: AppSetting
    description: AppSetting contains all the information returned from a setting.
    type: object
    properties:
      defaultValue:
        description: DefaultValue is the value returned if Value is empty.
        type: string
      displayName:
        description: DisplayName is what the user should see when presented with the setting name.
        type: string
      id:
        description: ID is the unique identifier for the setting.
        type: integer
      isSecret:
        description: IsSecret if true the DefaultValue and Value fields will be redacted.
        type: boolean
      name:
        description: Name is the code name for the setting - usually not displayed to a user.
        type: string
      type:
        description: Type.
        type: string
        enum:
        - STRING
        - INT
      value:
        description: Value is the current value for the setting - if empty DefaultValue is used.
        type: string
  view.Audit:
    title: Audit
    description: Audit represents the changes of a field.
    type: object
    properties:
      after: {}
      before: {}
      field:
        type: string
  view.Banner:
    title: Banner
    description: Banner contains all the information returned from a form banner.
    type: object
    properties:
      url:
        type: string
      x:
        type: number
      "y":
        type: number
  view.BoardColumn:
    title: BoardColumn
    description: BoardColumn contains all the information returned from a column.
    type: object
    properties:
      color:
        type: string
      createdAt:
        type: string
      defaultTasklist:
        $ref: '#/definitions/view.Relationship'
      deleted:
        type: boolean
      deletedAt:
        type: string
      displayOrder:
        type: integer
      hasTriggers:
        type: boolean
      id:
        type: integer
      name:
        type: string
      project:
        $ref: '#/definitions/view.Relationship'
      settings:
        $ref: '#/definitions/view.BoardColumnSettings'
      sort:
        type: string
      sortOrder:
        type: string
      stats:
        $ref: '#/definitions/view.ColumnStats'
      updatedAt:
        type: string
  view.BoardColumnSettings:
    title: BoardColumnSettings
    description: BoardColumnSettings contains all the settings for a column.
    type: object
    properties:
      assignee:
        type: boolean
      avatar:
        type: boolean
      comments:
        type: boolean
      dependencies:
        type: boolean
      endAt:
        type: boolean
      estimatedtime:
        type: boolean
      files:
        type: boolean
      followers:
        type: boolean
      name:
        type: boolean
      priority:
        type: boolean
      private:
        type: boolean
      progress:
        type: boolean
      recurring:
        type: boolean
      reminders:
        type: boolean
      startAt:
        type: boolean
      subtasklabel:
        type: boolean
      subtasktext:
        type: boolean
      tags:
        type: boolean
      tasklist:
        type: boolean
      tickets:
        type: boolean
      time:
        type: boolean
  view.CalendarEvent:
    title: CalendarEvent
    description: CalendarEvent contains all the information returned from a calendar event.
    type: object
    properties:
      additionalProperties:
        type: string
      allDay:
        type: boolean
      attendeesCanEdit:
        type: boolean
      attendingUserIds:
        type: array
        items:
          type: integer
      attendingUsers:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      createdAt:
        type: string
      createdBy:
        type: integer
      createdByUserId:
        type: integer
      createdDateTime:
        type: string
      currentUserAssociationType:
        type: string
      dateDeleted:
        type: string
      dateLastUpdated:
        type: string
      deleted:
        type: boolean
      deletedAt:
        type: string
      deletedBy:
        type: integer
      deletedByUserId:
        type: integer
      description:
        type: string
      endDate:
        type: string
      id:
        type: integer
      location:
        type: string
      monthlyRepeatType:
        type: string
      ownedBy:
        type: integer
      ownerUserId:
        type: integer
      privacyType:
        type: string
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      projectUsersCanEdit:
        type: boolean
      sequence:
        $ref: '#/definitions/view.Relationship'
      sequenceId:
        type: integer
      showAsBusy:
        type: boolean
      startDate:
        type: string
      title:
        type: string
      type:
        $ref: '#/definitions/view.Relationship'
      typeId:
        type: integer
      updatedAt:
        type: string
      updatedBy:
        type: integer
      updatedByUserId:
        type: integer
  view.Change:
    title: Change
    description: Change contains all the information returned from a change.
    type: object
    properties:
      id:
        type: integer
      lastUpdatedDate:
        type: string
      parent:
        $ref: '#/definitions/view.Relationship'
      parentId:
        type: integer
  view.ColumnStats:
    title: ColumnStats
    description: ColumnStats contains stats about a column
    type: object
    properties:
      active:
        type: integer
      completed:
        type: integer
      estimatedTime:
        type: integer
      total:
        type: integer
  view.Comment:
    title: Comment
    description: Comment contains all the information returned from a comment.
    type: object
    properties:
      id:
        type: integer
      object:
        $ref: '#/definitions/view.Relationship'
      objectId:
        type: integer
      objectType:
        type: string
      title:
        type: string
  view.Company:
    title: Company
    description: Company contains all the information returned from a company.
    type: object
    properties:
      accounts:
        type: integer
      addressOne:
        type: string
      addressTwo:
        type: string
      canSeePrivate:
        type: boolean
      cid:
        type: string
      city:
        type: string
      clientUsers:
        type: integer
      companyNameUrl:
        type: string
      contacts:
        type: integer
      countryCode:
        type: string
      emailOne:
        type: string
      emailThree:
        type: string
      emailTwo:
        type: string
      fax:
        type: string
      id:
        type: integer
      industry:
        $ref: '#/definitions/view.Relationship'
      industryId:
        type: integer
      isOwner:
        type: boolean
      logoUrl:
        type: string
      name:
        type: string
      phone:
        type: string
      privateNotesText:
        type: string
      profileText:
        type: string
      state:
        type: string
      website:
        type: string
      zip:
        type: string
  view.Content:
    title: Content
    description: Content contains all the information returned from a form token.
    type: object
    properties:
      banner:
        $ref: '#/definitions/view.Banner'
      definition:
        type: string
      description:
        type: string
      name:
        type: string
      state:
        type: string
      version:
        type: integer
  view.Country:
    title: Country
    description: Country represents all the information returned from a country.
    type: object
    properties:
      code:
        type: string
      country:
        type: string
      eu:
        type: boolean
      phoneCode:
        type: string
      vatName:
        type: string
      vatPercent:
        type: integer
  view.CustomField:
    title: CustomField
    description: CustomField contains all the information returned from a custom field.
    type: object
    properties:
      createdAt:
        type: string
      createdBy:
        type: integer
      createdByUserId:
        type: integer
      deleted:
        type: boolean
      deletedAt:
        type: string
      deletedBy:
        type: integer
      deletedByUserId:
        type: integer
      description:
        type: string
      entity:
        type: string
      id:
        type: integer
      isPrivate:
        type: boolean
      name:
        type: string
      options: {}
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      required:
        type: boolean
      type:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: integer
      updatedByUserId:
        type: integer
      visibilities:
        type: string
        items: {}
  view.CustomFieldProject:
    title: CustomFieldProject
    description: |-
      CustomFieldProject contains all the information returned from a project
      customfield value.
    type: object
    properties:
      createdAt:
        type: string
      createdBy:
        type: integer
      customfield:
        $ref: '#/definitions/view.Relationship'
      customfieldId:
        type: integer
      id:
        type: integer
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      value: {}
  view.CustomFieldTask:
    title: CustomFieldTask
    description: |-
      CustomFieldTask contains all the information returned from a task customfield
      value.
    type: object
    properties:
      createdAt:
        type: string
      createdBy:
        type: integer
      customfield:
        $ref: '#/definitions/view.Relationship'
      customfieldId:
        type: integer
      id:
        type: integer
      task:
        $ref: '#/definitions/view.Relationship'
      taskId:
        type: integer
      value: {}
  view.Date:
    title: Date
    description: Date represents a Unified API Spec date format.
    type: object
  view.Error:
    title: Error
    description: Error describes an API error.
    type: object
    properties:
      code:
        description: Code is an application-specific error code.
        type: string
      detail:
        description: |-
          Detail is a human-readable explanation specific to this occurrence of the
          problem.
        type: string
      id:
        description: ID is a reference for this exact instance of the error.
        type: string
      meta:
        description: Meta contains tags that are useful to detect specific issues.
        type: object
      title:
        description: Title is a short, human-readable summary of the problem.
        type: string
  view.ErrorResponse:
    title: ErrorResponse
    description: ErrorResponse defines how []Error should be marshaled to JSON.
    type: object
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/view.Error'
  view.FilePermissions:
    title: FilePermissions
    description: FilePermissions determine the permissions associated with a file.
    type: object
    properties:
      canAddFiles:
        type: boolean
      canDelete:
        type: boolean
      canEdit:
        type: boolean
  view.Fileversion:
    title: Fileversion
    description: Fileversion contains all the information returned from a fileversion.
    type: object
    properties:
      commentsCount:
        type: integer
      commentsCountRead:
        type: integer
      description:
        type: string
      displayName:
        type: string
      file:
        $ref: '#/definitions/view.Relationship'
      fileId:
        type: integer
      fileVersionId:
        type: integer
      name:
        type: string
      originalName:
        type: string
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      reactions:
        $ref: '#/definitions/view.ReactionsForObject'
      size:
        type: integer
      status:
        type: string
      uploadedBy:
        type: integer
      versionNo:
        type: integer
  view.Form:
    title: Form
    description: Form contains all the information returned from a form.
    type: object
    properties:
      confirmationMessage:
        type: string
      content:
        $ref: '#/definitions/view.Content'
      createdAt:
        type: string
      createdBy:
        $ref: '#/definitions/view.Relationship'
      deletedAt:
        type: string
      deletedBy:
        $ref: '#/definitions/view.Relationship'
      hostObject:
        $ref: '#/definitions/view.Relationship'
      id:
        type: integer
      installation:
        $ref: '#/definitions/view.Relationship'
      isShared:
        type: boolean
      promptAdditionalSubmissions:
        type: boolean
      state:
        type: string
      taskTitleFieldId:
        type: string
      token:
        $ref: '#/definitions/view.Token'
      updatedAt:
        type: string
      updatedBy:
        $ref: '#/definitions/view.Relationship'
  view.FormAssignee:
    title: FormAssignee
    description: FormAssignee contains all the information returned from a assignee.
    type: object
    properties:
      id:
        type: integer
      type:
        type: string
  view.FormToken:
    title: FormToken
    description: FormToken contains all the information returned from a token.
    type: object
    properties:
      canonicalURL:
        type: string
      createdAt:
        type: string
      createdBy:
        $ref: '#/definitions/view.Relationship'
      deletedAt:
        type: string
      deletedBy:
        $ref: '#/definitions/view.Relationship'
      expires:
        type: boolean
      expiryDate:
        type: string
      form:
        $ref: '#/definitions/view.Relationship'
      id:
        type: integer
      installation:
        $ref: '#/definitions/view.Relationship'
      state:
        type: string
      updatedAt:
        type: string
      updatedBy:
        $ref: '#/definitions/view.Relationship'
      value:
        type: string
  view.Industry:
    title: Industry
    description: Industry contains all the information returned from an industry.
    type: object
    properties:
      displayOrder:
        type: integer
      id:
        type: integer
      industryCategory:
        $ref: '#/definitions/view.Relationship'
      industryCategoryId:
        type: integer
      isActive:
        type: boolean
      isPublished:
        type: boolean
      name:
        type: string
  view.InstallationUserRate:
    title: InstallationUserRate
    description: InstallationUserRate contains information about a users installation rate
    type: object
    properties:
      installationRate:
        type: integer
      user:
        $ref: '#/definitions/view.Relationship'
      userId:
        type: integer
  view.LinkItem:
    title: LinkItem
    description: LinkItem contains all the information returned from a link item.
    type: object
    properties:
      category:
        $ref: '#/definitions/view.Relationship'
      categoryId:
        type: integer
      code:
        type: string
      createdAt:
        type: string
      createdBy:
        type: integer
      deleted:
        type: boolean
      deletedAt:
        type: string
      deletedBy:
        type: integer
      description:
        type: string
      forceNewWindow:
        type: integer
      height:
        type: integer
      id:
        type: integer
      isPrivate:
        type: boolean
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      provider:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: integer
      width:
        type: integer
  view.Lockdown:
    title: Lockdown
    description: Lockdown contains all the information returned from a lockdown.
    type: object
    properties:
      grantAccessTo:
        $ref: '#/definitions/view.UserGroups'
      id:
        type: integer
      item:
        $ref: '#/definitions/view.Relationship'
      itemID:
        type: integer
      itemType:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/view.Relationship'
      userID:
        type: integer
  view.Meta:
    title: Meta
    description: Meta represents the Unified API meta object.
    type: object
    properties:
      page:
        $ref: '#/definitions/view.MetaPage'
  view.MetaPage:
    title: MetaPage
    description: MetaPage represents the Unified API page meta object.
    type: object
    properties:
      count:
        type: integer
      hasMore:
        type: boolean
      pageOffset:
        type: integer
      pageSize:
        type: integer
  view.Milestone:
    title: Milestone
    description: Milestone contains all the information returned from a milestone.
    type: object
    properties:
      canComplete:
        type: boolean
      canEdit:
        description: permissions
        type: boolean
      changeFollowerIds:
        type: array
        items:
          type: integer
      changeFollowers:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      commentFollowerIds:
        type: array
        items:
          type: integer
      commentFollowers:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      commentsCount:
        type: integer
      completed:
        type: boolean
      completedBy:
        type: integer
      completedOn:
        type: string
      completerId:
        type: integer
      createdBy:
        type: integer
      createdOn:
        type: string
      creatorUserId:
        type: integer
      deadline:
        type: string
      description:
        type: string
      id:
        type: integer
      isDeleted:
        type: boolean
      lastChangedOn:
        type: string
      latestUpdates:
        type: array
        items:
          $ref: '#/definitions/view.Audit'
      lockdown:
        $ref: '#/definitions/view.Relationship'
      lockdownId:
        type: integer
      name:
        type: string
      numCommentsRead:
        type: integer
      originalDueDate:
        type: string
      percentageComplete:
        type: integer
      percentageTasksCompleted:
        type: integer
      private:
        type: boolean
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      reminder:
        type: boolean
      responsibleParties:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      responsiblePartyIds:
        description: optional fields that are returned only when querying a milestone endpoint
        type: array
        items:
          type: integer
      status:
        type: string
      tagIds:
        type: array
        items:
          type: integer
      tags:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      tasklistIds:
        type: array
        items:
          type: integer
      tasklists:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      updatedBy:
        type: integer
      userFollowingChanges:
        type: boolean
      userFollowingComments:
        type: boolean
  view.NewTaskDefaults:
    title: NewTaskDefaults
    description: NewTaskDefaults contains new task defaults for the default tasklist
    type: object
    properties:
      dueDate:
        type: string
      estimatedMinutes:
        type: integer
      priority:
        type: string
      responisblePartyIds:
        $ref: '#/definitions/view.UserGroups'
      startDate:
        type: string
      tags:
        type: array
        items:
          type: integer
  view.Notebook:
    title: Notebook
    description: Notebook contains all the information returned from a notebook.
    type: object
    properties:
      category:
        $ref: '#/definitions/view.Relationship'
      categoryId:
        type: integer
      changeFollowers:
        $ref: '#/definitions/view.UserGroups'
      commentFollowers:
        $ref: '#/definitions/view.UserGroups'
      commentsCount:
        type: integer
      contentHTML:
        type: string
      contents:
        type: string
      createdAt:
        type: string
      createdBy:
        type: integer
      createdByUserID:
        type: integer
      dateCreated:
        type: string
      dateDeleted:
        type: string
      dateUpdated:
        type: string
      deleted:
        type: boolean
      deletedAt:
        type: string
      deletedBy:
        type: integer
      deletedByUserID:
        type: integer
      description:
        type: string
      id:
        type: integer
      isPrivate:
        type: boolean
      latestVersionNo:
        type: integer
      lockdown:
        $ref: '#/definitions/view.Relationship'
      lockdownId:
        type: integer
      locked:
        type: boolean
      lockedAt:
        type: string
      lockedBy:
        type: integer
      name:
        type: string
      notebookVersion:
        $ref: '#/definitions/view.Relationship'
      notebookVersionCreatedDateTime:
        type: string
      notebookVersionID:
        type: integer
      notebookVersionUpdatedDateTime:
        type: string
      privacy:
        $ref: '#/definitions/view.UserGroups'
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      readCommentsCount:
        type: integer
      secureContent:
        type: boolean
      tagIds:
        type: array
        items:
          type: integer
      tags:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      type:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: integer
      updatedByUserID:
        type: integer
      userFollowingChanges:
        type: boolean
      userFollowingComments:
        type: boolean
      versionCount:
        type: integer
  view.NotebookCategory:
    title: NotebookCategory
    description: NotebookCategory contains all the information returned from a notebook category.
    type: object
    properties:
      color:
        type: string
      elementsCount:
        type: integer
      id:
        type: integer
      name:
        type: string
      parent:
        $ref: '#/definitions/view.Relationship'
      parentId:
        type: integer
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
  view.NotebookVersion:
    title: NotebookVersion
    description: NotebookVersion contains all the information returned from a notebook version.
    type: object
    properties:
      contentHTML:
        type: string
      contents:
        type: string
      createdAt:
        type: string
      createdBy:
        type: integer
      createdByUserID:
        type: integer
      dateCreated:
        type: string
      dateUpdated:
        type: string
      notebook:
        $ref: '#/definitions/view.Relationship'
      notebookId:
        type: integer
      updatedAt:
        type: string
      versionId:
        type: integer
      versionNumber:
        type: integer
  view.PortfolioBoard:
    title: PortfolioBoard
    description: PortfolioBoard contains all the information returned from a portfolio board.
    type: object
    properties:
      color:
        type: string
      id:
        type: integer
      name:
        type: string
  view.PortfolioCard:
    title: PortfolioCard
    description: |-
      PortfolioCard contains all the information returned from a portfolio
      column.
    type: object
    properties:
      column:
        $ref: '#/definitions/view.Relationship'
      columnId:
        type: integer
      id:
        type: integer
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
  view.PortfolioColumn:
    title: PortfolioColumn
    description: |-
      PortfolioColumn contains all the information returned from a portfolio
      column.
    type: object
    properties:
      color:
        type: string
      id:
        type: integer
      name:
        type: string
  view.Project:
    title: Project
    description: Project contains all the information returned from a project.
    type: object
    properties:
      activePages:
        type: object
        properties:
          billing:
            type: boolean
          board:
            type: boolean
          comments:
            type: boolean
          files:
            type: boolean
          forms:
            type: boolean
          gantt:
            type: boolean
          links:
            type: boolean
          list:
            type: boolean
          messages:
            type: boolean
          milestones:
            type: boolean
          notebooks:
            type: boolean
          riskRegister:
            type: boolean
          table:
            type: boolean
          tasks:
            type: boolean
          time:
            type: boolean
      category:
        $ref: '#/definitions/view.Relationship'
      categoryId:
        type: integer
      company:
        $ref: '#/definitions/view.Relationship'
      companyId:
        type: integer
      createdAt:
        type: string
      createdBy:
        type: integer
      customFieldValueIds:
        type: array
        items:
          type: integer
      customFieldValues:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      defaultPrivacy:
        type: string
      description:
        type: string
      directFileUploadsEnabled:
        type: boolean
      endDate:
        type: string
      financialBudget:
        $ref: '#/definitions/view.Relationship'
      financialBudgetId:
        type: integer
      harvestTimersEnabled:
        type: boolean
      id:
        type: integer
      integrations:
        type: object
        properties:
          oneDriveBusiness:
            type: object
            properties:
              account:
                type: string
              enabled:
                type: boolean
              folder:
                type: string
              folderName:
                type: string
          sharepoint:
            type: object
            properties:
              account:
                type: string
              enabled:
                type: boolean
              folder:
                type: string
              folderName:
                type: string
          xero:
            type: object
            properties:
              baseCurrency:
                type: string
              connected:
                type: boolean
              countryCode:
                type: string
              enabled:
                type: boolean
              organisation:
                type: string
      isOnBoardingProject:
        type: boolean
      isSampleProject:
        type: boolean
      isStarred:
        type: boolean
      logo:
        type: string
      minMaxAvailableDates:
        $ref: '#/definitions/view.ProjectMinMaxAvailableDates'
      name:
        type: string
      notifyCommentIncludeCreator:
        type: boolean
      notifyEveryone:
        type: boolean
      overviewStartPage:
        type: string
      ownedBy:
        type: integer
      ownerId:
        type: integer
      privacyEnabled:
        type: boolean
      projectOwnerId:
        type: integer
      replyByEmailEnabled:
        type: boolean
      showAnnouncement:
        type: boolean
      skipWeekends:
        type: boolean
      startDate:
        type: string
      startPage:
        type: string
      status:
        type: string
      subStatus:
        type: string
      tagIds:
        type: array
        items:
          type: integer
      tags:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      tasksStartPage:
        type: string
      timeBudget:
        $ref: '#/definitions/view.Relationship'
      timeBudgetId:
        type: integer
      type:
        type: string
      updateId:
        type: integer
      updatedAt:
        type: string
      updatedBy:
        type: integer
  view.ProjectBudget:
    title: ProjectBudget
    description: ProjectBudget contains all the information returned from a budget.
    type: object
    properties:
      capacity:
        type: integer
      capacityUsed:
        type: integer
      completedAt:
        type: string
      completedBy:
        type: integer
      completedByUserId:
        type: integer
      createdAt:
        type: string
      createdBy:
        type: integer
      createdByUserId:
        type: integer
      currencyCode:
        type: string
      dateCompleted:
        type: string
      dateCreated:
        type: string
      dateDeleted:
        type: string
      dateUpdated:
        type: string
      defaultRate:
        type: number
      deletedAt:
        type: string
      deletedBy:
        type: integer
      deletedByUserId:
        type: integer
      endDateTime:
        type: string
      expenseType:
        type: string
      id:
        type: integer
      isRepeating:
        type: boolean
      notificationIds:
        type: array
        items:
          type: integer
      notifications:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      originatorBudget:
        $ref: '#/definitions/view.Relationship'
      originatorBudgetId:
        type: integer
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      repeatPeriod:
        type: integer
      repeatUnit:
        type: string
      repeatsRemaining:
        type: integer
      sequenceNumber:
        type: integer
      startDateTime:
        type: string
      status:
        type: string
      timelogType:
        type: string
      type:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: integer
      updatedByUserId:
        type: integer
  view.ProjectBudgetNotification:
    title: ProjectBudgetNotification
    description: ProjectBudgetNotification contains all the information returned from a notification.
    type: object
    properties:
      capacityThreshold:
        type: number
      companies:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      companyIds:
        type: array
        items:
          type: integer
      id:
        type: integer
      notificationMedium:
        type: string
      teamIds:
        type: array
        items:
          type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      userIds:
        type: array
        items:
          type: integer
      users:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
  view.ProjectCategory:
    title: ProjectCategory
    description: |-
      ProjectCategory contains all the information returned from a project
      category.
    type: object
    properties:
      color:
        type: string
      count:
        type: integer
      id:
        type: integer
      name:
        type: string
      parent:
        $ref: '#/definitions/view.Relationship'
      parentId:
        type: integer
  view.ProjectFile:
    title: ProjectFile
    description: ProjectFile contains all the information returned from a file.
    type: object
    properties:
      category:
        $ref: '#/definitions/view.Relationship'
      categoryId:
        type: integer
      changeFollowers:
        $ref: '#/definitions/view.UserGroups'
      commentFollowers:
        $ref: '#/definitions/view.UserGroups'
      commentsCount:
        type: integer
      commentsCountRead:
        type: integer
      deletedAt:
        type: string
      deletedBy:
        type: integer
      description:
        type: string
      displayName:
        type: string
      downloadURL:
        type: string
      fileSource:
        type: string
      id:
        type: integer
      isLocked:
        type: boolean
      isPrivate:
        description: |-
          IsPrivate can have the values 0 for public, 1 for private and 2 for
          inherited.
        type: integer
        enum:
        - "0"
        - "1"
        - "2"
      latestFileVersionNo:
        type: integer
      lockdown:
        $ref: '#/definitions/view.Relationship'
      lockdownId:
        type: integer
      lockedBy:
        type: integer
      lockedByUserId:
        type: integer
      lockedDate:
        type: string
      numLikes:
        type: integer
      originalName:
        type: string
      previewURL:
        type: string
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      reactions:
        $ref: '#/definitions/view.ReactionsForObject'
      relatedItems:
        $ref: '#/definitions/view.RelatedItems'
      size:
        type: integer
      status:
        type: string
      tagIds:
        type: array
        items:
          type: integer
      tags:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      thumbURL:
        type: string
      updatedAt:
        type: string
      uploadedBy:
        type: integer
      uploadedByUserID:
        type: integer
      uploadedDate:
        type: string
      version:
        $ref: '#/definitions/view.Relationship'
      versionId:
        type: integer
      versions:
        type: array
        items:
          $ref: '#/definitions/view.Fileversion'
  view.ProjectFileCategory:
    title: ProjectFileCategory
    description: |-
      ProjectFileCategory contains all the information returned from a file
      category.
    type: object
    properties:
      color:
        type: string
      id:
        type: integer
      name:
        type: string
      parent:
        $ref: '#/definitions/view.Relationship'
      parentId:
        type: integer
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
  view.ProjectMessage:
    title: ProjectMessage
    description: ProjectMessage contains all the information returned from a project message.
    type: object
    properties:
      id:
        type: integer
      post:
        $ref: '#/definitions/view.Relationship'
      postId:
        type: integer
      title:
        type: string
  view.ProjectMinMaxAvailableDates:
    title: ProjectMinMaxAvailableDates
    description: |-
      ProjectMinMaxAvailableDates shows suggested start and
      end dates for a project
    type: object
    properties:
      deadlinesFound:
        type: boolean
      maxEndDate:
        type: string
      minStartDate:
        type: string
      suggestedEndDate:
        type: string
      suggestedStartDate:
        type: string
  view.ProjectSchedule:
    title: ProjectSchedule
    description: |-
      ProjectSchedule contains all the information returned from a project
      schedule.
    type: object
    properties:
      allocatedTotalMinutes:
        type: integer
      budgetIds:
        type: array
        items:
          type: integer
      budgetMinutes:
        type: integer
      budgets:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      loggedTotalMinutes:
        type: integer
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      schedule:
        type: object
        additionalProperties:
          $ref: '#/definitions/view.ProjectScheduleEntry'
      unavailableTotalMinutes:
        type: integer
      userIds:
        type: array
        items:
          type: integer
      users:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
  view.ProjectScheduleEntry:
    title: ProjectScheduleEntry
    description: ProjectScheduleEntry contains all the project summary on a specific date.
    type: object
    properties:
      allocatedMinutes:
        type: integer
      allocationIds:
        type: array
        items:
          type: integer
      allocations:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      eventIds:
        type: array
        items:
          type: integer
      events:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      loggedMinutes:
        type: integer
      milestoneIds:
        type: array
        items:
          type: integer
      milestones:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      timelogIds:
        type: array
        items:
          type: integer
      timelogs:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      unavailableMinutes:
        type: integer
  view.ProjectTaskStats:
    title: ProjectTaskStats
    description: ProjectTaskStats shows basic task stats for a project
    type: object
    properties:
      active:
        type: integer
      complete:
        type: integer
      id:
        type: integer
      late:
        type: integer
  view.ProjectUpdate:
    title: ProjectUpdate
    description: ProjectUpdate contains all the information returned from a update.
    type: object
    properties:
      color:
        type: string
      createdAt:
        type: string
      createdBy:
        type: integer
      deleted:
        type: boolean
      deletedAt:
        type: string
      deletedBy:
        type: integer
      health:
        type: integer
      healthLabel:
        type: string
      id:
        type: integer
      likeFromUserIDs:
        type: array
        items:
          type: integer
      likeFromUsers:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      reactions:
        $ref: '#/definitions/view.ReactionsForObject'
      text:
        type: string
      updatedAt:
        type: string
  view.PublicForm:
    title: PublicForm
    description: PublicForm is a publically viewable version of Form
    type: object
    properties:
      banner:
        $ref: '#/definitions/view.Banner'
      confirmationMessage:
        type: string
      content:
        $ref: '#/definitions/view.Content'
      promptAdditionalSubmissions:
        type: boolean
      token:
        $ref: '#/definitions/view.Token'
  view.Reaction:
    title: Reaction
    description: Reaction is a reaction item type.
    type: object
    properties:
      installation:
        $ref: '#/definitions/view.Relationship'
      installationId:
        type: integer
      object:
        $ref: '#/definitions/view.Relationship'
      objectId:
        type: integer
      objectType:
        type: string
      postedDateTime:
        type: string
      type:
        type: string
      user:
        $ref: '#/definitions/view.Relationship'
      userId:
        type: integer
  view.ReactionsForObject:
    title: ReactionsForObject
    description: ReactionsForObject contains all reactions information of a specific object.
    type: object
    properties:
      counts:
        $ref: '#/definitions/view.ReactionsForObjectCounter'
      mine:
        type: string
  view.ReactionsForObjectCounter:
    title: ReactionsForObjectCounter
    description: |-
      ReactionsForObjectCounter contains the reactions counter of a specific
      object.
    type: object
    properties:
      dislike:
        type: integer
      frown:
        type: integer
      heart:
        type: integer
      joy:
        type: integer
      like:
        type: integer
  view.RelatedItems:
    title: RelatedItems
    description: RelatedItems represents the items a file can be related to.
    type: object
    properties:
      comments:
        type: array
        items:
          type: integer
      messages:
        type: array
        items:
          type: integer
      tasks:
        type: array
        items:
          type: integer
  view.Relationship:
    title: Relationship
    description: Relationship describes the relation between the main entity and a sideload type.
    type: object
    properties:
      id:
        type: integer
      meta:
        type: object
      type:
        type: string
  view.SampleProject:
    title: SampleProject
    description: SampleProject contains all the sample project information.
    type: object
    properties:
      categoryId:
        type: integer
      code:
        type: string
      content: {}
      description:
        type: string
      icon:
        type: string
      id:
        type: integer
      imagePreview:
        type: string
      name:
        type: string
  view.ScheduleEntry:
    title: ScheduleEntry
    description: ScheduleEntry contains the summary on a specific date.
    type: object
    properties:
      allocatedMinutes:
        type: integer
      allocationIds:
        type: array
        items:
          type: integer
      allocations:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      eventIds:
        type: array
        items:
          type: integer
      events:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      loggedMinutes:
        type: integer
      timelogIds:
        type: array
        items:
          type: integer
      timelogs:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      unavailableMinutes:
        type: integer
  view.Status:
    title: Status
    description: Status contains all the information returned from a status.
    type: object
    properties:
      dateLastUpdated:
        type: string
      dateTime:
        type: string
      deleted:
        type: boolean
      emoji:
        type: string
      id:
        type: integer
      ipAddress:
        type: string
      text:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/view.Relationship'
      userId:
        type: integer
  view.Tag:
    title: Tag
    description: Tag contains all the information returned from a tag.
    type: object
    properties:
      color:
        type: string
      count:
        type: integer
      id:
        type: integer
      name:
        type: string
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
  view.Task:
    title: Task
    description: Task defines how entity.Task should be rendered.
    type: object
    properties:
      assigneeCompanies:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      assigneeCompanyIds:
        type: array
        items:
          type: integer
      assigneeTeamIds:
        type: array
        items:
          type: integer
      assigneeTeams:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      assigneeUserIds:
        type: array
        items:
          type: integer
      assigneeUsers:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      completedBy:
        type: integer
      completedOn:
        type: string
      createdBy:
        type: integer
      createdByUserId:
        type: integer
      crmDealIds:
        type: array
        items:
          type: integer
      dateUpdated:
        type: string
      dependencyIds:
        type: array
        items:
          type: integer
      description:
        type: string
      displayOrder:
        type: integer
      dueDate:
        type: string
      estimateMinutes:
        type: integer
      hasDeskTickets:
        type: boolean
      id:
        type: integer
      isPrivate:
        type: integer
      latestUpdates:
        type: array
        items:
          $ref: '#/definitions/view.Audit'
      name:
        type: string
      originalDueDate:
        $ref: '#/definitions/view.Date'
      parentTask:
        $ref: '#/definitions/view.Relationship'
      parentTaskId:
        type: integer
      predecessorIds:
        type: array
        items:
          type: integer
      priority:
        type: string
      progress:
        type: integer
      startDate:
        type: string
      status:
        type: string
      subTaskIds:
        type: array
        items:
          type: integer
      tagIds:
        type: array
        items:
          type: integer
      tasklist:
        $ref: '#/definitions/view.Relationship'
      tasklistId:
        type: integer
      updatedAt:
        type: string
      updatedBy:
        type: integer
      userPermissions:
        $ref: '#/definitions/view.TaskPermissions'
  view.TaskCard:
    title: TaskCard
    description: TaskCard contains all the information returned from a card.
    type: object
    properties:
      archived:
        type: boolean
      archivedAt:
        type: string
      archivedBy:
        $ref: '#/definitions/view.Relationship'
      createBy:
        $ref: '#/definitions/view.Relationship'
      createdAt:
        type: string
      deleteBy:
        $ref: '#/definitions/view.Relationship'
      deletedAt:
        type: string
      displayOrder:
        type: integer
      id:
        type: integer
      status:
        type: string
      updatedAt:
        type: string
      visible:
        type: boolean
  view.TaskPermissions:
    title: TaskPermissions
    description: TaskPermissions is a user specific set of task permissions
    type: object
    properties:
      canAddSubtasks:
        type: boolean
      canComplete:
        type: boolean
      canEdit:
        type: boolean
      canLogTime:
        type: boolean
      canViewEstTime:
        type: boolean
  view.TaskTimeTotals:
    title: TaskTimeTotals
    description: TaskTimeTotals contains time total info for a task
    type: object
    properties:
      billableLoggedMinutes:
        type: integer
      billedloggedMinutes:
        type: integer
      loggedMinutes:
        type: integer
  view.Tasklist:
    title: Tasklist
    description: Tasklist contains all the information returned from a tasklist.
    type: object
    properties:
      id:
        type: integer
      milestone:
        $ref: '#/definitions/view.Relationship'
      milestoneId:
        type: integer
      name:
        type: string
      newTaskDefaults:
        $ref: '#/definitions/view.NewTaskDefaults'
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      taskIds:
        type: array
        items:
          type: integer
      tasks:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
  view.Team:
    title: Team
    description: Team contains all the information returned from a team.
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      teamLogo:
        type: string
      teamLogoColor:
        type: string
      teamLogoIcon:
        type: string
  view.Timelog:
    title: Timelog
    description: Timelog contains all the information returned from a timelog.
    type: object
    properties:
      billable:
        type: boolean
      createdAt:
        type: string
      dateCreated:
        type: string
      dateDeleted:
        type: string
      dateEdited:
        type: string
      deleted:
        type: boolean
      deletedAt:
        type: string
      deletedBy:
        type: integer
      deletedByUserId:
        type: integer
      description:
        type: string
      deskTicketId:
        type: integer
      editedByUserId:
        type: integer
      hasStartTime:
        type: boolean
      id:
        type: integer
      invoiceNumber:
        type: string
      loggedBy:
        type: integer
      loggedByUserId:
        type: integer
      minutes:
        type: integer
      project:
        $ref: '#/definitions/view.Relationship'
      projectBillingInvoice:
        $ref: '#/definitions/view.Relationship'
      projectBillingInvoiceId:
        type: integer
      projectId:
        type: integer
      tagIds:
        type: array
        items:
          type: integer
      tags:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      task:
        $ref: '#/definitions/view.Relationship'
      taskId:
        type: integer
      taskIdPreMove:
        type: integer
      taskPreMove:
        $ref: '#/definitions/view.Relationship'
      timeLogged:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: integer
      user:
        $ref: '#/definitions/view.Relationship'
      userId:
        type: integer
  view.TimelogTotals:
    title: TimelogTotals
    description: TimelogTotals contains all the information returned for timelog totals.
    type: object
    properties:
      estimatedMinutes:
        type: integer
      estimatedMinutesActive:
        type: integer
      estimatedMinutesCompleted:
        type: integer
      estimatedMinutesFiltered:
        type: integer
      estimatedMinutesWithLoggedTime:
        type: integer
      minutes:
        type: integer
      minutesBillable:
        type: integer
      minutesBilled:
        type: integer
      minutesNonBillable:
        type: integer
      minutesNonBilled:
        type: integer
  view.Timer:
    title: Timer
    description: Timer contains all the information returned from a timer.
    type: object
    properties:
      billable:
        type: boolean
      createdAt:
        type: string
      deleted:
        type: boolean
      deletedAt:
        type: string
      description:
        type: string
      duration:
        type: integer
      id:
        type: integer
      intervals:
        type: array
        items:
          $ref: '#/definitions/view.TimerInterval'
      lastStartedAt:
        type: string
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      running:
        type: boolean
      serverTime:
        type: string
      task:
        $ref: '#/definitions/view.Relationship'
      taskId:
        type: integer
      timeLogId:
        type: integer
      timelog:
        $ref: '#/definitions/view.Relationship'
      timerLastIntervalEnd:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/view.Relationship'
      userId:
        type: integer
  view.TimerInterval:
    title: TimerInterval
    description: |-
      TimerInterval contains all the information returned from a timer
      interval.
    type: object
    properties:
      duration:
        type: integer
      from:
        type: string
      id:
        type: integer
      to:
        type: string
  view.Token:
    title: Token
    description: Token contains all the information returned from a form token.
    type: object
    properties:
      canonicalURL:
        type: string
      value:
        type: string
  view.User:
    title: User
    description: User contains all the information returned from an user.
    type: object
    properties:
      avatarUrl:
        type: string
      company:
        $ref: '#/definitions/view.Relationship'
      companyId:
        type: integer
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      isAdmin:
        type: boolean
      lastName:
        type: string
      lengthOfDay:
        type: number
      title:
        type: string
      type:
        type: string
      workingHour:
        $ref: '#/definitions/view.Relationship'
      workingHoursId:
        type: integer
  view.UserAvailability:
    title: UserAvailability
    description: UserAvailability contains all the information returned from a availability.
    type: object
    properties:
      dates:
        type: object
        additionalProperties:
          $ref: '#/definitions/view.UserAvailabilityDate'
      user:
        $ref: '#/definitions/view.Relationship'
      userId:
        type: integer
  view.UserAvailabilityDate:
    title: UserAvailabilityDate
    description: UserAvailabilityDate stores the user availability for a specific date.
    type: object
    properties:
      availableMinutes:
        type: integer
      unavailableEventIds:
        type: array
        items:
          type: integer
  view.UserDashboard:
    title: UserDashboard
    description: UserDashboard contains all the information returned from a dashboard.
    type: object
    properties:
      color:
        type: string
      createdAt:
        type: string
      dashboardPanelIds:
        type: array
        items:
          type: integer
      dashboardPanels:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      dashboardSettingIds:
        type: array
        items:
          type: integer
      dashboardSettings:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      deleted:
        type: boolean
      deletedAt:
        type: string
      description:
        type: string
      displayOrder:
        type: integer
      id:
        type: integer
      isDefault:
        type: boolean
      project:
        $ref: '#/definitions/view.Relationship'
      projectId:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/view.Relationship'
      userId:
        type: integer
  view.UserDashboardPanel:
    title: UserDashboardPanel
    description: |-
      UserDashboardPanel contains all the information returned from a dashboard
      panel.
    type: object
    properties:
      dashboardId:
        type: integer
      dashboardPanelSettingIds:
        type: array
        items:
          type: integer
      displayOrder:
        type: integer
      id:
        type: integer
      name:
        type: string
      type:
        type: string
  view.UserDashboardPanelSetting:
    title: UserDashboardPanelSetting
    description: |-
      UserDashboardPanelSetting contains all the information returned from a dashboard
      panel.
    type: object
    properties:
      dashboardId:
        type: integer
      dashboardPanelId:
        type: integer
      id:
        type: integer
      name:
        type: string
      value:
        type: string
  view.UserDashboardSetting:
    title: UserDashboardSetting
    description: |-
      UserDashboardSetting contains all the information returned from a dashboard
      setting.
    type: object
    properties:
      dashboardId:
        type: integer
      id:
        type: integer
      name:
        type: string
      value:
        type: string
  view.UserEvents:
    title: UserEvents
    description: |-
      UserEvents contains status details from other project
      features related with a user.
    type: object
    properties:
      clockedIn:
        type: boolean
  view.UserGroups:
    title: UserGroups
    description: |-
      UserGroups are common lists for storing users, companies and teams ids
      together.
    type: object
    properties:
      companies:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      companyIds:
        type: array
        items:
          type: integer
      teamIds:
        type: array
        items:
          type: integer
      teams:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      userIds:
        type: array
        items:
          type: integer
      users:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
  view.UserSchedule:
    title: UserSchedule
    description: UserSchedule contains all the information returned from a user schedule.
    type: object
    properties:
      allocatedTotalMinutes:
        type: integer
      loggedTotalMinutes:
        type: integer
      projectIds:
        type: array
        items:
          type: integer
      projects:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      schedule:
        type: object
        additionalProperties:
          $ref: '#/definitions/view.ScheduleEntry'
      unavailableTotalMinutes:
        type: integer
      user:
        $ref: '#/definitions/view.Relationship'
      userId:
        type: integer
  view.UserUtilization:
    title: UserUtilization
    description: UserUtilization contains all the information returned from a utilization.
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/view.UserUtilizationData'
      user:
        $ref: '#/definitions/view.Relationship'
      userId:
        type: integer
  view.UserUtilizationData:
    title: UserUtilizationData
    description: UserUtilizationData stores the user utilization on a specific period.
    type: object
    properties:
      allocatedMinutes:
        type: integer
      availableMinutes:
        type: integer
      billableMinutes:
        type: integer
      endDate:
        $ref: '#/definitions/view.Date'
      estimatedMinutes:
        type: integer
      loggedMinutes:
        type: integer
      startDate:
        $ref: '#/definitions/view.Date'
      unavailableMinutes:
        type: integer
      unbillableMinutes:
        type: integer
  view.Usercost:
    title: Usercost
    description: Usercost contains all the information returned from a usercost.
    type: object
    properties:
      cost:
        type: integer
      user:
        $ref: '#/definitions/view.Relationship'
      userId:
        type: integer
  view.WorkingHour:
    title: WorkingHour
    description: WorkingHour stores the the working hours of an entity (user, team, etc).
    type: object
    properties:
      createdAt:
        type: string
      dateCreated:
        type: string
      dateUpdated:
        type: string
      description:
        type: string
      entries:
        type: array
        items:
          $ref: '#/definitions/view.Relationship'
      entryIds:
        type: array
        items:
          type: integer
      id:
        type: integer
      name:
        type: string
      object:
        $ref: '#/definitions/view.Relationship'
      objectId:
        type: integer
      objectType:
        type: string
      updatedAt:
        type: string
  view.WorkingHourEntry:
    title: WorkingHourEntry
    description: WorkingHourEntry stores weekday working hour data.
    type: object
    properties:
      endTime:
        type: string
      id:
        type: integer
      startTime:
        type: string
      taskHours:
        type: number
      timezone:
        type: string
      weekday:
        type: string
      workingHour:
        $ref: '#/definitions/view.Relationship'
      workingHourId:
        type: integer

